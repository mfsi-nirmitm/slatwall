var hibachi =
webpackJsonphibachi([0],[
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatform", function() { return createPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertPlatform", function() { return assertPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroyPlatform", function() { return destroyPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlatform", function() { return getPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformRef", function() { return PlatformRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationRef", function() { return ApplicationRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return enableProdMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDevMode", function() { return isDevMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatformFactory", function() { return createPlatformFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgProbeToken", function() { return NgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_ID", function() { return APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PACKAGE_ROOT_URL", function() { return PACKAGE_ROOT_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_INITIALIZER", function() { return PLATFORM_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_ID", function() { return PLATFORM_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BOOTSTRAP_LISTENER", function() { return APP_BOOTSTRAP_LISTENER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_INITIALIZER", function() { return APP_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInitStatus", function() { return ApplicationInitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugElement", function() { return DebugElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugNode", function() { return DebugNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asNativeElements", function() { return asNativeElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugNode", function() { return getDebugNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Testability", function() { return Testability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestabilityRegistry", function() { return TestabilityRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTestabilityGetter", function() { return setTestabilityGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS", function() { return TRANSLATIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS_FORMAT", function() { return TRANSLATIONS_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCALE_ID", function() { return LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingTranslationStrategy", function() { return MissingTranslationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationModule", function() { return ApplicationModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfCreateScope", function() { return wtfCreateScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfLeave", function() { return wtfLeave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfStartTimeRange", function() { return wtfStartTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfEndTimeRange", function() { return wtfEndTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorHandler", function() { return ErrorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sanitizer", function() { return Sanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityContext", function() { return SecurityContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANALYZE_FOR_ENTRY_COMPONENTS", function() { return ANALYZE_FOR_ENTRY_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChild", function() { return ContentChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChildren", function() { return ContentChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChild", function() { return ViewChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChildren", function() { return ViewChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directive", function() { return Directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostBinding", function() { return HostBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostListener", function() { return HostListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Output", function() { return Output; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pipe", function() { return Pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function() { return CUSTOM_ELEMENTS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function() { return NO_ERRORS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModule", function() { return NgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewEncapsulation", function() { return ViewEncapsulation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forwardRef", function() { return forwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveForwardRef", function() { return resolveForwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injector", function() { return Injector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveInjector", function() { return ReflectiveInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolvedReflectiveFactory", function() { return ResolvedReflectiveFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveKey", function() { return ReflectiveKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InjectionToken", function() { return InjectionToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inject", function() { return Inject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optional", function() { return Optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injectable", function() { return Injectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Self", function() { return Self; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkipSelf", function() { return SkipSelf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Host", function() { return Host; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgZone", function() { return NgZone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderComponentType", function() { return RenderComponentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer2", function() { return Renderer2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererFactory2", function() { return RendererFactory2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererStyleFlags2", function() { return RendererStyleFlags2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RootRenderer", function() { return RootRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPILER_OPTIONS", function() { return COMPILER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compiler", function() { return Compiler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompilerFactory", function() { return CompilerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleWithComponentFactories", function() { return ModuleWithComponentFactories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRef", function() { return ComponentRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactoryResolver", function() { return ComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementRef", function() { return ElementRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactory", function() { return NgModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleRef", function() { return NgModuleRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactoryLoader", function() { return NgModuleFactoryLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModuleFactory", function() { return getModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryList", function() { return QueryList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoader", function() { return SystemJsNgModuleLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoaderConfig", function() { return SystemJsNgModuleLoaderConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateRef", function() { return TemplateRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewContainerRef", function() { return ViewContainerRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedViewRef", function() { return EmbeddedViewRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewRef", function() { return ViewRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectionStrategy", function() { return ChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectorRef", function() { return ChangeDetectorRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultIterableDiffer", function() { return DefaultIterableDiffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterableDiffers", function() { return IterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValueDiffers", function() { return KeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleChange", function() { return SimpleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedValue", function() { return WrappedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformCore", function() { return platformCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵALLOW_MULTIPLE_PLATFORMS", function() { return ALLOW_MULTIPLE_PLATFORMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAPP_ID_RANDOM_PROVIDER", function() { return APP_ID_RANDOM_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdevModeEqual", function() { return devModeEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisListLikeIterable", function() { return isListLikeIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵChangeDetectorStatus", function() { return ChangeDetectorStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisDefaultChangeDetectionStrategy", function() { return isDefaultChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵConsole", function() { return Console; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCodegenComponentFactoryResolver", function() { return CodegenComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵReflectionCapabilities", function() { return ReflectionCapabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵRenderDebugInfo", function() { return RenderDebugInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵglobal", function() { return _global; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵlooseIdentical", function() { return looseIdentical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵstringify", function() { return stringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmakeDecorator", function() { return makeDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisPromise", function() { return isPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵclearOverrides", function() { return clearOverrides; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵoverrideComponentView", function() { return overrideComponentView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵoverrideProvider", function() { return overrideProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR", function() { return NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdefineComponent", function() { return defineComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdetectChanges", function() { return detectChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵrenderComponent", function() { return renderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵC", function() { return containerStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵD", function() { return directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵE", function() { return elementStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵT", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵV", function() { return viewStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb1", function() { return bind1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return containerEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcR", function() { return containerRefreshStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcr", function() { return containerRefreshEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return elementEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return elementProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs", function() { return elementStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function() { return textBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵv", function() { return viewEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterModuleFactory", function() { return registerModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_ARRAY", function() { return EMPTY_ARRAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_MAP", function() { return EMPTY_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵand", function() { return anchorDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵccf", function() { return createComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcmf", function() { return createNgModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcrt", function() { return createRendererType2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdid", function() { return directiveDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵeld", function() { return elementDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵelementEventFullName", function() { return elementEventFullName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetComponentViewDefinitionFactory", function() { return getComponentViewDefinitionFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinlineInterpolate", function() { return inlineInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinterpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmod", function() { return moduleDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmpd", function() { return moduleProvideDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵncd", function() { return ngContentDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵnov", function() { return nodeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpid", function() { return pipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵprd", function() { return providerDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpad", function() { return pureArrayDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpod", function() { return pureObjectDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵppd", function() { return purePipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵqud", function() { return queryDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵted", function() { return textDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵunv", function() { return unwrapValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵvid", function() { return viewDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function() { return AUTO_STYLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function() { return sequence$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function() { return state$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition$$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbf", function() { return animate$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbg", function() { return group$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbk", function() { return keyframes$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbh", function() { return sequence$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbj", function() { return state$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbi", function() { return style$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbl", function() { return transition$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbe", function() { return trigger$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return _iterableDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return _keyValueDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function() { return _localeFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return _appIdRandomProviderFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return defaultIterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return defaultKeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return DefaultIterableDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return DefaultKeyValueDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return ReflectiveInjector_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return ReflectiveDependency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return resolveReflectiveProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function() { return wtfEnabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵw", function() { return createScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function() { return detectWTF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵz", function() { return endTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵx", function() { return leave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵy", function() { return startTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbc", function() { return stringify$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return makeParamDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return makePropDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵba", function() { return _def; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbb", function() { return DebugContext; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_merge__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_merge__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_share__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_share___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_operator_share__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subscription__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subscription___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_Subscription__);
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */







/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parametrized type.
 *
 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
 * the `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='InjectionToken'}
 *
 * \@stable
 * @template T
 */
var InjectionToken = /** @class */ (function () {
    function InjectionToken(_desc) {
        this._desc = _desc;
        /**
         * \@internal
         */
        this.ngMetadataName = 'InjectionToken';
    }
    /**
     * @return {?}
     */
    InjectionToken.prototype.toString = /**
     * @return {?}
     */
    function () { return "InjectionToken " + this._desc; };
    return InjectionToken;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An interface implemented by all Angular type decorators, which allows them to be used as ES7
 * decorators as well as
 * Angular DSL syntax.
 *
 * ES7 syntax:
 *
 * ```
 * \@ng.Component({...})
 * class MyClass {...}
 * ```
 * \@stable
 * @record
 */

var ANNOTATIONS = '__annotations__';
var PARAMETERS = '__paramaters__';
var PROP_METADATA = '__prop__metadata__';
/**
 * @suppress {globalThis}
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @param {?=} chainFn
 * @return {?}
 */
function makeDecorator(name, props, parentClass, chainFn) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {?} objOrType
     * @return {?}
     */
    function DecoratorFactory(objOrType) {
        if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
        }
        var /** @type {?} */ annotationInstance = new (/** @type {?} */ (DecoratorFactory))(objOrType);
        var /** @type {?} */ TypeDecorator = /** @type {?} */ (function TypeDecorator(cls) {
            // Use of Object.defineProperty is important since it creates non-enumerable property which
            // prevents the property is copied during subclassing.
            var /** @type {?} */ annotations = cls.hasOwnProperty(ANNOTATIONS) ?
                (/** @type {?} */ (cls))[ANNOTATIONS] :
                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
            annotations.push(annotationInstance);
            return cls;
        });
        if (chainFn)
            chainFn(TypeDecorator);
        return TypeDecorator;
    }
    if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.ngMetadataName = name;
    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;
    return /** @type {?} */ (DecoratorFactory);
}
/**
 * @param {?=} props
 * @return {?}
 */
function makeMetadataCtor(props) {
    return function ctor() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (props) {
            var /** @type {?} */ values = props.apply(void 0, args);
            for (var /** @type {?} */ propName in values) {
                this[propName] = values[propName];
            }
        }
    };
}
/**
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @return {?}
 */
function makeParamDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function ParamDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;
        return ParamDecorator;
        /**
         * @param {?} cls
         * @param {?} unusedKey
         * @param {?} index
         * @return {?}
         */
        function ParamDecorator(cls, unusedKey, index) {
            // Use of Object.defineProperty is important since it creates non-enumerable property which
            // prevents the property is copied during subclassing.
            var /** @type {?} */ parameters = cls.hasOwnProperty(PARAMETERS) ?
                (/** @type {?} */ (cls))[PARAMETERS] :
                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            (parameters[index] = parameters[index] || []).push(annotationInstance);
            return cls;
        }
        var _a;
    }
    if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.ngMetadataName = name;
    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
}
/**
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @return {?}
 */
function makePropDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function PropDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        return function PropDecorator(target, name) {
            var /** @type {?} */ constructor = target.constructor;
            // Use of Object.defineProperty is important since it creates non-enumerable property which
            // prevents the property is copied during subclassing.
            var /** @type {?} */ meta = constructor.hasOwnProperty(PROP_METADATA) ?
                (/** @type {?} */ (constructor))[PROP_METADATA] :
                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
        };
        var _a;
    }
    if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.ngMetadataName = name;
    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This token can be used to create a virtual provider that will populate the
 * `entryComponents` fields of components and ng modules based on its `useValue`.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) will be added to the `entryComponents` property.
 *
 * ### Example
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on the router configuration which refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * \@NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * \@experimental
 */
var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
/**
 * Type of the Attribute decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Attribute decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });
/**
 * Base class for query metadata.
 *
 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
 * more information.
 *
 * \@stable
 * @abstract
 */
var Query = /** @class */ (function () {
    function Query() {
    }
    return Query;
}());
/**
 * Type of the ContentChildren decorator / constructor function.
 *
 * See {\@link ContentChildren}.
 *
 * \@stable
 * @record
 */

/**
 * ContentChildren decorator and metadata.
 *
 *  \@stable
 *  \@Annotation
 */
var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
}, Query);
/**
 * Type of the ContentChild decorator / constructor function.
 *
 *
 * \@stable
 * @record
 */

/**
 * ContentChild decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ContentChild = makePropDecorator('ContentChild', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
}, Query);
/**
 * Type of the ViewChildren decorator / constructor function.
 *
 * See {\@link ViewChildren}.
 *
 * \@stable
 * @record
 */

/**
 * ViewChildren decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
}, Query);
/**
 * Type of the ViewChild decorator / constructor function.
 *
 * See {\@link ViewChild}
 *
 * \@stable
 * @record
 */

/**
 * ViewChild decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ViewChild = makePropDecorator('ViewChild', function (selector, data) {
    return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));
}, Query);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var ChangeDetectionStrategy = {
    /**
       * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.
       */
    OnPush: 0,
    /**
       * `Default` means that the change detector's mode will be initially set to `CheckAlways`.
       */
    Default: 1,
};
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
/** @enum {number} */
var ChangeDetectorStatus = {
    /**
       * `CheckOnce` means that after calling detectChanges the mode of the change detector
       * will become `Checked`.
       */
    CheckOnce: 0,
    /**
       * `Checked` means that the change detector should be skipped until its mode changes to
       * `CheckOnce`.
       */
    Checked: 1,
    /**
       * `CheckAlways` means that after calling detectChanges the mode of the change detector
       * will remain `CheckAlways`.
       */
    CheckAlways: 2,
    /**
       * `Detached` means that the change detector sub tree is not a part of the main tree and
       * should be skipped.
       */
    Detached: 3,
    /**
       * `Errored` means that the change detector encountered an error checking a binding
       * or calling a directive lifecycle method and is now in an inconsistent state. Change
       * detectors in this state will no longer detect changes.
       */
    Errored: 4,
    /**
       * `Destroyed` means that the change detector is destroyed.
       */
    Destroyed: 5,
};
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
/**
 * @param {?} changeDetectionStrategy
 * @return {?}
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return changeDetectionStrategy == null ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Type of the Directive decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Directive decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Directive = makeDecorator('Directive', function (dir) {
    if (dir === void 0) { dir = {}; }
    return dir;
});
/**
 * Type of the Component decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Component decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Component = makeDecorator('Component', function (c) {
    if (c === void 0) { c = {}; }
    return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ changeDetection: ChangeDetectionStrategy.Default }, c));
}, Directive);
/**
 * Type of the Pipe decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Pipe decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Pipe = makeDecorator('Pipe', function (p) { return (Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({ pure: true }, p)); });
/**
 * Type of the Input decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Input decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * Type of the Output decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Output decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * Type of the HostBinding decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * HostBinding decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
/**
 * Type of the HostListener decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * HostListener decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A wrapper around a module that also includes the providers.
 *
 * \@stable
 * @record
 */

/**
 * Interface for schema definitions in \@NgModules.
 *
 * \@experimental
 * @record
 */

/**
 * Defines a schema that will allow:
 * - any non-Angular elements with a `-` in their name,
 * - any properties on elements with a `-` in their name which is the common rule for custom
 * elements.
 *
 * \@stable
 */
var CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
};
/**
 * Defines a schema that will allow any property on any element.
 *
 * \@experimental
 */
var NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
};
/**
 * Type of the NgModule decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * NgModule decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var ViewEncapsulation = {
    /**
       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
       * Element and pre-processing the style rules provided via {@link Component#styles styles} or
       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
       * selectors.
       *
       * This is the default option.
       */
    Emulated: 0,
    /**
       * Use the native encapsulation mechanism of the renderer.
       *
       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
       * creating a ShadowRoot for Component's Host Element.
       */
    Native: 1,
    /**
       * Don't provide any template or style encapsulation.
       */
    None: 2,
};
ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
ViewEncapsulation[ViewEncapsulation.Native] = "Native";
ViewEncapsulation[ViewEncapsulation.None] = "None";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Represents the version of Angular
 *
 * \@stable
 */
var Version = /** @class */ (function () {
    function Version(full) {
        this.full = full;
        this.major = full.split('.')[0];
        this.minor = full.split('.')[1];
        this.patch = full.split('.').slice(2).join('.');
    }
    return Version;
}());
/**
 * \@stable
 */
var VERSION = new Version('5.2.10');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Type of the Inject decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Inject decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });
/**
 * Type of the Optional decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Optional decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Optional = makeParamDecorator('Optional');
/**
 * Type of the Injectable decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Injectable decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Injectable = makeDecorator('Injectable');
/**
 * Type of the Self decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Self decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Self = makeParamDecorator('Self');
/**
 * Type of the SkipSelf decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * SkipSelf decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var SkipSelf = makeParamDecorator('SkipSelf');
/**
 * Type of the Host decorator / constructor function.
 *
 * \@stable
 * @record
 */

/**
 * Host decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Host = makeParamDecorator('Host');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _global = __window || __global || __self;
var promise = Promise.resolve(0);
var _symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (!_symbolIterator) {
        var /** @type {?} */ Symbol_1 = _global['Symbol'];
        if (Symbol_1 && Symbol_1.iterator) {
            _symbolIterator = Symbol_1.iterator;
        }
        else {
            // es6-shim specific logic
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
/**
 * @param {?} fn
 * @return {?}
 */
function scheduleMicroTask(fn) {
    if (typeof Zone === 'undefined') {
        // use promise to schedule microTask instead of use Zone
        promise.then(function () { fn && fn.apply(null, null); });
    }
    else {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token instanceof Array) {
        return '[' + token.map(stringify).join(', ') + ']';
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    if (res == null) {
        return '' + res;
    }
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An interface that a function passed into {\@link forwardRef} has to implement.
 *
 * ### Example
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}
 * \@experimental
 * @record
 */

/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * \@experimental
 * @param {?} forwardRefFn
 * @return {?}
 */
function forwardRef(forwardRefFn) {
    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;
    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };
    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * See: {\@link forwardRef}
 * \@experimental
 * @param {?} type
 * @return {?}
 */
function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
        type.__forward_ref__ === forwardRef) {
        return (/** @type {?} */ (type))();
    }
    else {
        return type;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SOURCE = '__source';
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = /** @class */ (function () {
    function _NullInjector() {
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    _NullInjector.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
        if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("NullInjectorError: No provider for " + stringify(token) + "!");
        }
        return notFoundValue;
    };
    return _NullInjector;
}());
/**
 * \@whatItDoes Injector interface
 * \@howToUse
 * ```
 * const injector: Injector = ...;
 * injector.get(...);
 * ```
 *
 * \@description
 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * \@stable
 * @abstract
 */
var Injector = /** @class */ (function () {
    function Injector() {
    }
    /**
     * Create a new Injector which is configure using `StaticProvider`s.
     *
     * ### Example
     *
     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
     */
    /**
     * Create a new Injector which is configure using `StaticProvider`s.
     *
     * ### Example
     *
     * {\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
     * @param {?} options
     * @param {?=} parent
     * @return {?}
     */
    Injector.create = /**
     * Create a new Injector which is configure using `StaticProvider`s.
     *
     * ### Example
     *
     * {\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
     * @param {?} options
     * @param {?=} parent
     * @return {?}
     */
    function (options, parent) {
        if (Array.isArray(options)) {
            return new StaticInjector(options, parent);
        }
        else {
            return new StaticInjector(options.providers, options.parent, options.name || null);
        }
    };
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    return Injector;
}());
var IDENT = function (value) {
    return value;
};
var EMPTY = /** @type {?} */ ([]);
var CIRCULAR = IDENT;
var MULTI_PROVIDER_FN = function () {
    return Array.prototype.slice.call(arguments);
};
var GET_PROPERTY_NAME = /** @type {?} */ ({});
var ɵ2 = GET_PROPERTY_NAME;
var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ2 });
var NG_TOKEN_PATH = 'ngTokenPath';
var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
var NULL_INJECTOR = Injector.NULL;
var NEW_LINE = /\n/gm;
var NO_NEW_LINE = 'ɵ';
var StaticInjector = /** @class */ (function () {
    function StaticInjector(providers, parent, source) {
        if (parent === void 0) { parent = NULL_INJECTOR; }
        if (source === void 0) { source = null; }
        this.parent = parent;
        this.source = source;
        var /** @type {?} */ records = this._records = new Map();
        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));
        recursivelyProcessProviders(records, providers);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    StaticInjector.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        var /** @type {?} */ record = this._records.get(token);
        try {
            return tryResolveToken(token, record, this._records, this.parent, notFoundValue);
        }
        catch (/** @type {?} */ e) {
            var /** @type {?} */ tokenPath = e[NG_TEMP_TOKEN_PATH];
            if (token[SOURCE]) {
                tokenPath.unshift(token[SOURCE]);
            }
            e.message = formatError('\n' + e.message, tokenPath, this.source);
            e[NG_TOKEN_PATH] = tokenPath;
            e[NG_TEMP_TOKEN_PATH] = null;
            throw e;
        }
    };
    /**
     * @return {?}
     */
    StaticInjector.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tokens = /** @type {?} */ ([]), /** @type {?} */ records = this._records;
        records.forEach(function (v, token) { return tokens.push(stringify(token)); });
        return "StaticInjector[" + tokens.join(', ') + "]";
    };
    return StaticInjector;
}());
/**
 * @param {?} provider
 * @return {?}
 */
function resolveProvider(provider) {
    var /** @type {?} */ deps = computeDeps(provider);
    var /** @type {?} */ fn = IDENT;
    var /** @type {?} */ value = EMPTY;
    var /** @type {?} */ useNew = false;
    var /** @type {?} */ provide = resolveForwardRef(provider.provide);
    if (USE_VALUE in provider) {
        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
        value = (/** @type {?} */ (provider)).useValue;
    }
    else if ((/** @type {?} */ (provider)).useFactory) {
        fn = (/** @type {?} */ (provider)).useFactory;
    }
    else if ((/** @type {?} */ (provider)).useExisting) {
        // Just use IDENT
    }
    else if ((/** @type {?} */ (provider)).useClass) {
        useNew = true;
        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);
    }
    else if (typeof provide == 'function') {
        useNew = true;
        fn = provide;
    }
    else {
        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
    }
    return { deps: deps, fn: fn, useNew: useNew, value: value };
}
/**
 * @param {?} token
 * @return {?}
 */
function multiProviderMixError(token) {
    return staticError('Cannot mix multi providers and regular providers', token);
}
/**
 * @param {?} records
 * @param {?} provider
 * @return {?}
 */
function recursivelyProcessProviders(records, provider) {
    if (provider) {
        provider = resolveForwardRef(provider);
        if (provider instanceof Array) {
            // if we have an array recurse into the array
            for (var /** @type {?} */ i = 0; i < provider.length; i++) {
                recursivelyProcessProviders(records, provider[i]);
            }
        }
        else if (typeof provider === 'function') {
            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
            // error messages
            throw staticError('Function/Class not supported', provider);
        }
        else if (provider && typeof provider === 'object' && provider.provide) {
            // At this point we have what looks like a provider: {provide: ?, ....}
            var /** @type {?} */ token = resolveForwardRef(provider.provide);
            var /** @type {?} */ resolvedProvider = resolveProvider(provider);
            if (provider.multi === true) {
                // This is a multi provider.
                var /** @type {?} */ multiProvider = records.get(token);
                if (multiProvider) {
                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                        throw multiProviderMixError(token);
                    }
                }
                else {
                    // Create a placeholder factory which will look up the constituents of the multi provider.
                    records.set(token, multiProvider = /** @type {?} */ ({
                        token: provider.provide,
                        deps: [],
                        useNew: false,
                        fn: MULTI_PROVIDER_FN,
                        value: EMPTY
                    }));
                }
                // Treat the provider as the token.
                token = provider;
                multiProvider.deps.push({ token: token, options: 6 /* Default */ });
            }
            var /** @type {?} */ record = records.get(token);
            if (record && record.fn == MULTI_PROVIDER_FN) {
                throw multiProviderMixError(token);
            }
            records.set(token, resolvedProvider);
        }
        else {
            throw staticError('Unexpected provider', provider);
        }
    }
}
/**
 * @param {?} token
 * @param {?} record
 * @param {?} records
 * @param {?} parent
 * @param {?} notFoundValue
 * @return {?}
 */
function tryResolveToken(token, record, records, parent, notFoundValue) {
    try {
        return resolveToken(token, record, records, parent, notFoundValue);
    }
    catch (/** @type {?} */ e) {
        // ensure that 'e' is of type Error.
        if (!(e instanceof Error)) {
            e = new Error(e);
        }
        var /** @type {?} */ path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(token);
        if (record && record.value == CIRCULAR) {
            // Reset the Circular flag.
            record.value = EMPTY;
        }
        throw e;
    }
}
/**
 * @param {?} token
 * @param {?} record
 * @param {?} records
 * @param {?} parent
 * @param {?} notFoundValue
 * @return {?}
 */
function resolveToken(token, record, records, parent, notFoundValue) {
    var /** @type {?} */ value;
    if (record) {
        // If we don't have a record, this implies that we don't own the provider hence don't know how
        // to resolve it.
        value = record.value;
        if (value == CIRCULAR) {
            throw Error(NO_NEW_LINE + 'Circular dependency');
        }
        else if (value === EMPTY) {
            record.value = CIRCULAR;
            var /** @type {?} */ obj = undefined;
            var /** @type {?} */ useNew = record.useNew;
            var /** @type {?} */ fn = record.fn;
            var /** @type {?} */ depRecords = record.deps;
            var /** @type {?} */ deps = EMPTY;
            if (depRecords.length) {
                deps = [];
                for (var /** @type {?} */ i = 0; i < depRecords.length; i++) {
                    var /** @type {?} */ depRecord = depRecords[i];
                    var /** @type {?} */ options = depRecord.options;
                    var /** @type {?} */ childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;
                    deps.push(tryResolveToken(
                    // Current Token to resolve
                    depRecord.token, childRecord, records, 
                    // If we don't know how to resolve dependency and we should not check parent for it,
                    // than pass in Null injector.
                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND));
                }
            }
            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);
        }
    }
    else {
        value = parent.get(token, notFoundValue);
    }
    return value;
    var _a;
}
/**
 * @param {?} provider
 * @return {?}
 */
function computeDeps(provider) {
    var /** @type {?} */ deps = EMPTY;
    var /** @type {?} */ providerDeps = (/** @type {?} */ (provider)).deps;
    if (providerDeps && providerDeps.length) {
        deps = [];
        for (var /** @type {?} */ i = 0; i < providerDeps.length; i++) {
            var /** @type {?} */ options = 6;
            var /** @type {?} */ token = resolveForwardRef(providerDeps[i]);
            if (token instanceof Array) {
                for (var /** @type {?} */ j = 0, /** @type {?} */ annotations = token; j < annotations.length; j++) {
                    var /** @type {?} */ annotation = annotations[j];
                    if (annotation instanceof Optional || annotation == Optional) {
                        options = options | 1 /* Optional */;
                    }
                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
                        options = options & ~2 /* CheckSelf */;
                    }
                    else if (annotation instanceof Self || annotation == Self) {
                        options = options & ~4 /* CheckParent */;
                    }
                    else if (annotation instanceof Inject) {
                        token = (/** @type {?} */ (annotation)).token;
                    }
                    else {
                        token = resolveForwardRef(annotation);
                    }
                }
            }
            deps.push({ token: token, options: options });
        }
    }
    else if ((/** @type {?} */ (provider)).useExisting) {
        var /** @type {?} */ token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);
        deps = [{ token: token, options: 6 /* Default */ }];
    }
    else if (!providerDeps && !(USE_VALUE in provider)) {
        // useValue & useExisting are the only ones which are exempt from deps all others need it.
        throw staticError('\'deps\' required', provider);
    }
    return deps;
}
/**
 * @param {?} text
 * @param {?} obj
 * @param {?=} source
 * @return {?}
 */
function formatError(text, obj, source) {
    if (source === void 0) { source = null; }
    text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
    var /** @type {?} */ context = stringify(obj);
    if (obj instanceof Array) {
        context = obj.map(stringify).join(' -> ');
    }
    else if (typeof obj === 'object') {
        var /** @type {?} */ parts = /** @type {?} */ ([]);
        for (var /** @type {?} */ key in obj) {
            if (obj.hasOwnProperty(key)) {
                var /** @type {?} */ value = obj[key];
                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
            }
        }
        context = "{" + parts.join(', ') + "}";
    }
    return "StaticInjectorError" + (source ? '(' + source + ')' : '') + "[" + context + "]: " + text.replace(NEW_LINE, '\n  ');
}
/**
 * @param {?} text
 * @param {?} obj
 * @return {?}
 */
function staticError(text, obj) {
    return new Error(formatError(text, obj));
}
/**
 * @template T
 * @param {?} objWithPropertyToExtract
 * @return {?}
 */
function getClosureSafeProperty(objWithPropertyToExtract) {
    for (var /** @type {?} */ key in objWithPropertyToExtract) {
        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {
            return key;
        }
    }
    throw Error('!prop');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
var ERROR_LOGGER = 'ngErrorLogger';
/**
 * @param {?} error
 * @return {?}
 */

/**
 * @param {?} error
 * @return {?}
 */
function getDebugContext(error) {
    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];
}
/**
 * @param {?} error
 * @return {?}
 */
function getOriginalError(error) {
    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];
}
/**
 * @param {?} error
 * @return {?}
 */
function getErrorLogger(error) {
    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;
}
/**
 * @param {?} console
 * @param {...?} values
 * @return {?}
 */
function defaultErrorLogger(console) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    console.error.apply(console, values);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Provides a hook for centralized exception handling.
 *
 * \@description
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * \@NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * \@stable
 */
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
        /**
         * \@internal
         */
        this._console = console;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var /** @type {?} */ originalError = this._findOriginalError(error);
        var /** @type {?} */ context = this._findContext(error);
        // Note: Browser consoles show the place from where console.error was called.
        // We can use this to give users additional information about the error.
        var /** @type {?} */ errorLogger = getErrorLogger(error);
        errorLogger(this._console, "ERROR", error);
        if (originalError) {
            errorLogger(this._console, "ORIGINAL ERROR", originalError);
        }
        if (context) {
            errorLogger(this._console, 'ERROR CONTEXT', context);
        }
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findContext = /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error) {
            return getDebugContext(error) ? getDebugContext(error) :
                this._findContext(getOriginalError(error));
        }
        return null;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findOriginalError = /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var /** @type {?} */ e = getOriginalError(error);
        while (e && getOriginalError(e)) {
            e = getOriginalError(e);
        }
        return e;
    };
    return ErrorHandler;
}());
/**
 * @param {?} message
 * @param {?} originalError
 * @return {?}
 */
function wrappedError(message, originalError) {
    var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
    var /** @type {?} */ error = Error(msg);
    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} keys
 * @return {?}
 */
function findFirstClosedCycle(keys) {
    var /** @type {?} */ res = [];
    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
/**
 * @param {?} keys
 * @return {?}
 */
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
/**
 * @record
 */

/**
 * @param {?} injector
 * @param {?} key
 * @param {?} constructResolvingMessage
 * @param {?=} originalError
 * @return {?}
 */
function injectionError(injector, key, constructResolvingMessage, originalError) {
    var /** @type {?} */ keys = [key];
    var /** @type {?} */ errMsg = constructResolvingMessage(keys);
    var /** @type {?} */ error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));
    error.addKey = addKey;
    error.keys = keys;
    error.injectors = [injector];
    error.constructResolvingMessage = constructResolvingMessage;
    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}
/**
 * @this {?}
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function addKey(injector, key) {
    this.injectors.push(injector);
    this.keys.push(key);
    // Note: This updated message won't be reflected in the `.stack` property
    this.message = this.constructResolvingMessage(this.keys);
}
/**
 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
 * {\@link Injector} does not have a {\@link Provider} for the given key.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function noProviderError(injector, key) {
    return injectionError(injector, key, function (keys) {
        var /** @type {?} */ first = stringify(keys[0].token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
    });
}
/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function cyclicDependencyError(injector, key) {
    return injectionError(injector, key, function (keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
    });
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);
 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @param {?} injector
 * @param {?} originalException
 * @param {?} originalStack
 * @param {?} key
 * @return {?}
 */
function instantiationError(injector, originalException, originalStack, key) {
    return injectionError(injector, key, function (keys) {
        var /** @type {?} */ first = stringify(keys[0].token);
        return originalException.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".";
    }, originalException);
}
/**
 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @param {?} provider
 * @return {?}
 */
function invalidProviderError(provider) {
    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 * \@stable
 * @param {?} typeOrFunc
 * @param {?} params
 * @return {?}
 */
function noAnnotationError(typeOrFunc, params) {
    var /** @type {?} */ signature = [];
    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
        var /** @type {?} */ parameter = params[i];
        if (!parameter || parameter.length == 0) {
            signature.push('?');
        }
        else {
            signature.push(parameter.map(stringify).join(' '));
        }
    }
    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
        signature.join(', ') + '). ' +
        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
        stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 * \@stable
 * @param {?} index
 * @return {?}
 */
function outOfBoundsError(index) {
    return Error("Index " + index + " is out-of-bounds.");
}
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 * @param {?} provider1
 * @param {?} provider2
 * @return {?}
 */
function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 * @deprecated No replacement
 */
var ReflectiveKey = /** @class */ (function () {
    /**
     * Private
     */
    function ReflectiveKey(token, id) {
        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
        this.displayName = stringify(this.token);
    }
    /**
     * Retrieves a `Key` for a token.
     */
    /**
     * Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */
    ReflectiveKey.get = /**
     * Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */
    function (token) {
        return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
        /**
         * @returns the number of keys registered in the system.
         */
        get: /**
         * @return {?} the number of keys registered in the system.
         */
        function () { return _globalKeyRegistry.numberOfKeys; },
        enumerable: true,
        configurable: true
    });
    return ReflectiveKey;
}());
var KeyRegistry = /** @class */ (function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    /**
     * @param {?} token
     * @return {?}
     */
    KeyRegistry.prototype.get = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token instanceof ReflectiveKey)
            return token;
        if (this._allKeys.has(token)) {
            return /** @type {?} */ ((this._allKeys.get(token)));
        }
        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        get: /**
         * @return {?}
         */
        function () { return this._allKeys.size; },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
}());
var _globalKeyRegistry = new KeyRegistry();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Represents a type that a Component or other object is instances of.
 *
 * \@description
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * \@stable
 */
var Type = Function;
/**
 * @param {?} v
 * @return {?}
 */
function isType(v) {
    return typeof v === 'function';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Attention: These regex has to hold even if the code is minified!
 */
var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
var INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[A-Za-z\d$_]+\s*{/;
var INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[A-Za-z\d$_]+\s*{[\s\S]*constructor\s*\(/;
var ReflectionCapabilities = /** @class */ (function () {
    function ReflectionCapabilities(reflect) {
        this._reflect = reflect || _global['Reflect'];
    }
    /**
     * @return {?}
     */
    ReflectionCapabilities.prototype.isReflectionEnabled = /**
     * @return {?}
     */
    function () { return true; };
    /**
     * @template T
     * @param {?} t
     * @return {?}
     */
    ReflectionCapabilities.prototype.factory = /**
     * @template T
     * @param {?} t
     * @return {?}
     */
    function (t) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
    }; };
    /** @internal */
    /**
     * \@internal
     * @param {?} paramTypes
     * @param {?} paramAnnotations
     * @return {?}
     */
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**
     * \@internal
     * @param {?} paramTypes
     * @param {?} paramAnnotations
     * @return {?}
     */
    function (paramTypes, paramAnnotations) {
        var /** @type {?} */ result;
        if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
        }
        else {
            result = new Array(paramTypes.length);
        }
        for (var /** @type {?} */ i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (paramAnnotations && paramAnnotations[i] != null) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    /**
     * @param {?} type
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownParameters = /**
     * @param {?} type
     * @param {?} parentCtor
     * @return {?}
     */
    function (type, parentCtor) {
        var /** @type {?} */ typeStr = type.toString();
        // If we have no decorators, we only have function.length as metadata.
        // In that case, to detect whether a child class declared an own constructor or not,
        // we need to look inside of that constructor to check whether it is
        // just calling the parent.
        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
        // that sets 'design:paramtypes' to []
        // if a class inherits from another class but has no ctor declared itself.
        if (DELEGATE_CTOR.exec(typeStr) ||
            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {
            return null;
        }
        // Prefer the direct API.
        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {
            return (/** @type {?} */ (type)).parameters;
        }
        // API of tsickle for lowering decorators to properties on the class.
        var /** @type {?} */ tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            // Newer tsickle uses a function closure
            // Retain the non-function case for compatibility with older tsickle
            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            var /** @type {?} */ paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
            var /** @type {?} */ paramAnnotations_1 = ctorParameters.map(function (ctorParam) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
        }
        // API for metadata created by invoking the decorators.
        var /** @type {?} */ paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];
        var /** @type {?} */ paramTypes = this._reflect && this._reflect.getOwnMetadata &&
            this._reflect.getOwnMetadata('design:paramtypes', type);
        if (paramTypes || paramAnnotations) {
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        // If a class has no decorators, at least create metadata
        // based on function.length.
        // Note: We know that this is a real constructor as we checked
        // the content of the constructor above.
        return new Array((/** @type {?} */ (type.length))).fill(undefined);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.parameters = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        // Note: only report metadata if we have at least one class decorator
        // to stay in sync with the static reflector.
        if (!isType(type)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(type);
        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
        }
        return parameters || [];
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownAnnotations = /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {
            var /** @type {?} */ annotations = (/** @type {?} */ (typeOrFunc)).annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);
        }
        // API for metadata created by invoking the decorators.
        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];
        }
        return null;
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.annotations = /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownPropMetadata = /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&
            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
            var /** @type {?} */ propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&
            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
            var /** @type {?} */ propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;
            var /** @type {?} */ propMetadata_1 = /** @type {?} */ ({});
            Object.keys(propDecorators_1).forEach(function (prop) {
                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
        }
        // API for metadata created by invoking the decorators.
        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];
        }
        return null;
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.propMetadata = /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ propMetadata = {};
        if (parentCtor !== Object) {
            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata_1).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata_1[propName];
            });
        }
        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach(function (propName) {
                var /** @type {?} */ decorators = [];
                if (propMetadata.hasOwnProperty(propName)) {
                    decorators.push.apply(decorators, propMetadata[propName]);
                }
                decorators.push.apply(decorators, ownPropMetadata[propName]);
                propMetadata[propName] = decorators;
            });
        }
        return propMetadata;
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    ReflectionCapabilities.prototype.hasLifecycleHook = /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    function (type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.guards = /**
     * @param {?} type
     * @return {?}
     */
    function (type) { return {}; };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.getter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.setter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.method = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return /** @type {?} */ (new Function('o', 'args', functionBody));
    };
    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.importUri = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        // StaticSymbol
        if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
        }
        // Runtime type
        return "./" + stringify(type);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.resourceUri = /**
     * @param {?} type
     * @return {?}
     */
    function (type) { return "./" + stringify(type); };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveIdentifier = /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    function (name, moduleUrl, members, runtime) {
        return runtime;
    };
    /**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveEnum = /**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */
    function (enumIdentifier, name) { return enumIdentifier[name]; };
    return ReflectionCapabilities;
}());
/**
 * @param {?} decoratorInvocations
 * @return {?}
 */
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var /** @type {?} */ decoratorType = decoratorInvocation.type;
        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
}
/**
 * @param {?} ctor
 * @return {?}
 */
function getParentCtor(ctor) {
    var /** @type {?} */ parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
    // Note: We always use `Object` as the null value
    // to simplify checking later on.
    return parentCtor || Object;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */
var Reflector = /** @class */ (function () {
    function Reflector(reflectionCapabilities) {
        this.reflectionCapabilities = reflectionCapabilities;
    }
    /**
     * @param {?} caps
     * @return {?}
     */
    Reflector.prototype.updateCapabilities = /**
     * @param {?} caps
     * @return {?}
     */
    function (caps) { this.reflectionCapabilities = caps; };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.factory = /**
     * @param {?} type
     * @return {?}
     */
    function (type) { return this.reflectionCapabilities.factory(type); };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.parameters = /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function (typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.annotations = /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function (typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.propMetadata = /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function (typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    Reflector.prototype.hasLifecycleHook = /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    function (type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.getter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { return this.reflectionCapabilities.getter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.setter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { return this.reflectionCapabilities.setter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.method = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { return this.reflectionCapabilities.method(name); };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.importUri = /**
     * @param {?} type
     * @return {?}
     */
    function (type) { return this.reflectionCapabilities.importUri(type); };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.resourceUri = /**
     * @param {?} type
     * @return {?}
     */
    function (type) { return this.reflectionCapabilities.resourceUri(type); };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    Reflector.prototype.resolveIdentifier = /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    function (name, moduleUrl, members, runtime) {
        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
    };
    /**
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.resolveEnum = /**
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */
    function (identifier, name) {
        return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The {\@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */
var reflector = new Reflector(new ReflectionCapabilities());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */
var ReflectiveDependency = /** @class */ (function () {
    function ReflectiveDependency(key, optional, visibility) {
        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    ReflectiveDependency.fromKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return new ReflectiveDependency(key, false, null);
    };
    return ReflectiveDependency;
}());
var _EMPTY_LIST = [];
/**
 * An internal resolved representation of a {\@link Provider} used by the {\@link Injector}.
 *
 * It is usually created automatically by `Injector.resolveAndCreate`.
 *
 * It can be created manually, as follows:
 *
 * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))
 *
 * ```typescript
 * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);
 * var injector = Injector.fromResolvedProviders(resolvedProviders);
 *
 * expect(injector.get('message')).toEqual('Hello');
 * ```
 *
 * \@experimental
 * @record
 */

var ResolvedReflectiveProvider_ = /** @class */ (function () {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
        this.resolvedFactory = this.resolvedFactories[0];
    }
    return ResolvedReflectiveProvider_;
}());
/**
 * An internal resolved representation of a factory function created by resolving {\@link
 * Provider}.
 * \@experimental
 */
var ResolvedReflectiveFactory = /** @class */ (function () {
    function ResolvedReflectiveFactory(factory, dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
}());
/**
 * Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveFactory(provider) {
    var /** @type {?} */ factoryFn;
    var /** @type {?} */ resolvedDeps;
    if (provider.useClass) {
        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (provider.useExisting) {
        factoryFn = function (aliasInstance) { return aliasInstance; };
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    }
    else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    }
    else {
        factoryFn = function () { return provider.useValue; };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
 *
 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
 * convenience provider syntax.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
}
/**
 * Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */
function resolveReflectiveProviders(providers) {
    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where
 * each key is contained exactly once and multi providers
 * have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            }
            else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        }
        else {
            var /** @type {?} */ resolvedProvider = void 0;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            }
            else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof Type) {
            res.push({ provide: b, useClass: b });
        }
        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {
            res.push(/** @type {?} */ (b));
        }
        else if (b instanceof Array) {
            _normalizeProviders(b, res);
        }
        else {
            throw invalidProviderError(b);
        }
    });
    return res;
}
/**
 * @param {?} typeOrFunc
 * @param {?=} dependencies
 * @return {?}
 */
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    }
    else {
        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
    }
}
/**
 * @param {?} typeOrFunc
 * @return {?}
 */
function _dependenciesFor(typeOrFunc) {
    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
    if (!params)
        return [];
    if (params.some(function (p) { return p == null; })) {
        throw noAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
}
/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */
function _extractToken(typeOrFunc, metadata, params) {
    var /** @type {?} */ token = null;
    var /** @type {?} */ optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null);
        }
        else {
            return _createDependency(metadata, optional, null);
        }
    }
    var /** @type {?} */ visibility = null;
    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
        var /** @type {?} */ paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof Optional) {
            optional = true;
        }
        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
            visibility = paramMetadata;
        }
        else if (paramMetadata instanceof InjectionToken) {
            token = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, visibility);
    }
    else {
        throw noAnnotationError(typeOrFunc, params);
    }
}
/**
 * @param {?} token
 * @param {?} optional
 * @param {?} visibility
 * @return {?}
 */
function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Threshold for the dynamic version
var UNDEFINED = new Object();
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * \@Injectable()
 * class Engine {
 * }
 *
 * \@Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
 * @abstract
 */
var ReflectiveInjector = /** @class */ (function () {
    function ReflectiveInjector() {
    }
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.
     */
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {\@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.resolve = /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {\@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.
     * @param {?} providers
     * @return {?}
     */
    function (providers) {
        return resolveReflectiveProviders(providers);
    };
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {@link ReflectiveInjector#resolve resolve} and
     * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.
     */
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {\@link ReflectiveInjector#resolve resolve} and
     * {\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.resolveAndCreate = /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {\@link ReflectiveInjector#resolve resolve} and
     * {\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    function (providers, parent) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * @experimental
     */
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * \@experimental
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.fromResolvedProviders = /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * \@experimental
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    function (providers, parent) {
        return new ReflectiveInjector_(providers, parent);
    };
    return ReflectiveInjector;
}());
var ReflectiveInjector_ = /** @class */ (function () {
    /**
     * Private
     */
    function ReflectiveInjector_(_providers, _parent) {
        /**
         * \@internal
         */
        this._constructionCounter = 0;
        this._providers = _providers;
        this.parent = _parent || null;
        var /** @type {?} */ len = _providers.length;
        this.keyIds = new Array(len);
        this.objs = new Array(len);
        for (var /** @type {?} */ i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
        }
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    };
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndCreateChild = /**
     * @param {?} providers
     * @return {?}
     */
    function (providers) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.createChildFromResolved = /**
     * @param {?} providers
     * @return {?}
     */
    function (providers) {
        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
        (/** @type {?} */ (inj)).parent = this;
        return inj;
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndInstantiate = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.instantiateResolved = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this._instantiateProvider(provider);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveInjector_.prototype.getProviderAtIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this._providers.length) {
            throw outOfBoundsError(index);
        }
        return this._providers[index];
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._new = /**
     * \@internal
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
            throw cyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    };
    /**
     * @return {?}
     */
    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**
     * @return {?}
     */
    function () { return this.objs.length; };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiateProvider = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        if (provider.multiProvider) {
            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    };
    /**
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiate = /**
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */
    function (provider, ResolvedReflectiveFactory$$1) {
        var _this = this;
        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
        var /** @type {?} */ deps;
        try {
            deps =
                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
        }
        catch (/** @type {?} */ e) {
            if (e.addKey) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var /** @type {?} */ obj;
        try {
            obj = factory.apply(void 0, deps);
        }
        catch (/** @type {?} */ e) {
            throw instantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    /**
     * @param {?} dep
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByReflectiveDependency = /**
     * @param {?} dep
     * @return {?}
     */
    function (dep) {
        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    /**
     * @param {?} key
     * @param {?} visibility
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKey = /**
     * @param {?} key
     * @param {?} visibility
     * @param {?} notFoundValue
     * @return {?}
     */
    function (key, visibility, notFoundValue) {
        if (key === ReflectiveInjector_.INJECTOR_KEY) {
            return this;
        }
        if (visibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
        }
        else {
            return this._getByKeyDefault(key, notFoundValue, visibility);
        }
    };
    /**
     * @param {?} keyId
     * @return {?}
     */
    ReflectiveInjector_.prototype._getObjByKeyId = /**
     * @param {?} keyId
     * @return {?}
     */
    function (keyId) {
        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
            if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this._new(this._providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._throwOrNull = /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    function (key, notFoundValue) {
        if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
        }
        else {
            throw noProviderError(this, key);
        }
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeySelf = /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    function (key, notFoundValue) {
        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} visibility
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeyDefault = /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} visibility
     * @return {?}
     */
    function (key, notFoundValue, visibility) {
        var /** @type {?} */ inj;
        if (visibility instanceof SkipSelf) {
            inj = this.parent;
        }
        else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            var /** @type {?} */ inj_ = /** @type {?} */ (inj);
            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
                return obj;
            inj = inj_.parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        }
        else {
            return this._throwOrNull(key, notFoundValue);
        }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                .join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReflectiveInjector_.prototype.toString = /**
     * @return {?}
     */
    function () { return this.displayName; };
    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);
    return ReflectiveInjector_;
}());
/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */
function _mapProviders(injector, fn) {
    var /** @type {?} */ res = new Array(injector._providers.length);
    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
    }
    return res;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine if the argument is shaped like a Promise
 * @param {?} obj
 * @return {?}
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is an Observable
 * @param {?} obj
 * @return {?}
 */
function isObservable(obj) {
    // TODO: use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
    return !!obj && typeof obj.subscribe === 'function';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A function that will be executed when an application is initialized.
 * \@experimental
 */
var APP_INITIALIZER = new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
 *
 * \@experimental
 */
var ApplicationInitStatus = /** @class */ (function () {
    function ApplicationInitStatus(appInits) {
        var _this = this;
        this.appInits = appInits;
        this.initialized = false;
        this.done = false;
        this.donePromise = new Promise(function (res, rej) {
            _this.resolve = res;
            _this.reject = rej;
        });
    }
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    ApplicationInitStatus.prototype.runInitializers = /**
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.initialized) {
            return;
        }
        var /** @type {?} */ asyncInitPromises = [];
        var /** @type {?} */ complete = function () {
            (/** @type {?} */ (_this)).done = true;
            _this.resolve();
        };
        if (this.appInits) {
            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {
                var /** @type {?} */ initResult = this.appInits[i]();
                if (isPromise(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });
        if (asyncInitPromises.length === 0) {
            complete();
        }
        this.initialized = true;
    };
    ApplicationInitStatus.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ApplicationInitStatus.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
    ]; };
    return ApplicationInitStatus;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
 * using this token.
 * \@experimental
 */
var APP_ID = new InjectionToken('AppId');
/**
 * @return {?}
 */
function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * \@experimental
 */
var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: /** @type {?} */ ([]),
};
/**
 * @return {?}
 */
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * \@experimental
 */
var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform id.
 * \@experimental
 */
var PLATFORM_ID = new InjectionToken('Platform ID');
/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * \@experimental
 */
var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
/**
 * A token which indicates the root directory of the application
 * \@experimental
 */
var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Console = /** @class */ (function () {
    function Console() {
    }
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.log = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        // tslint:disable-next-line:no-console
        console.log(message);
    };
    // Note: for reporting errors use `DOM.logError()` as it is platform specific
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.warn = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        // tslint:disable-next-line:no-console
        console.warn(message);
    };
    Console.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Console.ctorParameters = function () { return []; };
    return Console;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Combination of NgModuleFactory and ComponentFactorys.
 *
 * \@experimental
 * @template T
 */
var ModuleWithComponentFactories = /** @class */ (function () {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
}());
/**
 * @return {?}
 */
function _throwError() {
    throw new Error("Runtime compiler is not loaded");
}
/**
 * Low-level service for running the angular compiler during runtime
 * to create {\@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `\@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 * \@stable
 */
var Compiler = /** @class */ (function () {
    function Compiler() {
    }
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     */
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleSync = /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    function (moduleType) { throw _throwError(); };
    /**
     * Compiles the given NgModule and all of its components
     */
    /**
     * Compiles the given NgModule and all of its components
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAsync = /**
     * Compiles the given NgModule and all of its components
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    function (moduleType) { throw _throwError(); };
    /**
     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
     */
    /**
     * Same as {\@link #compileModuleSync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsSync = /**
     * Same as {\@link #compileModuleSync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    function (moduleType) {
        throw _throwError();
    };
    /**
     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
     */
    /**
     * Same as {\@link #compileModuleAsync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsAsync = /**
     * Same as {\@link #compileModuleAsync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    function (moduleType) {
        throw _throwError();
    };
    /**
     * Clears all caches.
     */
    /**
     * Clears all caches.
     * @return {?}
     */
    Compiler.prototype.clearCache = /**
     * Clears all caches.
     * @return {?}
     */
    function () { };
    /**
     * Clears the cache for the given component/ngModule.
     */
    /**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */
    Compiler.prototype.clearCacheFor = /**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */
    function (type) { };
    Compiler.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Compiler.ctorParameters = function () { return []; };
    return Compiler;
}());
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * \@experimental
 */
var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * \@experimental
 * @abstract
 */
var CompilerFactory = /** @class */ (function () {
    function CompilerFactory() {
    }
    return CompilerFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of a Component created via a {\@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
 * method.
 * \@stable
 * @abstract
 * @template C
 */
var ComponentRef = /** @class */ (function () {
    function ComponentRef() {
    }
    return ComponentRef;
}());
/**
 * \@stable
 * @abstract
 * @template C
 */
var ComponentFactory = /** @class */ (function () {
    function ComponentFactory() {
    }
    return ComponentFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} component
 * @return {?}
 */
function noComponentFactoryError(component) {
    var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;
    return error;
}
var ERROR_COMPONENT = 'ngComponent';
/**
 * @param {?} error
 * @return {?}
 */

var _NullComponentFactoryResolver = /** @class */ (function () {
    function _NullComponentFactoryResolver() {
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    function (component) {
        throw noComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
}());
/**
 * \@stable
 * @abstract
 */
var ComponentFactoryResolver = /** @class */ (function () {
    function ComponentFactoryResolver() {
    }
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
}());
var CodegenComponentFactoryResolver = /** @class */ (function () {
    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
        this._parent = _parent;
        this._ngModule = _ngModule;
        this._factories = new Map();
        for (var /** @type {?} */ i = 0; i < factories.length; i++) {
            var /** @type {?} */ factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    function (component) {
        var /** @type {?} */ factory = this._factories.get(component);
        if (!factory && this._parent) {
            factory = this._parent.resolveComponentFactory(component);
        }
        if (!factory) {
            throw noComponentFactoryError(component);
        }
        return new ComponentFactoryBoundToModule(factory, this._ngModule);
    };
    return CodegenComponentFactoryResolver;
}());
/**
 * @template C
 */
var ComponentFactoryBoundToModule = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(ComponentFactoryBoundToModule, _super);
    function ComponentFactoryBoundToModule(factory, ngModule) {
        var _this = _super.call(this) || this;
        _this.factory = factory;
        _this.ngModule = ngModule;
        _this.selector = factory.selector;
        _this.componentType = factory.componentType;
        _this.ngContentSelectors = factory.ngContentSelectors;
        _this.inputs = factory.inputs;
        _this.outputs = factory.outputs;
        return _this;
    }
    /**
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    ComponentFactoryBoundToModule.prototype.create = /**
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
    };
    return ComponentFactoryBoundToModule;
}(ComponentFactory));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
 *
 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
 * NgModule Instance.
 *
 * \@stable
 * @abstract
 * @template T
 */
var NgModuleRef = /** @class */ (function () {
    function NgModuleRef() {
    }
    return NgModuleRef;
}());
/**
 * @record
 * @template T
 */

/**
 * \@experimental
 * @abstract
 * @template T
 */
var NgModuleFactory = /** @class */ (function () {
    function NgModuleFactory() {
    }
    return NgModuleFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A scope function for the Web Tracing Framework (WTF).
 *
 * \@experimental
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

var trace;
var events;
/**
 * @return {?}
 */
function detectWTF() {
    var /** @type {?} */ wtf = (/** @type {?} */ (_global /** TODO #9100 */) /** TODO #9100 */)['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
/**
 * @param {?} signature
 * @param {?=} flags
 * @return {?}
 */
function createScope(signature, flags) {
    if (flags === void 0) { flags = null; }
    return events.createScope(signature, flags);
}
/**
 * @template T
 * @param {?} scope
 * @param {?=} returnValue
 * @return {?}
 */
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
/**
 * @param {?} rangeType
 * @param {?} action
 * @return {?}
 */
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
/**
 * @param {?} range
 * @return {?}
 */
function endTimeRange(range) {
    trace.endTimeRange(range);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * True if WTF is enabled.
 */
var wtfEnabled = detectWTF();
/**
 * @param {?=} arg0
 * @param {?=} arg1
 * @return {?}
 */
function noopScope(arg0, arg1) {
    return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * \@experimental
 */
var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * \@experimental
 */
var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * \@experimental
 */
var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * \@experimental
 */
var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   \@Output() open: EventEmitter<any> = new EventEmitter();
 *   \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * \@stable
 * @template T
 */
var EventEmitter = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(EventEmitter, _super);
    /**
     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,
     * delivers events synchronously or asynchronously.
     *
     * @param isAsync By default, events are delivered synchronously (default value: `false`).
     * Set to `true` for asynchronous event delivery.
     */
    function EventEmitter(isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        var _this = _super.call(this) || this;
        _this.__isAsync = isAsync;
        return _this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    EventEmitter.prototype.emit = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) { _super.prototype.next.call(this, value); };
    /**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    EventEmitter.prototype.subscribe = /**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    function (generatorOrNext, error, complete) {
        var /** @type {?} */ schedulerFn;
        var /** @type {?} */ errorFn = function (err) { return null; };
        var /** @type {?} */ completeFn = function () { return null; };
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () { return generatorOrNext.next(value); });
            } : function (value) { generatorOrNext.next(value); };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                    function (err) { generatorOrNext.error(err); };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                    function () { generatorOrNext.complete(); };
            }
        }
        else {
            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                function (value) { generatorOrNext(value); };
            if (error) {
                errorFn =
                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
            }
        }
        var /** @type {?} */ sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        if (generatorOrNext instanceof __WEBPACK_IMPORTED_MODULE_5_rxjs_Subscription__["Subscription"]) {
            generatorOrNext.add(sink);
        }
        return sink;
    };
    return EventEmitter;
}(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__["Subject"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {\@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {\@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '\@angular/core';
 * import {NgIf} from '\@angular/common';
 *
 * \@Component({
 *   selector: 'ng-zone-demo',
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *         // reenter the Angular zone and display done
 *         this._ngZone.run(() => { console.log('Outside Done!'); });
 *       });
 *     });
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * \@experimental
 */
var NgZone = /** @class */ (function () {
    function NgZone(_a) {
        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
        this.hasPendingMicrotasks = false;
        this.hasPendingMacrotasks = false;
        /**
         * Whether there are no outstanding microtasks or macrotasks.
         */
        this.isStable = true;
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         */
        this.onUnstable = new EventEmitter(false);
        /**
         * Notifies when there is no more microtasks enqueued in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         */
        this.onMicrotaskEmpty = new EventEmitter(false);
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         */
        this.onStable = new EventEmitter(false);
        /**
         * Notifies that an error has been delivered.
         */
        this.onError = new EventEmitter(false);
        if (typeof Zone == 'undefined') {
            throw new Error("In this configuration Angular requires Zone.js");
        }
        Zone.assertZonePatched();
        var /** @type {?} */ self = /** @type {?} */ ((this));
        self._nesting = 0;
        self._outer = self._inner = Zone.current;
        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {
            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);
        }
        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {
            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);
        }
        forkInnerZoneWithAngularBehavior(self);
    }
    /**
     * @return {?}
     */
    NgZone.isInAngularZone = /**
     * @return {?}
     */
    function () { return Zone.current.get('isAngularZone') === true; };
    /**
     * @return {?}
     */
    NgZone.assertInAngularZone = /**
     * @return {?}
     */
    function () {
        if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
        }
    };
    /**
     * @return {?}
     */
    NgZone.assertNotInAngularZone = /**
     * @return {?}
     */
    function () {
        if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
        }
    };
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     */
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    NgZone.prototype.run = /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    function (fn, applyThis, applyArgs) {
        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));
    };
    /**
     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
     * returned by the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     */
    /**
     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
     * returned by the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @param {?=} name
     * @return {?}
     */
    NgZone.prototype.runTask = /**
     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
     * returned by the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @param {?=} name
     * @return {?}
     */
    function (fn, applyThis, applyArgs, name) {
        var /** @type {?} */ zone = (/** @type {?} */ ((this)))._inner;
        var /** @type {?} */ task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);
        try {
            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));
        }
        finally {
            zone.cancelTask(task);
        }
    };
    /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     */
    /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    NgZone.prototype.runGuarded = /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    function (fn, applyThis, applyArgs) {
        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));
    };
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
     */
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {\@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {\@link #run} to reenter the Angular zone and do work that updates the application model.
     * @template T
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.runOutsideAngular = /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {\@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {\@link #run} to reenter the Angular zone and do work that updates the application model.
     * @template T
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));
    };
    return NgZone;
}());
/**
 * @return {?}
 */
function noop() { }
var EMPTY_PAYLOAD = {};
/**
 * @param {?} zone
 * @return {?}
 */
function checkStable(zone) {
    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
        try {
            zone._nesting++;
            zone.onMicrotaskEmpty.emit(null);
        }
        finally {
            zone._nesting--;
            if (!zone.hasPendingMicrotasks) {
                try {
                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });
                }
                finally {
                    zone.isStable = true;
                }
            }
        }
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function forkInnerZoneWithAngularBehavior(zone) {
    zone._inner = zone._inner.fork({
        name: 'angular',
        properties: /** @type {?} */ ({ 'isAngularZone': true }),
        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
            try {
                onEnter(zone);
                return delegate.invokeTask(target, task, applyThis, applyArgs);
            }
            finally {
                onLeave(zone);
            }
        },
        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
            try {
                onEnter(zone);
                return delegate.invoke(target, callback, applyThis, applyArgs, source);
            }
            finally {
                onLeave(zone);
            }
        },
        onHasTask: function (delegate, current, target, hasTaskState) {
            delegate.hasTask(target, hasTaskState);
            if (current === target) {
                // We are only interested in hasTask events which originate from our zone
                // (A child hasTask event is not interesting to us)
                if (hasTaskState.change == 'microTask') {
                    zone.hasPendingMicrotasks = hasTaskState.microTask;
                    checkStable(zone);
                }
                else if (hasTaskState.change == 'macroTask') {
                    zone.hasPendingMacrotasks = hasTaskState.macroTask;
                }
            }
        },
        onHandleError: function (delegate, current, target, error) {
            delegate.handleError(target, error);
            zone.runOutsideAngular(function () { return zone.onError.emit(error); });
            return false;
        }
    });
}
/**
 * @param {?} zone
 * @return {?}
 */
function onEnter(zone) {
    zone._nesting++;
    if (zone.isStable) {
        zone.isStable = false;
        zone.onUnstable.emit(null);
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function onLeave(zone) {
    zone._nesting--;
    checkStable(zone);
}
/**
 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
 * to framework to perform rendering.
 */
var NoopNgZone = /** @class */ (function () {
    function NoopNgZone() {
        this.hasPendingMicrotasks = false;
        this.hasPendingMacrotasks = false;
        this.isStable = true;
        this.onUnstable = new EventEmitter();
        this.onMicrotaskEmpty = new EventEmitter();
        this.onStable = new EventEmitter();
        this.onError = new EventEmitter();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopNgZone.prototype.run = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { return fn(); };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopNgZone.prototype.runGuarded = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { return fn(); };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopNgZone.prototype.runOutsideAngular = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { return fn(); };
    /**
     * @template T
     * @param {?} fn
     * @return {?}
     */
    NoopNgZone.prototype.runTask = /**
     * @template T
     * @param {?} fn
     * @return {?}
     */
    function (fn) { return fn(); };
    return NoopNgZone;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 * \@experimental
 */
var Testability = /** @class */ (function () {
    function Testability(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * \@internal
         */
        this._pendingCount = 0;
        /**
         * \@internal
         */
        this._isZoneStable = true;
        /**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * \@internal
         */
        this._didWork = false;
        /**
         * \@internal
         */
        this._callbacks = [];
        this._watchAngularEvents();
    }
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    Testability.prototype._watchAngularEvents = /**
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.onUnstable.subscribe({
            next: function () {
                _this._didWork = true;
                _this._isZoneStable = false;
            }
        });
        this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.subscribe({
                next: function () {
                    NgZone.assertNotInAngularZone();
                    scheduleMicroTask(function () {
                        _this._isZoneStable = true;
                        _this._runCallbacksIfReady();
                    });
                }
            });
        });
    };
    /**
     * Increases the number of pending request
     */
    /**
     * Increases the number of pending request
     * @return {?}
     */
    Testability.prototype.increasePendingRequestCount = /**
     * Increases the number of pending request
     * @return {?}
     */
    function () {
        this._pendingCount += 1;
        this._didWork = true;
        return this._pendingCount;
    };
    /**
     * Decreases the number of pending request
     */
    /**
     * Decreases the number of pending request
     * @return {?}
     */
    Testability.prototype.decreasePendingRequestCount = /**
     * Decreases the number of pending request
     * @return {?}
     */
    function () {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    };
    /**
     * Whether an associated application is stable
     */
    /**
     * Whether an associated application is stable
     * @return {?}
     */
    Testability.prototype.isStable = /**
     * Whether an associated application is stable
     * @return {?}
     */
    function () {
        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    Testability.prototype._runCallbacksIfReady = /**
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isStable()) {
            // Schedules the call backs in a new frame so that it is always async.
            scheduleMicroTask(function () {
                while (_this._callbacks.length !== 0) {
                    (/** @type {?} */ ((_this._callbacks.pop())))(_this._didWork);
                }
                _this._didWork = false;
            });
        }
        else {
            // Not Ready
            this._didWork = true;
        }
    };
    /**
     * Run callback when the application is stable
     * @param callback function to be called after the application is stable
     */
    /**
     * Run callback when the application is stable
     * @param {?} callback function to be called after the application is stable
     * @return {?}
     */
    Testability.prototype.whenStable = /**
     * Run callback when the application is stable
     * @param {?} callback function to be called after the application is stable
     * @return {?}
     */
    function (callback) {
        this._callbacks.push(callback);
        this._runCallbacksIfReady();
    };
    /**
     * Get the number of pending requests
     */
    /**
     * Get the number of pending requests
     * @return {?}
     */
    Testability.prototype.getPendingRequestCount = /**
     * Get the number of pending requests
     * @return {?}
     */
    function () { return this._pendingCount; };
    /**
     * Find providers by name
     * @param using The root element to search from
     * @param provider The name of binding variable
     * @param exactMatch Whether using exactMatch
     */
    /**
     * Find providers by name
     * @param {?} using The root element to search from
     * @param {?} provider The name of binding variable
     * @param {?} exactMatch Whether using exactMatch
     * @return {?}
     */
    Testability.prototype.findProviders = /**
     * Find providers by name
     * @param {?} using The root element to search from
     * @param {?} provider The name of binding variable
     * @param {?} exactMatch Whether using exactMatch
     * @return {?}
     */
    function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    Testability.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Testability.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    return Testability;
}());
/**
 * A global registry of {\@link Testability} instances for specific elements.
 * \@experimental
 */
var TestabilityRegistry = /** @class */ (function () {
    function TestabilityRegistry() {
        /**
         * \@internal
         */
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    /**
     * Registers an application with a testability hook so that it can be tracked
     * @param token token of application, root element
     * @param testability Testability hook
     */
    /**
     * Registers an application with a testability hook so that it can be tracked
     * @param {?} token token of application, root element
     * @param {?} testability Testability hook
     * @return {?}
     */
    TestabilityRegistry.prototype.registerApplication = /**
     * Registers an application with a testability hook so that it can be tracked
     * @param {?} token token of application, root element
     * @param {?} testability Testability hook
     * @return {?}
     */
    function (token, testability) {
        this._applications.set(token, testability);
    };
    /**
     * Unregisters an application.
     * @param token token of application, root element
     */
    /**
     * Unregisters an application.
     * @param {?} token token of application, root element
     * @return {?}
     */
    TestabilityRegistry.prototype.unregisterApplication = /**
     * Unregisters an application.
     * @param {?} token token of application, root element
     * @return {?}
     */
    function (token) { this._applications.delete(token); };
    /**
     * Unregisters all applications
     */
    /**
     * Unregisters all applications
     * @return {?}
     */
    TestabilityRegistry.prototype.unregisterAllApplications = /**
     * Unregisters all applications
     * @return {?}
     */
    function () { this._applications.clear(); };
    /**
     * Get a testability hook associated with the application
     * @param elem root element
     */
    /**
     * Get a testability hook associated with the application
     * @param {?} elem root element
     * @return {?}
     */
    TestabilityRegistry.prototype.getTestability = /**
     * Get a testability hook associated with the application
     * @param {?} elem root element
     * @return {?}
     */
    function (elem) { return this._applications.get(elem) || null; };
    /**
     * Get all registered testabilities
     */
    /**
     * Get all registered testabilities
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllTestabilities = /**
     * Get all registered testabilities
     * @return {?}
     */
    function () { return Array.from(this._applications.values()); };
    /**
     * Get all registered applications(root elements)
     */
    /**
     * Get all registered applications(root elements)
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllRootElements = /**
     * Get all registered applications(root elements)
     * @return {?}
     */
    function () { return Array.from(this._applications.keys()); };
    /**
     * Find testability of a node in the Tree
     * @param elem node
     * @param findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     */
    /**
     * Find testability of a node in the Tree
     * @param {?} elem node
     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     * @return {?}
     */
    TestabilityRegistry.prototype.findTestabilityInTree = /**
     * Find testability of a node in the Tree
     * @param {?} elem node
     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     * @return {?}
     */
    function (elem, findInAncestors) {
        if (findInAncestors === void 0) { findInAncestors = true; }
        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TestabilityRegistry.ctorParameters = function () { return []; };
    return TestabilityRegistry;
}());
/**
 * Adapter interface for retrieving the `Testability` service associated for a
 * particular context.
 *
 * \@experimental Testability apis are primarily intended to be used by e2e test tool vendors like
 * the Protractor team.
 * @record
 */

var _NoopGetTestability = /** @class */ (function () {
    function _NoopGetTestability() {
    }
    /**
     * @param {?} registry
     * @return {?}
     */
    _NoopGetTestability.prototype.addToWindow = /**
     * @param {?} registry
     * @return {?}
     */
    function (registry) { };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    _NoopGetTestability.prototype.findTestabilityInTree = /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    function (registry, elem, findInAncestors) {
        return null;
    };
    return _NoopGetTestability;
}());
/**
 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
 * \@experimental
 * @param {?} getter
 * @return {?}
 */
function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _devMode = true;
var _runModeLocked = false;
var _platform;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * \@stable
 * @return {?}
 */
function enableProdMode() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function isDevMode() {
    _runModeLocked = true;
    return _devMode;
}
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * \@experimental
 */
var NgProbeToken = /** @class */ (function () {
    function NgProbeToken(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken;
}());
/**
 * Creates a platform.
 * Platforms have to be eagerly created via this function.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} injector
 * @return {?}
 */
function createPlatform(injector) {
    if (_platform && !_platform.destroyed &&
        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits)
        inits.forEach(function (init) { return init(); });
    return _platform;
}
/**
 * Creates a factory for a platform
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */
function createPlatformFactory(parentPlatformFactory, name, providers) {
    if (providers === void 0) { providers = []; }
    var /** @type {?} */ desc = "Platform: " + name;
    var /** @type {?} */ marker = new InjectionToken(desc);
    return function (extraProviders) {
        if (extraProviders === void 0) { extraProviders = []; }
        var /** @type {?} */ platform = getPlatform();
        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            }
            else {
                var /** @type {?} */ injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });
                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));
            }
        }
        return assertPlatform(marker);
    };
}
/**
 * Checks that there currently is a platform which contains the given token as a provider.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} requiredToken
 * @return {?}
 */
function assertPlatform(requiredToken) {
    var /** @type {?} */ platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
/**
 * Destroy the existing platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
        _platform.destroy();
    }
}
/**
 * Returns the current platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
/**
 * Provides additional options to the bootstraping process.
 *
 * \@stable
 * @record
 */

/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when a platform is created via a platform factory
 * (e.g. {\@link platformBrowser}), or explicitly by calling the {\@link createPlatform} function.
 *
 * \@stable
 */
var PlatformRef = /** @class */ (function () {
    /** @internal */
    function PlatformRef(_injector) {
        this._injector = _injector;
        this._modules = [];
        this._destroyListeners = [];
        this._destroyed = false;
    }
    /**
     * Creates an instance of an `@NgModule` for the given platform
     * for offline compilation.
     *
     * ## Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * @NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    /**
     * Creates an instance of an `\@NgModule` for the given platform
     * for offline compilation.
     *
     * ## Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '\@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @template M
     * @param {?} moduleFactory
     * @param {?=} options
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModuleFactory = /**
     * Creates an instance of an `\@NgModule` for the given platform
     * for offline compilation.
     *
     * ## Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '\@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @template M
     * @param {?} moduleFactory
     * @param {?=} options
     * @return {?}
     */
    function (moduleFactory, options) {
        var _this = this;
        // Note: We need to create the NgZone _before_ we instantiate the module,
        // as instantiating the module creates some providers eagerly.
        // So we create a mini parent injector that just contains the new NgZone and
        // pass that as parent to the NgModuleFactory.
        var /** @type {?} */ ngZoneOption = options ? options.ngZone : undefined;
        var /** @type {?} */ ngZone = getNgZone(ngZoneOption);
        var /** @type {?} */ providers = [{ provide: NgZone, useValue: ngZone }];
        // Attention: Don't use ApplicationRef.run here,
        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
        return ngZone.run(function () {
            var /** @type {?} */ ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });
            var /** @type {?} */ moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));
            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */
            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });
            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {
                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then(function () {
                    _this._moduleDoBootstrap(moduleRef);
                    return moduleRef;
                });
            });
        });
    };
    /**
     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
     *
     * ## Simple Example
     *
     * ```typescript
     * @NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     * @stable
     */
    /**
     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
     *
     * ## Simple Example
     *
     * ```typescript
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     * \@stable
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModule = /**
     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
     *
     * ## Simple Example
     *
     * ```typescript
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     * \@stable
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    function (moduleType, compilerOptions) {
        var _this = this;
        if (compilerOptions === void 0) { compilerOptions = []; }
        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
        var /** @type {?} */ options = optionsReducer({}, compilerOptions);
        var /** @type {?} */ compiler = compilerFactory.createCompiler([options]);
        return compiler.compileModuleAsync(moduleType)
            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });
    };
    /**
     * @param {?} moduleRef
     * @return {?}
     */
    PlatformRef.prototype._moduleDoBootstrap = /**
     * @param {?} moduleRef
     * @return {?}
     */
    function (moduleRef) {
        var /** @type {?} */ appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));
        if (moduleRef._bootstrapComponents.length > 0) {
            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });
        }
        else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
        }
        else {
            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
                "Please define one of these.");
        }
        this._modules.push(moduleRef);
    };
    /**
     * Register a listener to be called when the platform is disposed.
     */
    /**
     * Register a listener to be called when the platform is disposed.
     * @param {?} callback
     * @return {?}
     */
    PlatformRef.prototype.onDestroy = /**
     * Register a listener to be called when the platform is disposed.
     * @param {?} callback
     * @return {?}
     */
    function (callback) { this._destroyListeners.push(callback); };
    Object.defineProperty(PlatformRef.prototype, "injector", {
        /**
         * Retrieve the platform {@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         */
        get: /**
         * Retrieve the platform {\@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         * @return {?}
         */
        function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    /**
     * Destroy the Angular platform and all Angular applications on the page.
     */
    /**
     * Destroy the Angular platform and all Angular applications on the page.
     * @return {?}
     */
    PlatformRef.prototype.destroy = /**
     * Destroy the Angular platform and all Angular applications on the page.
     * @return {?}
     */
    function () {
        if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
        }
        this._modules.slice().forEach(function (module) { return module.destroy(); });
        this._destroyListeners.forEach(function (listener) { return listener(); });
        this._destroyed = true;
    };
    Object.defineProperty(PlatformRef.prototype, "destroyed", {
        get: /**
         * @return {?}
         */
        function () { return this._destroyed; },
        enumerable: true,
        configurable: true
    });
    PlatformRef.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PlatformRef.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return PlatformRef;
}());
/**
 * @param {?=} ngZoneOption
 * @return {?}
 */
function getNgZone(ngZoneOption) {
    var /** @type {?} */ ngZone;
    if (ngZoneOption === 'noop') {
        ngZone = new NoopNgZone();
    }
    else {
        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||
            new NgZone({ enableLongStackTrace: isDevMode() });
    }
    return ngZone;
}
/**
 * @param {?} errorHandler
 * @param {?} ngZone
 * @param {?} callback
 * @return {?}
 */
function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
    try {
        var /** @type {?} */ result = callback();
        if (isPromise(result)) {
            return result.catch(function (e) {
                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
                // rethrow as the exception handler might not do it
                throw e;
            });
        }
        return result;
    }
    catch (/** @type {?} */ e) {
        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
        // rethrow as the exception handler might not do it
        throw e;
    }
}
/**
 * @template T
 * @param {?} dst
 * @param {?} objs
 * @return {?}
 */
function optionsReducer(dst, objs) {
    if (Array.isArray(objs)) {
        dst = objs.reduce(optionsReducer, dst);
    }
    else {
        dst = Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __assign */])({}, dst, (/** @type {?} */ (objs)));
    }
    return dst;
}
/**
 * A reference to an Angular application running on a page.
 *
 * \@stable
 */
var ApplicationRef = /** @class */ (function () {
    /** @internal */
    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
        var _this = this;
        this._zone = _zone;
        this._console = _console;
        this._injector = _injector;
        this._exceptionHandler = _exceptionHandler;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._initStatus = _initStatus;
        this._bootstrapListeners = [];
        this._views = [];
        this._runningTick = false;
        this._enforceNoNewChanges = false;
        this._stable = true;
        /**
         * Get a list of component types registered to this application.
         * This list is populated even before the component is created.
         */
        this.componentTypes = [];
        /**
         * Get a list of components registered to this application.
         */
        this.components = [];
        this._enforceNoNewChanges = isDevMode();
        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
        var /** @type {?} */ isCurrentlyStable = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (observer) {
            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
                !_this._zone.hasPendingMicrotasks;
            _this._zone.runOutsideAngular(function () {
                observer.next(_this._stable);
                observer.complete();
            });
        });
        var /** @type {?} */ isStable = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (observer) {
            // Create the subscription to onStable outside the Angular Zone so that
            // the callback is run outside the Angular Zone.
            var /** @type {?} */ stableSub;
            _this._zone.runOutsideAngular(function () {
                stableSub = _this._zone.onStable.subscribe(function () {
                    NgZone.assertNotInAngularZone();
                    // Check whether there are no pending macro/micro tasks in the next tick
                    // to allow for NgZone to update the state.
                    scheduleMicroTask(function () {
                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
                            !_this._zone.hasPendingMicrotasks) {
                            _this._stable = true;
                            observer.next(true);
                        }
                    });
                });
            });
            var /** @type {?} */ unstableSub = _this._zone.onUnstable.subscribe(function () {
                NgZone.assertInAngularZone();
                if (_this._stable) {
                    _this._stable = false;
                    _this._zone.runOutsideAngular(function () { observer.next(false); });
                }
            });
            return function () {
                stableSub.unsubscribe();
                unstableSub.unsubscribe();
            };
        });
        (/** @type {?} */ (this)).isStable =
            Object(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_merge__["merge"])(isCurrentlyStable, __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_share__["share"].call(isStable));
    }
    /**
     * Bootstrap a new component at the root level of the application.
     *
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the [componentType]'s
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * [componentType]'s selector.
     *
     * ### Example
     * {@example core/ts/platform/platform.ts region='longform'}
     */
    /**
     * Bootstrap a new component at the root level of the application.
     *
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the [componentType]'s
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * [componentType]'s selector.
     *
     * ### Example
     * {\@example core/ts/platform/platform.ts region='longform'}
     * @template C
     * @param {?} componentOrFactory
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    ApplicationRef.prototype.bootstrap = /**
     * Bootstrap a new component at the root level of the application.
     *
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the [componentType]'s
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * [componentType]'s selector.
     *
     * ### Example
     * {\@example core/ts/platform/platform.ts region='longform'}
     * @template C
     * @param {?} componentOrFactory
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    function (componentOrFactory, rootSelectorOrNode) {
        var _this = this;
        if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
        }
        var /** @type {?} */ componentFactory;
        if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
        }
        else {
            componentFactory =
                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
        }
        this.componentTypes.push(componentFactory.componentType);
        // Create a factory associated with the current module if it's not bound to some other
        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
            null :
            this._injector.get(NgModuleRef);
        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;
        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
        if (testability) {
            compRef.injector.get(TestabilityRegistry)
                .registerApplication(compRef.location.nativeElement, testability);
        }
        this._loadComponent(compRef);
        if (isDevMode()) {
            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
        }
        return compRef;
    };
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     */
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     * @return {?}
     */
    ApplicationRef.prototype.tick = /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
        }
        var /** @type {?} */ scope = ApplicationRef._tickScope();
        try {
            this._runningTick = true;
            this._views.forEach(function (view) { return view.detectChanges(); });
            if (this._enforceNoNewChanges) {
                this._views.forEach(function (view) { return view.checkNoChanges(); });
            }
        }
        catch (/** @type {?} */ e) {
            // Attention: Don't rethrow as it could cancel subscriptions to Observables!
            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });
        }
        finally {
            this._runningTick = false;
            wtfLeave(scope);
        }
    };
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     */
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef.prototype.attachView = /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     * @param {?} viewRef
     * @return {?}
     */
    function (viewRef) {
        var /** @type {?} */ view = (/** @type {?} */ (viewRef));
        this._views.push(view);
        view.attachToAppRef(this);
    };
    /**
     * Detaches a view from dirty checking again.
     */
    /**
     * Detaches a view from dirty checking again.
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef.prototype.detachView = /**
     * Detaches a view from dirty checking again.
     * @param {?} viewRef
     * @return {?}
     */
    function (viewRef) {
        var /** @type {?} */ view = (/** @type {?} */ (viewRef));
        remove(this._views, view);
        view.detachFromAppRef();
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef.prototype._loadComponent = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.attachView(componentRef.hostView);
        this.tick();
        this.components.push(componentRef);
        // Get the listeners lazily to prevent DI cycles.
        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
        listeners.forEach(function (listener) { return listener(componentRef); });
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef.prototype._unloadComponent = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.detachView(componentRef.hostView);
        remove(this.components, componentRef);
    };
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    ApplicationRef.prototype.ngOnDestroy = /**
     * \@internal
     * @return {?}
     */
    function () {
        // TODO(alxhub): Dispose of the NgZone.
        this._views.slice().forEach(function (view) { return view.destroy(); });
    };
    Object.defineProperty(ApplicationRef.prototype, "viewCount", {
        /**
         * Returns the number of attached views.
         */
        get: /**
         * Returns the number of attached views.
         * @return {?}
         */
        function () { return this._views.length; },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     */
    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ApplicationRef.ctorParameters = function () { return [
        { type: NgZone, },
        { type: Console, },
        { type: Injector, },
        { type: ErrorHandler, },
        { type: ComponentFactoryResolver, },
        { type: ApplicationInitStatus, },
    ]; };
    return ApplicationRef;
}());
/**
 * @template T
 * @param {?} list
 * @param {?} el
 * @return {?}
 */
function remove(list, el) {
    var /** @type {?} */ index = list.indexOf(el);
    if (index > -1) {
        list.splice(index, 1);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
 */
var RenderComponentType = /** @class */ (function () {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
        this.id = id;
        this.templateUrl = templateUrl;
        this.slotCount = slotCount;
        this.encapsulation = encapsulation;
        this.styles = styles;
        this.animations = animations;
    }
    return RenderComponentType;
}());
/**
 * @deprecated Debug info is handeled internally in the view engine now.
 * @abstract
 */
var RenderDebugInfo = /** @class */ (function () {
    function RenderDebugInfo() {
    }
    return RenderDebugInfo;
}());
/**
 * @deprecated Use the `Renderer2` instead.
 * @record
 */

/**
 * @deprecated Use the `Renderer2` instead.
 * @abstract
 */
var Renderer = /** @class */ (function () {
    function Renderer() {
    }
    return Renderer;
}());
var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {\@link Renderer#setElementProperty setElementProperty} or
 * {\@link Renderer#setElementAttribute setElementAttribute} respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 *
 * @deprecated Use `RendererFactory2` instead.
 * @abstract
 */
var RootRenderer = /** @class */ (function () {
    function RootRenderer() {
    }
    return RootRenderer;
}());
/**
 * \@experimental
 * @record
 */

/**
 * \@experimental
 * @abstract
 */
var RendererFactory2 = /** @class */ (function () {
    function RendererFactory2() {
    }
    return RendererFactory2;
}());
/** @enum {number} */
var RendererStyleFlags2 = {
    Important: 1,
    DashCase: 2,
};
RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
/**
 * \@experimental
 * @abstract
 */
var Renderer2 = /** @class */ (function () {
    function Renderer2() {
    }
    return Renderer2;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 *
 * \@security Permitting direct access to the DOM can make your application more vulnerable to
 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
 * [Security Guide](http://g.co/ng/security).
 *
 * \@stable
 */
var ElementRef = /** @class */ (function () {
    function ElementRef(nativeElement) {
        this.nativeElement = nativeElement;
    }
    return ElementRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Used to load ng module factories.
 * \@stable
 * @abstract
 */
var NgModuleFactoryLoader = /** @class */ (function () {
    function NgModuleFactoryLoader() {
    }
    return NgModuleFactoryLoader;
}());
var moduleFactories = new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * \@experimental
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */
function registerModuleFactory(id, factory) {
    var /** @type {?} */ existing = moduleFactories.get(id);
    if (existing) {
        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
}
/**
 * @return {?}
 */

/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * \@experimental
 * @param {?} id
 * @return {?}
 */
function getModuleFactory(id) {
    var /** @type {?} */ factory = moduleFactories.get(id);
    if (!factory)
        throw new Error("No module with ID " + id + " loaded");
    return factory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {\@link ViewChildren}, {\@link ContentChildren}, and {\@link QueryList}
 * provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```typescript
 * \@Component({...})
 * class Container {
 *   \@ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 * \@stable
 * @template T
 */
var QueryList = /** @class */ (function () {
    function QueryList() {
        this.dirty = true;
        this._results = [];
        this.changes = new EventEmitter();
        this.length = 0;
    }
    /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     */
    /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @template U
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.map = /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @template U
     * @param {?} fn
     * @return {?}
     */
    function (fn) { return this._results.map(fn); };
    /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     */
    /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.filter = /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return this._results.filter(fn);
    };
    /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     */
    /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.find = /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return this._results.find(fn);
    };
    /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     */
    /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    QueryList.prototype.reduce = /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    function (fn, init) {
        return this._results.reduce(fn, init);
    };
    /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     */
    /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.forEach = /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._results.forEach(fn); };
    /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     */
    /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.some = /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return this._results.some(fn);
    };
    /**
     * @return {?}
     */
    QueryList.prototype.toArray = /**
     * @return {?}
     */
    function () { return this._results.slice(); };
    /**
     * @return {?}
     */
    QueryList.prototype[getSymbolIterator()] = /**
     * @return {?}
     */
    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };
    /**
     * @return {?}
     */
    QueryList.prototype.toString = /**
     * @return {?}
     */
    function () { return this._results.toString(); };
    /**
     * @param {?} res
     * @return {?}
     */
    QueryList.prototype.reset = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        this._results = flatten(res);
        (/** @type {?} */ (this)).dirty = false;
        (/** @type {?} */ (this)).length = this._results.length;
        (/** @type {?} */ (this)).last = this._results[this.length - 1];
        (/** @type {?} */ (this)).first = this._results[0];
    };
    /**
     * @return {?}
     */
    QueryList.prototype.notifyOnChanges = /**
     * @return {?}
     */
    function () { (/** @type {?} */ (this.changes)).emit(this); };
    /** internal */
    /**
     * internal
     * @return {?}
     */
    QueryList.prototype.setDirty = /**
     * internal
     * @return {?}
     */
    function () { (/** @type {?} */ (this)).dirty = true; };
    /** internal */
    /**
     * internal
     * @return {?}
     */
    QueryList.prototype.destroy = /**
     * internal
     * @return {?}
     */
    function () {
        (/** @type {?} */ (this.changes)).complete();
        (/** @type {?} */ (this.changes)).unsubscribe();
    };
    return QueryList;
}());
/**
 * @template T
 * @param {?} list
 * @return {?}
 */
function flatten(list) {
    return list.reduce(function (flat, item) {
        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
        return (/** @type {?} */ (flat)).concat(flatItem);
    }, []);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _SEPARATOR = '#';
var FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * \@experimental
 * @abstract
 */
var SystemJsNgModuleLoaderConfig = /** @class */ (function () {
    function SystemJsNgModuleLoaderConfig() {
    }
    return SystemJsNgModuleLoaderConfig;
}());
var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory',
};
/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * \@experimental
 */
var SystemJsNgModuleLoader = /** @class */ (function () {
    function SystemJsNgModuleLoader(_compiler, config) {
        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.load = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadAndCompile = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        if (exportName === undefined) {
            exportName = 'default';
        }
        return __webpack_require__(37)(module)
            .then(function (module) { return module[exportName]; })
            .then(function (type) { return checkNotEmpty(type, module, exportName); })
            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadFactory = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
        if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
        }
        return __webpack_require__(37)(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
            .then(function (module) { return module[exportName + factoryClassSuffix]; })
            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
    };
    SystemJsNgModuleLoader.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SystemJsNgModuleLoader.ctorParameters = function () { return [
        { type: Compiler, },
        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
    ]; };
    return SystemJsNgModuleLoader;
}());
/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an Embedded Template that can be used to instantiate Embedded Views.
 *
 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
 *
 * To instantiate Embedded Views based on a Template, use {\@link ViewContainerRef#
 * createEmbeddedView}, which will create the View and attach it to the View Container.
 * \@stable
 * @abstract
 * @template C
 */
var TemplateRef = /** @class */ (function () {
    function TemplateRef() {
    }
    return TemplateRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
 * \@stable
 * @abstract
 */
var ViewContainerRef = /** @class */ (function () {
    function ViewContainerRef() {
    }
    return ViewContainerRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 * @abstract
 */
var ChangeDetectorRef = /** @class */ (function () {
    function ChangeDetectorRef() {
    }
    return ChangeDetectorRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 * @abstract
 */
var ViewRef = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(ViewRef, _super);
    function ViewRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ViewRef;
}(ChangeDetectorRef));
/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ### Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * We have two {\@link TemplateRef}s:
 *
 * Outer {\@link TemplateRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * Inner {\@link TemplateRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
 *
 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * \@experimental
 * @abstract
 * @template C
 */
var EmbeddedViewRef = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EmbeddedViewRef;
}(ViewRef));
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EventListener = /** @class */ (function () {
    function EventListener(name, callback) {
        this.name = name;
        this.callback = callback;
    }
    return EventListener;
}());
/**
 * \@experimental All debugging apis are currently experimental.
 */
var DebugNode = /** @class */ (function () {
    function DebugNode(nativeNode, parent, _debugContext) {
        this._debugContext = _debugContext;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
        }
        else {
            this.parent = null;
        }
        this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
        get: /**
         * @return {?}
         */
        function () { return this._debugContext.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
        get: /**
         * @return {?}
         */
        function () { return this._debugContext.component; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () { return this._debugContext.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
        get: /**
         * @return {?}
         */
        function () { return this._debugContext.references; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
        get: /**
         * @return {?}
         */
        function () { return this._debugContext.providerTokens; },
        enumerable: true,
        configurable: true
    });
    return DebugNode;
}());
/**
 * \@experimental All debugging apis are currently experimental.
 */
var DebugElement = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(DebugElement, _super);
    function DebugElement(nativeNode, parent, _debugContext) {
        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
        _this.properties = {};
        _this.attributes = {};
        _this.classes = {};
        _this.styles = {};
        _this.childNodes = [];
        _this.nativeElement = nativeNode;
        return _this;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.addChild = /**
     * @param {?} child
     * @return {?}
     */
    function (child) {
        if (child) {
            this.childNodes.push(child);
            child.parent = this;
        }
    };
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.removeChild = /**
     * @param {?} child
     * @return {?}
     */
    function (child) {
        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
        if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
        }
    };
    /**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */
    DebugElement.prototype.insertChildrenAfter = /**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */
    function (child, newChildren) {
        var _this = this;
        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
        if (siblingIndex !== -1) {
            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
            newChildren.forEach(function (c) {
                if (c.parent) {
                    c.parent.removeChild(c);
                }
                c.parent = _this;
            });
        }
        var _a;
    };
    /**
     * @param {?} refChild
     * @param {?} newChild
     * @return {?}
     */
    DebugElement.prototype.insertBefore = /**
     * @param {?} refChild
     * @param {?} newChild
     * @return {?}
     */
    function (refChild, newChild) {
        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
        if (refIndex === -1) {
            this.addChild(newChild);
        }
        else {
            if (newChild.parent) {
                newChild.parent.removeChild(newChild);
            }
            newChild.parent = this;
            this.childNodes.splice(refIndex, 0, newChild);
        }
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.query = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var /** @type {?} */ results = this.queryAll(predicate);
        return results[0] || null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAll = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var /** @type {?} */ matches = [];
        _queryElementChildren(this, predicate, matches);
        return matches;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAllNodes = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var /** @type {?} */ matches = [];
        _queryNodeChildren(this, predicate, matches);
        return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
        get: /**
         * @return {?}
         */
        function () {
            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    DebugElement.prototype.triggerEventHandler = /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    function (eventName, eventObj) {
        this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
                listener.callback(eventObj);
            }
        });
    };
    return DebugElement;
}(DebugNode));
/**
 * \@experimental
 * @param {?} debugEls
 * @return {?}
 */
function asNativeElements(debugEls) {
    return debugEls.map(function (el) { return el.nativeElement; });
}
/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    });
}
/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
        parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement) {
                _queryNodeChildren(node, predicate, matches);
            }
        });
    }
}
// Need to keep the nodes in a global Map so that multiple angular apps are supported.
var _nativeNodeToDebugNode = new Map();
/**
 * \@experimental
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode) || null;
}
/**
 * @return {?}
 */

/**
 * @param {?} node
 * @return {?}
 */
function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
/**
 * @param {?} node
 * @return {?}
 */
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}
/**
 * A boolean-valued function over a value, possibly including context information
 * regarding that value's position in an array.
 *
 * \@experimental All debugging apis are currently experimental.
 * @record
 * @template T
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function devModeEqual(a, b) {
    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
    if (isListLikeIterableA && isListLikeIterableB) {
        return areIterablesEqual(a, b, devModeEqual);
    }
    else {
        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
        }
        else {
            return looseIdentical(a, b);
        }
    }
}
/**
 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
 * reference has not changed.
 *
 * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
 * is stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 * \@stable
 */
var WrappedValue = /** @class */ (function () {
    function WrappedValue(value) {
        this.wrapped = value;
    }
    /** Creates a wrapped value. */
    /**
     * Creates a wrapped value.
     * @param {?} value
     * @return {?}
     */
    WrappedValue.wrap = /**
     * Creates a wrapped value.
     * @param {?} value
     * @return {?}
     */
    function (value) { return new WrappedValue(value); };
    /**
     * Returns the underlying value of a wrapped value.
     * Returns the given `value` when it is not wrapped.
     **/
    /**
     * Returns the underlying value of a wrapped value.
     * Returns the given `value` when it is not wrapped.
     *
     * @param {?} value
     * @return {?}
     */
    WrappedValue.unwrap = /**
     * Returns the underlying value of a wrapped value.
     * Returns the given `value` when it is not wrapped.
     *
     * @param {?} value
     * @return {?}
     */
    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };
    /** Returns true if `value` is a wrapped value. */
    /**
     * Returns true if `value` is a wrapped value.
     * @param {?} value
     * @return {?}
     */
    WrappedValue.isWrapped = /**
     * Returns true if `value` is a wrapped value.
     * @param {?} value
     * @return {?}
     */
    function (value) { return value instanceof WrappedValue; };
    return WrappedValue;
}());
/**
 * Represents a basic change from a previous to a new value.
 * \@stable
 */
var SimpleChange = /** @class */ (function () {
    function SimpleChange(previousValue, currentValue, firstChange) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
    }
    /**
     * Check whether the new value is the first value assigned.
     */
    /**
     * Check whether the new value is the first value assigned.
     * @return {?}
     */
    SimpleChange.prototype.isFirstChange = /**
     * Check whether the new value is the first value assigned.
     * @return {?}
     */
    function () { return this.firstChange; };
    return SimpleChange;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
            // JS Map are iterables but return entries as [k, v]
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */ item1 = iterator1.next();
        var /** @type {?} */ item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
        var /** @type {?} */ item = void 0;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultIterableDifferFactory = /** @class */ (function () {
    function DefaultIterableDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.supports = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) { return isListLikeIterable(obj); };
    /**
     * @template V
     * @param {?=} trackByFn
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.create = /**
     * @template V
     * @param {?=} trackByFn
     * @return {?}
     */
    function (trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
}());
var trackByIdentity = function (index, item) { return item; };
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 * @template V
 */
var DefaultIterableDiffer = /** @class */ (function () {
    function DefaultIterableDiffer(trackByFn) {
        this.length = 0;
        this._linkedRecords = null;
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = trackByFn || trackByIdentity;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachOperation = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ nextIt = this._itHead;
        var /** @type {?} */ nextRemove = this._removalsHead;
        var /** @type {?} */ addRemoveOffset = 0;
        var /** @type {?} */ moveOffsets = null;
        while (nextIt || nextRemove) {
            // Figure out which is the next record to process
            // Order: remove, add, move
            var /** @type {?} */ record = !nextRemove ||
                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */
                ((nextIt)) :
                nextRemove;
            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var /** @type {?} */ currentIndex = record.currentIndex;
            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
            if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
            }
            else {
                nextIt = /** @type {?} */ ((nextIt))._next;
                if (record.previousIndex == null) {
                    addRemoveOffset++;
                }
                else {
                    // INVARIANT:  currentIndex < previousIndex
                    if (!moveOffsets)
                        moveOffsets = [];
                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                    var /** @type {?} */ localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;
                    if (localMovePreviousIndex != localCurrentIndex) {
                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                            var /** @type {?} */ index = offset + i;
                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                moveOffsets[i] = offset + 1;
                            }
                        }
                        var /** @type {?} */ previousIndex = record.previousIndex;
                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                    }
                }
            }
            if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachPreviousItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachAddedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachMovedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachRemovedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachIdentityChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.diff = /**
     * @param {?} collection
     * @return {?}
     */
    function (collection) {
        if (collection == null)
            collection = [];
        if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    };
    /**
     * @return {?}
     */
    DefaultIterableDiffer.prototype.onDestroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.check = /**
     * @param {?} collection
     * @return {?}
     */
    function (collection) {
        var _this = this;
        this._reset();
        var /** @type {?} */ record = this._itHead;
        var /** @type {?} */ mayBeDirty = false;
        var /** @type {?} */ index;
        var /** @type {?} */ item;
        var /** @type {?} */ itemTrackBy;
        if (Array.isArray(collection)) {
            (/** @type {?} */ (this)).length = collection.length;
            for (var /** @type {?} */ index_1 = 0; index_1 < this.length; index_1++) {
                item = collection[index_1];
                itemTrackBy = this._trackByFn(index_1, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index_1);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            iterateListLike(collection, function (item) {
                itemTrackBy = _this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = _this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        _this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            });
            (/** @type {?} */ (this)).length = index;
        }
        this._truncate(record);
        (/** @type {?} */ (this)).collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
         * changes.
         */
        get: /**
         * @return {?}
         */
        function () {
            return this._additionsHead !== null || this._movesHead !== null ||
                this._removalsHead !== null || this._identityChangesHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * @internal
     */
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * \@internal
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reset = /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * \@internal
     * @return {?}
     */
    function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            var /** @type {?} */ nextRecord = void 0;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
            // TODO(vicb): when assert gets supported
            // assert(!this.isDirty);
        }
    };
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * @internal
     */
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._mismatch = /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    function (record, item, itemTrackBy, index) {
        // The previous record after which we will append the current one.
        var /** @type {?} */ previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        }
        else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                // It is a new item: add it.
                record =
                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    };
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * @internal
     */
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._verifyReinsertion = /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    function (record, item, itemTrackBy, index) {
        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    /**
     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {@link IterableChangeRecord_}.
     *
     * @internal
     */
    /**
     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {\@link IterableChangeRecord_}.
     *
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._truncate = /**
     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {\@link IterableChangeRecord_}.
     *
     * \@internal
     * @param {?} record
     * @return {?}
     */
    function (record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reinsertAfter = /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._moveAfter = /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addAfter = /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // TODO(vicb):
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        }
        else {
            // TODO(vicb):
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._insertAfter = /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    function (record, prevRecord, index) {
        // TODO(vicb):
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
        // TODO(vicb):
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._remove = /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._unlink = /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prev;
        var /** @type {?} */ next = record._next;
        // TODO(vicb):
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToMoves = /**
     * \@internal
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */
    function (record, toIndex) {
        // TODO(vicb):
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // TODO(vicb):
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        }
        else {
            // TODO(vicb):
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToRemovals = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // TODO(vicb):
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            // TODO(vicb):
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} record
     * @param {?} item
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addIdentityChange = /**
     * \@internal
     * @param {?} record
     * @param {?} item
     * @return {?}
     */
    function (record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        }
        else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    };
    return DefaultIterableDiffer;
}());
/**
 * \@stable
 * @template V
 */
var IterableChangeRecord_ = /** @class */ (function () {
    function IterableChangeRecord_(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prevDup = null;
        /**
         * \@internal
         */
        this._nextDup = null;
        /**
         * \@internal
         */
        this._prevRemoved = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextMoved = null;
        /**
         * \@internal
         */
        this._nextIdentityChange = null;
    }
    return IterableChangeRecord_;
}());
/**
 * @template V
 */
var _DuplicateItemRecordList = /** @class */ (function () {
    function _DuplicateItemRecordList() {
        /**
         * \@internal
         */
        this._head = null;
        /**
         * \@internal
         */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     */
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.add = /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */
    function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            /** @type {?} */ ((
            // TODO(vicb):
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail))._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
    // IterableChangeRecord_.currentIndex >= atOrAfterIndex
    /**
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.get = /**
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    function (trackById, atOrAfterIndex) {
        var /** @type {?} */ record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&
                looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove one {@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     */
    /**
     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.remove = /**
     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */
    function (record) {
        // TODO(vicb):
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        var /** @type {?} */ prev = record._prevDup;
        var /** @type {?} */ next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
}());
/**
 * @template V
 */
var _DuplicateMap = /** @class */ (function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    /**
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.put = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ duplicates = this.map.get(key);
        if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     */
    /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    _DuplicateMap.prototype.get = /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    function (trackById, atOrAfterIndex) {
        var /** @type {?} */ key = trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
    };
    /**
     * Removes a {@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     */
    /**
     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.remove = /**
     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */
    function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ recordList = /** @type {?} */ ((this.map.get(key)));
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        get: /**
         * @return {?}
         */
        function () { return this.map.size === 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    _DuplicateMap.prototype.clear = /**
     * @return {?}
     */
    function () { this.map.clear(); };
    return _DuplicateMap;
}());
/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var /** @type {?} */ previousIndex = item.previousIndex;
    if (previousIndex === null)
        return previousIndex;
    var /** @type {?} */ moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @template K, V
 */
var DefaultKeyValueDifferFactory = /** @class */ (function () {
    function DefaultKeyValueDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.supports = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) { return obj instanceof Map || isJsObject(obj); };
    /**
     * @template K, V
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.create = /**
     * @template K, V
     * @return {?}
     */
    function () { return new DefaultKeyValueDiffer(); };
    return DefaultKeyValueDifferFactory;
}());
/**
 * @template K, V
 */
var DefaultKeyValueDiffer = /** @class */ (function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._appendAfter = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        get: /**
         * @return {?}
         */
        function () {
            return this._additionsHead !== null || this._changesHead !== null ||
                this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?=} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.diff = /**
     * @param {?=} map
     * @return {?}
     */
    function (map) {
        if (!map) {
            map = new Map();
        }
        else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
        }
        return this.check(map) ? this : null;
    };
    /**
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.onDestroy = /**
     * @return {?}
     */
    function () { };
    /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     */
    /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     * @param {?} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.check = /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     * @param {?} map
     * @return {?}
     */
    function (map) {
        var _this = this;
        this._reset();
        var /** @type {?} */ insertBefore = this._mapHead;
        this._appendAfter = null;
        this._forEach(map, function (value, key) {
            if (insertBefore && insertBefore.key === key) {
                _this._maybeAddToChanges(insertBefore, value);
                _this._appendAfter = insertBefore;
                insertBefore = insertBefore._next;
            }
            else {
                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);
                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
            }
        });
        // Items remaining at the end of the list have been deleted
        if (insertBefore) {
            if (insertBefore._prev) {
                insertBefore._prev._next = null;
            }
            this._removalsHead = insertBefore;
            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {
                if (record === this._mapHead) {
                    this._mapHead = null;
                }
                this._records.delete(record.key);
                record._nextRemoved = record._next;
                record.previousValue = record.currentValue;
                record.currentValue = null;
                record._prev = null;
                record._next = null;
            }
        }
        // Make sure tails have no next records from previous runs
        if (this._changesTail)
            this._changesTail._nextChanged = null;
        if (this._additionsTail)
            this._additionsTail._nextAdded = null;
        return this.isDirty;
    };
    /**
     * Inserts a record before `before` or append at the end of the list when `before` is null.
     *
     * Notes:
     * - This method appends at `this._appendAfter`,
     * - This method updates `this._appendAfter`,
     * - The return value is the new value for the insertion pointer.
     * @param {?} before
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**
     * Inserts a record before `before` or append at the end of the list when `before` is null.
     *
     * Notes:
     * - This method appends at `this._appendAfter`,
     * - This method updates `this._appendAfter`,
     * - The return value is the new value for the insertion pointer.
     * @param {?} before
     * @param {?} record
     * @return {?}
     */
    function (before, record) {
        if (before) {
            var /** @type {?} */ prev = before._prev;
            record._next = before;
            record._prev = prev;
            before._prev = record;
            if (prev) {
                prev._next = record;
            }
            if (before === this._mapHead) {
                this._mapHead = record;
            }
            this._appendAfter = before;
            return before;
        }
        if (this._appendAfter) {
            this._appendAfter._next = record;
            record._prev = this._appendAfter;
        }
        else {
            this._mapHead = record;
        }
        this._appendAfter = record;
        return null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (this._records.has(key)) {
            var /** @type {?} */ record_1 = /** @type {?} */ ((this._records.get(key)));
            this._maybeAddToChanges(record_1, value);
            var /** @type {?} */ prev = record_1._prev;
            var /** @type {?} */ next = record_1._next;
            if (prev) {
                prev._next = next;
            }
            if (next) {
                next._prev = prev;
            }
            record_1._next = null;
            record_1._prev = null;
            return record_1;
        }
        var /** @type {?} */ record = new KeyValueChangeRecord_(key);
        this._records.set(key, record);
        record.currentValue = value;
        this._addToAdditions(record);
        return record;
    };
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._reset = /**
     * \@internal
     * @return {?}
     */
    function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            // let `_previousMapHead` contain the state of the map before the changes
            this._previousMapHead = this._mapHead;
            for (record = this._previousMapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            // Update `record.previousValue` with the value of the item before the changes
            // We need to update all changed items (that's those which have been added and changed)
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = null;
        }
    };
    /**
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */
    function (record, newValue) {
        if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToAdditions = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            /** @type {?} */ ((this._additionsTail))._nextAdded = record;
            this._additionsTail = record;
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToChanges = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            /** @type {?} */ ((this._changesTail))._nextChanged = record;
            this._changesTail = record;
        }
    };
    /**
     * \@internal
     * @template K, V
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._forEach = /**
     * \@internal
     * @template K, V
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    function (obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
        }
    };
    return DefaultKeyValueDiffer;
}());
/**
 * \@stable
 * @template K, V
 */
var KeyValueChangeRecord_ = /** @class */ (function () {
    function KeyValueChangeRecord_(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextChanged = null;
    }
    return KeyValueChangeRecord_;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A strategy for tracking changes over time to an iterable. Used by {\@link NgForOf} to
 * respond to changes in an iterable by effecting equivalent changes in the DOM.
 *
 * \@stable
 * @record
 * @template V
 */

/**
 * An object describing the changes in the `Iterable` collection since last time
 * `IterableDiffer#diff()` was invoked.
 *
 * \@stable
 * @record
 * @template V
 */

/**
 * Record representing the item change information.
 *
 * \@stable
 * @record
 * @template V
 */

/**
 * @deprecated v4.0.0 - Use IterableChangeRecord instead.
 * @record
 * @template V
 */

/**
 * An optional function passed into {\@link NgForOf} that defines how to track
 * items in an iterable (e.g. fby index or id)
 *
 * \@stable
 * @record
 * @template T
 */

/**
 * Provides a factory for {\@link IterableDiffer}.
 *
 * \@stable
 * @record
 */

/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 * \@stable
 */
var IterableDiffers = /** @class */ (function () {
    function IterableDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    IterableDiffers.create = /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    function (factories, parent) {
        if (parent != null) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
        }
        else {
            return new IterableDiffers(factories);
        }
    };
    /**
     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {@link IterableDiffers} instance with the provided factories and return a new
     * {@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     */
    /**
     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
     * {\@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */
    IterableDiffers.extend = /**
     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
     * {\@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */
    function (factories) {
        return {
            provide: IterableDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} iterable
     * @return {?}
     */
    IterableDiffers.prototype.find = /**
     * @param {?} iterable
     * @return {?}
     */
    function (iterable) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
        if (factory != null) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }
    };
    return IterableDiffers;
}());
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A differ that tracks changes made to an object over time.
 *
 * \@stable
 * @record
 * @template K, V
 */

/**
 * An object describing the changes in the `Map` or `{[k:string]: string}` since last time
 * `KeyValueDiffer#diff()` was invoked.
 *
 * \@stable
 * @record
 * @template K, V
 */

/**
 * Record representing the item change information.
 *
 * \@stable
 * @record
 * @template K, V
 */

/**
 * Provides a factory for {\@link KeyValueDiffer}.
 *
 * \@stable
 * @record
 */

/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 * \@stable
 */
var KeyValueDiffers = /** @class */ (function () {
    function KeyValueDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @template S
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    KeyValueDiffers.create = /**
     * @template S
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    function (factories, parent) {
        if (parent) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
        }
        return new KeyValueDiffers(factories);
    };
    /**
     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
     * {@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     */
    /**
     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
     * {\@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     * @template S
     * @param {?} factories
     * @return {?}
     */
    KeyValueDiffers.extend = /**
     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
     * {\@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     * @template S
     * @param {?} factories
     * @return {?}
     */
    function (factories) {
        return {
            provide: KeyValueDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} kv
     * @return {?}
     */
    KeyValueDiffers.prototype.find = /**
     * @param {?} kv
     * @return {?}
     */
    function (kv) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
        if (factory) {
            return factory;
        }
        throw new Error("Cannot find a differ supporting object '" + kv + "'");
    };
    return KeyValueDiffers;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Structural diffing for `Object`s and `Map`s.
 */
var keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _CORE_PLATFORM_PROVIDERS = [
    // Set a default platform name for platforms that don't set it explicitly.
    { provide: PLATFORM_ID, useValue: 'unknown' },
    { provide: PlatformRef, deps: [Injector] },
    { provide: TestabilityRegistry, deps: [] },
    { provide: Console, deps: [] },
];
/**
 * This platform has to be included in any other platform
 *
 * \@experimental
 */
var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provide this token to set the locale of your application.
 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
 * DecimalPipe and PercentPipe) and by ICU expressions.
 *
 * See the {\@linkDocs guide/i18n#setting-up-locale i18n guide} for more information.
 *
 * ### Example
 *
 * ```typescript
 * import { LOCALE_ID } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
 * });
 * ```
 *
 * \@experimental i18n support is experimental.
 */
var LOCALE_ID = new InjectionToken('LocaleId');
/**
 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
 * `xlf` or `xlf2`) when you want to translate your application in another language.
 *
 * See the {\@linkDocs guide/i18n#merge i18n guide} for more information.
 *
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * // content of your translation file
 * const translations = '....';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
 * });
 * ```
 *
 * \@experimental i18n support is experimental.
 */
var TRANSLATIONS = new InjectionToken('Translations');
/**
 * Provide this token at bootstrap to set the format of your {\@link TRANSLATIONS}: `xtb`,
 * `xlf` or `xlf2`.
 *
 * See the {\@linkDocs guide/i18n#merge i18n guide} for more information.
 *
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS_FORMAT } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
 * });
 * ```
 *
 * \@experimental i18n support is experimental.
 */
var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
/** @enum {number} */
var MissingTranslationStrategy = {
    Error: 0,
    Warning: 1,
    Ignore: 2,
};
MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
/**
 * @return {?}
 */
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
/**
 * @param {?=} locale
 * @return {?}
 */
function _localeFactory(locale) {
    return locale || 'en-US';
}
/**
 * This module includes the providers of \@angular/core that are needed
 * to bootstrap components via `ApplicationRef`.
 *
 * \@experimental
 */
var ApplicationModule = /** @class */ (function () {
    // Inject ApplicationRef to make it eager...
    function ApplicationModule(appRef) {
    }
    ApplicationModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ApplicationRef,
                        ApplicationInitStatus,
                        Compiler,
                        APP_ID_RANDOM_PROVIDER,
                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                        {
                            provide: LOCALE_ID,
                            useFactory: _localeFactory,
                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                        },
                    ]
                },] },
    ];
    /** @nocollapse */
    ApplicationModule.ctorParameters = function () { return [
        { type: ApplicationRef, },
    ]; };
    return ApplicationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var SecurityContext = {
    NONE: 0,
    HTML: 1,
    STYLE: 2,
    SCRIPT: 3,
    URL: 4,
    RESOURCE_URL: 5,
};
SecurityContext[SecurityContext.NONE] = "NONE";
SecurityContext[SecurityContext.HTML] = "HTML";
SecurityContext[SecurityContext.STYLE] = "STYLE";
SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
SecurityContext[SecurityContext.URL] = "URL";
SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * \@stable
 * @abstract
 */
var Sanitizer = /** @class */ (function () {
    function Sanitizer() {
    }
    return Sanitizer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// unsupported: template constraints.
/**
 * Factory for ViewDefinitions/NgModuleDefinitions.
 * We use a function so we can reexeute it in case an error happens and use the given logger
 * function to log the error from the definition of the node, which is shown in all browser
 * logs.
 * @record
 * @template D
 */

/**
 * Function to call console.error at the right source location. This is an indirection
 * via another function as browser will log the location that actually called
 * `console.error`.
 * @record
 */

// unsupported: template constraints.
/**
 * @record
 * @template DF
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * A node definition in the view.
 *
 * Note: We use one type for all nodes so that loops that loop over all nodes
 * of a ViewDefinition stay monomorphic!
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * View instance data.
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */

/**
 * @param {?} view
 * @param {?} priorInitState
 * @param {?} newInitState
 * @return {?}
 */
function shiftInitState(view, priorInitState, newInitState) {
    // Only update the InitState if we are currently in the prior state.
    // For example, only move into CallingInit if we are in BeforeInit. Only
    // move into CallingContentInit if we are in CallingInit. Normally this will
    // always be true because of how checkCycle is called in checkAndUpdateView.
    // However, if checkAndUpdateView is called recursively or if an exception is
    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
    // from the beginning. This ensures the state is monotonically increasing,
    // terminating in the AfterInit state, which ensures the Init methods are called
    // at least once and only once.
    var /** @type {?} */ state = view.state;
    var /** @type {?} */ initState = state & 1792;
    if (initState === priorInitState) {
        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;
        view.initIndex = -1;
        return true;
    }
    return initState === newInitState;
}
/**
 * @param {?} view
 * @param {?} initState
 * @param {?} index
 * @return {?}
 */
function shouldCallLifecycleInitHook(view, initState, index) {
    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {
        view.initIndex = index + 1;
        return true;
    }
    return false;
}
/**
 * @record
 */

/**
 * Data for an instantiated NodeType.Text.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */

/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asTextData(view, index) {
    return /** @type {?} */ (view.nodes[index]);
}
/**
 * Data for an instantiated NodeType.Element.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asElementData(view, index) {
    return /** @type {?} */ (view.nodes[index]);
}
/**
 * Data for an instantiated NodeType.Provider.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */

/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asProviderData(view, index) {
    return /** @type {?} */ (view.nodes[index]);
}
/**
 * Data for an instantiated NodeType.PureExpression.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */

/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asPureExpressionData(view, index) {
    return /** @type {?} */ (view.nodes[index]);
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asQueryList(view, index) {
    return /** @type {?} */ (view.nodes[index]);
}
/**
 * @record
 */

/**
 * @abstract
 */
var DebugContext = /** @class */ (function () {
    function DebugContext() {
    }
    return DebugContext;
}());
/**
 * @record
 */

/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 */
var Services = {
    setCurrentNode: /** @type {?} */ ((undefined)),
    createRootView: /** @type {?} */ ((undefined)),
    createEmbeddedView: /** @type {?} */ ((undefined)),
    createComponentView: /** @type {?} */ ((undefined)),
    createNgModuleRef: /** @type {?} */ ((undefined)),
    overrideProvider: /** @type {?} */ ((undefined)),
    overrideComponentView: /** @type {?} */ ((undefined)),
    clearOverrides: /** @type {?} */ ((undefined)),
    checkAndUpdateView: /** @type {?} */ ((undefined)),
    checkNoChangesView: /** @type {?} */ ((undefined)),
    destroyView: /** @type {?} */ ((undefined)),
    resolveDep: /** @type {?} */ ((undefined)),
    createDebugContext: /** @type {?} */ ((undefined)),
    handleEvent: /** @type {?} */ ((undefined)),
    updateDirectives: /** @type {?} */ ((undefined)),
    updateRenderer: /** @type {?} */ ((undefined)),
    dirtyParentQueries: /** @type {?} */ ((undefined)),
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} context
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */
function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
    var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
    if (isFirstCheck) {
        msg +=
            " It seems like the view has been created after its parent and its children have been dirty checked." +
                " Has it been created in a change detection hook ?";
    }
    return viewDebugError(msg, context);
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function viewWrappedDebugError(err, context) {
    if (!(err instanceof Error)) {
        // errors that are not Error instances don't have a stack,
        // so it is ok to wrap them into a new Error object...
        err = new Error(err.toString());
    }
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} msg
 * @param {?} context
 * @return {?}
 */
function viewDebugError(msg, context) {
    var /** @type {?} */ err = new Error(msg);
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function _addDebugContext(err, context) {
    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;
    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);
}
/**
 * @param {?} err
 * @return {?}
 */
function isViewDebugError(err) {
    return !!getDebugContext(err);
}
/**
 * @param {?} action
 * @return {?}
 */
function viewDestroyedError(action) {
    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NOOP = function () { };
var _tokenKeyCache = new Map();
/**
 * @param {?} token
 * @return {?}
 */
function tokenKey(token) {
    var /** @type {?} */ key = _tokenKeyCache.get(token);
    if (!key) {
        key = stringify(token) + '_' + _tokenKeyCache.size;
        _tokenKeyCache.set(token, key);
    }
    return key;
}
/**
 * @param {?} view
 * @param {?} nodeIdx
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function unwrapValue(view, nodeIdx, bindingIdx, value) {
    if (WrappedValue.isWrapped(value)) {
        value = WrappedValue.unwrap(value);
        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
    }
    return value;
}
var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
var EMPTY_RENDERER_TYPE_ID = '$$empty';
/**
 * @param {?} values
 * @return {?}
 */
function createRendererType2(values) {
    return {
        id: UNDEFINED_RENDERER_TYPE_ID,
        styles: values.styles,
        encapsulation: values.encapsulation,
        data: values.data
    };
}
var _renderCompCount = 0;
/**
 * @param {?=} type
 * @return {?}
 */
function resolveRendererType2(type) {
    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
        // first time we see this RendererType2. Initialize it...
        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
            type.styles.length || Object.keys(type.data).length);
        if (isFilled) {
            type.id = "c" + _renderCompCount++;
        }
        else {
            type.id = EMPTY_RENDERER_TYPE_ID;
        }
    }
    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
        type = null;
    }
    return type || null;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBinding(view, def, bindingIdx, value) {
    var /** @type {?} */ oldValues = view.oldValues;
    if ((view.state & 2 /* FirstCheck */) ||
        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateBinding(view, def, bindingIdx, value) {
    if (checkBinding(view, def, bindingIdx, value)) {
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBindingNoChanges(view, def, bindingIdx, value) {
    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {
        var /** @type {?} */ bindingName = def.bindings[bindingIdx].name;
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + ": " + oldValue, bindingName + ": " + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markParentViewsForCheck(view) {
    var /** @type {?} */ currView = view;
    while (currView) {
        if (currView.def.flags & 2 /* OnPush */) {
            currView.state |= 8 /* ChecksEnabled */;
        }
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} endView
 * @return {?}
 */
function markParentViewsForCheckProjectedViews(view, endView) {
    var /** @type {?} */ currView = view;
    while (currView && currView !== endView) {
        currView.state |= 64 /* CheckProjectedViews */;
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function dispatchEvent(view, nodeIndex, eventName, event) {
    try {
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ?
            asElementData(view, nodeIndex).componentView :
            view;
        markParentViewsForCheck(startView);
        return Services.handleEvent(view, nodeIndex, eventName, event);
    }
    catch (/** @type {?} */ e) {
        // Attention: Don't rethrow, as it would cancel Observable subscriptions!
        view.root.errorHandler.handleError(e);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function declaredViewContainer(view) {
    if (view.parent) {
        var /** @type {?} */ parentView = view.parent;
        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);
    }
    return null;
}
/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 * @param {?} view
 * @return {?}
 */
function viewParentEl(view) {
    var /** @type {?} */ parentView = view.parent;
    if (parentView) {
        return /** @type {?} */ ((view.parentNodeDef)).parent;
    }
    else {
        return null;
    }
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function renderNode(view, def) {
    switch (def.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return asElementData(view, def.nodeIndex).renderElement;
        case 2 /* TypeText */:
            return asTextData(view, def.nodeIndex).renderText;
    }
}
/**
 * @param {?} target
 * @param {?} name
 * @return {?}
 */
function elementEventFullName(target, name) {
    return target ? target + ":" + name : name;
}
/**
 * @param {?} view
 * @return {?}
 */
function isComponentView(view) {
    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} view
 * @return {?}
 */
function isEmbeddedView(view) {
    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} queryId
 * @return {?}
 */
function filterQueryId(queryId) {
    return 1 << (queryId % 32);
}
/**
 * @param {?} matchedQueriesDsl
 * @return {?}
 */
function splitMatchedQueriesDsl(matchedQueriesDsl) {
    var /** @type {?} */ matchedQueries = {};
    var /** @type {?} */ matchedQueryIds = 0;
    var /** @type {?} */ references = {};
    if (matchedQueriesDsl) {
        matchedQueriesDsl.forEach(function (_a) {
            var queryId = _a[0], valueType = _a[1];
            if (typeof queryId === 'number') {
                matchedQueries[queryId] = valueType;
                matchedQueryIds |= filterQueryId(queryId);
            }
            else {
                references[queryId] = valueType;
            }
        });
    }
    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
}
/**
 * @param {?} deps
 * @param {?=} sourceName
 * @return {?}
 */
function splitDepsDsl(deps, sourceName) {
    return deps.map(function (value) {
        var /** @type {?} */ token;
        var /** @type {?} */ flags;
        if (Array.isArray(value)) {
            flags = value[0], token = value[1];
        }
        else {
            flags = 0 /* None */;
            token = value;
        }
        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });
        }
        return { flags: flags, token: token, tokenKey: tokenKey(token) };
    });
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function getParentRenderElement(view, renderHost, def) {
    var /** @type {?} */ renderParent = def.renderParent;
    if (renderParent) {
        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;
        }
    }
    else {
        return renderHost;
    }
}
var DEFINITION_CACHE = new WeakMap();
/**
 * @template D
 * @param {?} factory
 * @return {?}
 */
function resolveDefinition(factory) {
    var /** @type {?} */ value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));
    if (!value) {
        value = factory(function () { return NOOP; });
        value.factory = factory;
        DEFINITION_CACHE.set(factory, value);
    }
    return value;
}
/**
 * @param {?} view
 * @return {?}
 */
function rootRenderNodes(view) {
    var /** @type {?} */ renderNodes = [];
    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
    return renderNodes;
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
    // We need to re-compute the parent node in case the nodes have been moved around manually
    if (action === 3 /* RemoveChild */) {
        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));
    }
    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} ngContentIndex
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
    var /** @type {?} */ compView = view;
    while (compView && !isComponentView(compView)) {
        compView = compView.parent;
    }
    var /** @type {?} */ hostView = /** @type {?} */ ((compView)).parent;
    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));
    var /** @type {?} */ startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;
    var /** @type {?} */ endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];
        if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
    if (!/** @type {?} */ ((hostView)).parent) {
        // a root view
        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
        if (projectedNodes) {
            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
    if (nodeDef.flags & 8 /* TypeNgContent */) {
        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
    }
    else {
        var /** @type {?} */ rn = renderNode(view, nodeDef);
        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
            // Note: we might need to do both actions.
            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }
            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
                var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;
                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
            }
        }
        else {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
        }
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;
            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
            }
        }
        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {
            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
        }
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
    var /** @type {?} */ renderer = view.renderer;
    switch (action) {
        case 1 /* AppendChild */:
            renderer.appendChild(parentNode, renderNode);
            break;
        case 2 /* InsertBefore */:
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;
        case 3 /* RemoveChild */:
            renderer.removeChild(parentNode, renderNode);
            break;
        case 0 /* Collect */:
            /** @type {?} */ ((target)).push(renderNode);
            break;
    }
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
/**
 * @param {?} name
 * @return {?}
 */
function splitNamespace(name) {
    if (name[0] === ':') {
        var /** @type {?} */ match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));
        return [match[1], match[2]];
    }
    return ['', name];
}
/**
 * @param {?} bindings
 * @return {?}
 */
function calcBindingFlags(bindings) {
    var /** @type {?} */ flags = 0;
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        flags |= bindings[i].flags;
    }
    return flags;
}
/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */
function interpolate(valueCount, constAndInterp) {
    var /** @type {?} */ result = '';
    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error("Does not support more than 9 expressions");
    }
}
/**
 * @param {?} v
 * @return {?}
 */
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?=} handleEvent
 * @param {?=} templateFactory
 * @return {?}
 */
function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
    flags |= 1 /* TypeElement */;
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        checkIndex: -1,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: {
            ns: null,
            name: null,
            attrs: null, template: template,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?} namespaceAndName
 * @param {?=} fixedAttrs
 * @param {?=} bindings
 * @param {?=} outputs
 * @param {?=} handleEvent
 * @param {?=} componentView
 * @param {?=} componentRendererType
 * @return {?}
 */
function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
    if (fixedAttrs === void 0) { fixedAttrs = []; }
    if (!handleEvent) {
        handleEvent = NOOP;
    }
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    var /** @type {?} */ ns = /** @type {?} */ ((null));
    var /** @type {?} */ name = /** @type {?} */ ((null));
    if (namespaceAndName) {
        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
    }
    bindings = bindings || [];
    var /** @type {?} */ bindingDefs = new Array(bindings.length);
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
        var /** @type {?} */ securityContext = /** @type {?} */ ((undefined));
        var /** @type {?} */ suffix = /** @type {?} */ ((undefined));
        switch (bindingFlags & 15 /* Types */) {
            case 4 /* TypeElementStyle */:
                suffix = /** @type {?} */ (suffixOrSecurityContext);
                break;
            case 1 /* TypeElementAttribute */:
            case 8 /* TypeProperty */:
                securityContext = /** @type {?} */ (suffixOrSecurityContext);
                break;
        }
        bindingDefs[i] =
            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
    }
    outputs = outputs || [];
    var /** @type {?} */ outputDefs = new Array(outputs.length);
    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
        var _e = outputs[i], target = _e[0], eventName = _e[1];
        outputDefs[i] = {
            type: 0 /* ElementOutput */,
            target: /** @type {?} */ (target), eventName: eventName,
            propName: null
        };
    }
    fixedAttrs = fixedAttrs || [];
    var /** @type {?} */ attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {
        var namespaceAndName = _a[0], value = _a[1];
        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
        return [ns, name, value];
    }));
    componentRendererType = resolveRendererType2(componentRendererType);
    if (componentView) {
        flags |= 33554432 /* ComponentView */;
    }
    flags |= 1 /* TypeElement */;
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: bindingDefs,
        bindingFlags: calcBindingFlags(bindingDefs),
        outputs: outputDefs,
        element: {
            ns: ns,
            name: name,
            attrs: attrs,
            template: null,
            // will bet set by the view definition
            componentProvider: null,
            componentView: componentView || null,
            componentRendererType: componentRendererType,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP,
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
    var _b;
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createElement(view, renderHost, def) {
    var /** @type {?} */ elDef = /** @type {?} */ ((def.element));
    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
    var /** @type {?} */ renderer = view.renderer;
    var /** @type {?} */ el;
    if (view.parent || !rootSelectorOrNode) {
        if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
        }
        else {
            el = renderer.createComment('');
        }
        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, el);
        }
    }
    else {
        el = renderer.selectRootElement(rootSelectorOrNode);
    }
    if (elDef.attrs) {
        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];
            renderer.setAttribute(el, name_2, value, ns);
        }
    }
    return el;
}
/**
 * @param {?} view
 * @param {?} compView
 * @param {?} def
 * @param {?} el
 * @return {?}
 */
function listenToElementOutputs(view, compView, def, el) {
    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
        var /** @type {?} */ output = def.outputs[i];
        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
        var /** @type {?} */ listenTarget = output.target;
        var /** @type {?} */ listenerView = view;
        if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
        }
        var /** @type {?} */ disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */
        ((view.disposables))[def.outputIndex + i] = disposable;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function renderEventHandlerClosure(view, index, eventName) {
    return function (event) { return dispatchEvent(view, index, eventName, event); };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindLen = def.bindings.length;
    var /** @type {?} */ changed = false;
    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
        changed = true;
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateElementDynamic(view, def, values) {
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        if (checkAndUpdateElementValue(view, def, i, values[i]))
            changed = true;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateElementValue(view, def, bindingIdx, value) {
    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
        return false;
    }
    var /** @type {?} */ binding = def.bindings[bindingIdx];
    var /** @type {?} */ elData = asElementData(view, def.nodeIndex);
    var /** @type {?} */ renderNode$$1 = elData.renderElement;
    var /** @type {?} */ name = /** @type {?} */ ((binding.name));
    switch (binding.flags & 15 /* Types */) {
        case 1 /* TypeElementAttribute */:
            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
            break;
        case 2 /* TypeElementClass */:
            setElementClass(view, renderNode$$1, name, value);
            break;
        case 4 /* TypeElementStyle */:
            setElementStyle(view, binding, renderNode$$1, name, value);
            break;
        case 8 /* TypeProperty */:
            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&
                binding.flags & 32 /* SyntheticHostProperty */) ?
                elData.componentView :
                view;
            setElementProperty(bindView, binding, renderNode$$1, name, value);
            break;
    }
    return true;
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} ns
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
    var /** @type {?} */ securityContext = binding.securityContext;
    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    renderValue = renderValue != null ? renderValue.toString() : null;
    var /** @type {?} */ renderer = view.renderer;
    if (value != null) {
        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
    }
    else {
        renderer.removeAttribute(renderNode$$1, name, ns);
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementClass(view, renderNode$$1, name, value) {
    var /** @type {?} */ renderer = view.renderer;
    if (value) {
        renderer.addClass(renderNode$$1, name);
    }
    else {
        renderer.removeClass(renderNode$$1, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementStyle(view, binding, renderNode$$1, name, value) {
    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));
    if (renderValue != null) {
        renderValue = renderValue.toString();
        var /** @type {?} */ unit = binding.suffix;
        if (unit != null) {
            renderValue = renderValue + unit;
        }
    }
    else {
        renderValue = null;
    }
    var /** @type {?} */ renderer = view.renderer;
    if (renderValue != null) {
        renderer.setStyle(renderNode$$1, name, renderValue);
    }
    else {
        renderer.removeStyle(renderNode$$1, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementProperty(view, binding, renderNode$$1, name, value) {
    var /** @type {?} */ securityContext = binding.securityContext;
    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    view.renderer.setProperty(renderNode$$1, name, renderValue);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var UNDEFINED_VALUE = new Object();
var InjectorRefTokenKey$1 = tokenKey(Injector);
var NgModuleRefTokenKey = tokenKey(NgModuleRef);
/**
 * @param {?} flags
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function moduleProvideDef(flags, token, value, deps) {
    // Need to resolve forwardRefs as e.g. for `useValue` we
    // lowered the expression and then stopped evaluating it,
    // i.e. also didn't unwrap it.
    value = resolveForwardRef(value);
    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));
    return {
        // will bet set by the module definition
        index: -1,
        deps: depDefs, flags: flags, token: token, value: value
    };
}
/**
 * @param {?} providers
 * @return {?}
 */
function moduleDef(providers) {
    var /** @type {?} */ providersByKey = {};
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        provider.index = i;
        providersByKey[tokenKey(provider.token)] = provider;
    }
    return {
        // Will be filled later...
        factory: null,
        providersByKey: providersByKey,
        providers: providers
    };
}
/**
 * @param {?} data
 * @return {?}
 */
function initNgModule(data) {
    var /** @type {?} */ def = data._def;
    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);
    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
        var /** @type {?} */ provDef = def.providers[i];
        if (!(provDef.flags & 4096 /* LazyProvider */)) {
            providers[i] = _createProviderInstance$1(data, provDef);
        }
    }
}
/**
 * @param {?} data
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveNgModuleDep(data, depDef, notFoundValue) {
    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
    if (depDef.flags & 8 /* Value */) {
        return depDef.token;
    }
    if (depDef.flags & 2 /* Optional */) {
        notFoundValue = null;
    }
    if (depDef.flags & 1 /* SkipSelf */) {
        return data._parent.get(depDef.token, notFoundValue);
    }
    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
    switch (tokenKey$$1) {
        case InjectorRefTokenKey$1:
        case NgModuleRefTokenKey:
            return data;
    }
    var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];
    if (providerDef) {
        var /** @type {?} */ providerInstance = data._providers[providerDef.index];
        if (providerInstance === undefined) {
            providerInstance = data._providers[providerDef.index] =
                _createProviderInstance$1(data, providerDef);
        }
        return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
    }
    return data._parent.get(depDef.token, notFoundValue);
}
/**
 * @param {?} ngModule
 * @param {?} providerDef
 * @return {?}
 */
function _createProviderInstance$1(ngModule, providerDef) {
    var /** @type {?} */ injectable;
    switch (providerDef.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
            break;
        case 1024 /* TypeFactoryProvider */:
            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
            break;
        case 2048 /* TypeUseExistingProvider */:
            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
            break;
        case 256 /* TypeValueProvider */:
            injectable = providerDef.value;
            break;
    }
    return injectable === undefined ? UNDEFINED_VALUE : injectable;
}
/**
 * @param {?} ngModule
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function _createClass(ngModule, ctor, deps) {
    var /** @type {?} */ len = deps.length;
    switch (len) {
        case 0:
            return new ctor();
        case 1:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]));
        case 2:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
        case 3:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
        default:
            var /** @type {?} */ depValues = new Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
    }
}
/**
 * @param {?} ngModule
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function _callFactory(ngModule, factory, deps) {
    var /** @type {?} */ len = deps.length;
    switch (len) {
        case 0:
            return factory();
        case 1:
            return factory(resolveNgModuleDep(ngModule, deps[0]));
        case 2:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
        case 3:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
        default:
            var /** @type {?} */ depValues = Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            return factory.apply(void 0, depValues);
    }
}
/**
 * @param {?} ngModule
 * @param {?} lifecycles
 * @return {?}
 */
function callNgModuleLifecycle(ngModule, lifecycles) {
    var /** @type {?} */ def = ngModule._def;
    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
        var /** @type {?} */ provDef = def.providers[i];
        if (provDef.flags & 131072 /* OnDestroy */) {
            var /** @type {?} */ instance = ngModule._providers[i];
            if (instance && instance !== UNDEFINED_VALUE) {
                instance.ngOnDestroy();
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} parentView
 * @param {?} elementData
 * @param {?} viewIndex
 * @param {?} view
 * @return {?}
 */
function attachEmbeddedView(parentView, elementData, viewIndex, view) {
    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;
    if (viewIndex === null || viewIndex === undefined) {
        viewIndex = embeddedViews.length;
    }
    view.viewContainerParent = parentView;
    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);
    attachProjectedView(elementData, view);
    Services.dirtyParentQueries(view);
    var /** @type {?} */ prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
}
/**
 * @param {?} vcElementData
 * @param {?} view
 * @return {?}
 */
function attachProjectedView(vcElementData, view) {
    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
    if (!dvcElementData || dvcElementData === vcElementData ||
        view.state & 16 /* IsProjectedView */) {
        return;
    }
    // Note: For performance reasons, we
    // - add a view to template._projectedViews only 1x throughout its lifetime,
    //   and remove it not until the view is destroyed.
    //   (hard, as when a parent view is attached/detached we would need to attach/detach all
    //    nested projected views as well, even accross component boundaries).
    // - don't track the insertion order of views in the projected views array
    //   (hard, as when the views of the same template are inserted different view containers)
    view.state |= 16 /* IsProjectedView */;
    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
    if (!projectedViews) {
        projectedViews = dvcElementData.template._projectedViews = [];
    }
    projectedViews.push(view);
    // Note: we are changing the NodeDef here as we cannot calculate
    // the fact whether a template is used for projection during compilation.
    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));
}
/**
 * @param {?} viewDef
 * @param {?} nodeDef
 * @return {?}
 */
function markNodeAsProjectedTemplate(viewDef, nodeDef) {
    if (nodeDef.flags & 4 /* ProjectedTemplate */) {
        return;
    }
    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
    nodeDef.flags |= 4 /* ProjectedTemplate */;
    var /** @type {?} */ parentNodeDef = nodeDef.parent;
    while (parentNodeDef) {
        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
        parentNodeDef = parentNodeDef.parent;
    }
}
/**
 * @param {?} elementData
 * @param {?=} viewIndex
 * @return {?}
 */
function detachEmbeddedView(elementData, viewIndex) {
    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;
    if (viewIndex == null || viewIndex >= embeddedViews.length) {
        viewIndex = embeddedViews.length - 1;
    }
    if (viewIndex < 0) {
        return null;
    }
    var /** @type {?} */ view = embeddedViews[viewIndex];
    view.viewContainerParent = null;
    removeFromArray(embeddedViews, viewIndex);
    // See attachProjectedView for why we don't update projectedViews here.
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    return view;
}
/**
 * @param {?} view
 * @return {?}
 */
function detachProjectedView(view) {
    if (!(view.state & 16 /* IsProjectedView */)) {
        return;
    }
    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
    if (dvcElementData) {
        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
        if (projectedViews) {
            removeFromArray(projectedViews, projectedViews.indexOf(view));
            Services.dirtyParentQueries(view);
        }
    }
}
/**
 * @param {?} elementData
 * @param {?} oldViewIndex
 * @param {?} newViewIndex
 * @return {?}
 */
function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;
    var /** @type {?} */ view = embeddedViews[oldViewIndex];
    removeFromArray(embeddedViews, oldViewIndex);
    if (newViewIndex == null) {
        newViewIndex = embeddedViews.length;
    }
    addToArray(embeddedViews, newViewIndex, view);
    // Note: Don't need to change projectedViews as the order in there
    // as always invalid...
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
    return view;
}
/**
 * @param {?} elementData
 * @param {?} prevView
 * @param {?} view
 * @return {?}
 */
function renderAttachEmbeddedView(elementData, prevView, view) {
    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :
        elementData.renderElement;
    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
}
/**
 * @param {?} view
 * @return {?}
 */
function renderDetachView(view) {
    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
}
/**
 * @param {?} arr
 * @param {?} index
 * @param {?} value
 * @return {?}
 */
function addToArray(arr, index, value) {
    // perf: array.push is faster than array.splice!
    if (index >= arr.length) {
        arr.push(value);
    }
    else {
        arr.splice(index, 0, value);
    }
}
/**
 * @param {?} arr
 * @param {?} index
 * @return {?}
 */
function removeFromArray(arr, index) {
    // perf: array.pop is faster than array.splice!
    if (index >= arr.length - 1) {
        arr.pop();
    }
    else {
        arr.splice(index, 1);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EMPTY_CONTEXT = new Object();
/**
 * @param {?} selector
 * @param {?} componentType
 * @param {?} viewDefFactory
 * @param {?} inputs
 * @param {?} outputs
 * @param {?} ngContentSelectors
 * @return {?}
 */
function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
}
/**
 * @param {?} componentFactory
 * @return {?}
 */
function getComponentViewDefinitionFactory(componentFactory) {
    return (/** @type {?} */ (componentFactory)).viewDefFactory;
}
var ComponentFactory_ = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(ComponentFactory_, _super);
    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
        var _this = 
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _super.call(this) || this;
        _this.selector = selector;
        _this.componentType = componentType;
        _this._inputs = _inputs;
        _this._outputs = _outputs;
        _this.ngContentSelectors = ngContentSelectors;
        _this.viewDefFactory = viewDefFactory;
        return _this;
    }
    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ inputsArr = [];
            var /** @type {?} */ inputs = /** @type {?} */ ((this._inputs));
            for (var /** @type {?} */ propName in inputs) {
                var /** @type {?} */ templateName = inputs[propName];
                inputsArr.push({ propName: propName, templateName: templateName });
            }
            return inputsArr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ outputsArr = [];
            for (var /** @type {?} */ propName in this._outputs) {
                var /** @type {?} */ templateName = this._outputs[propName];
                outputsArr.push({ propName: propName, templateName: templateName });
            }
            return outputsArr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new component.
     */
    /**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    ComponentFactory_.prototype.create = /**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
        if (!ngModule) {
            throw new Error('ngModule should be provided');
        }
        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);
        var /** @type {?} */ componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;
        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
        if (rootSelectorOrNode) {
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
        }
        return new ComponentRef_(view, new ViewRef_(view), component);
    };
    return ComponentFactory_;
}(ComponentFactory));
var ComponentRef_ = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(ComponentRef_, _super);
    function ComponentRef_(_view, _viewRef, _component) {
        var _this = _super.call(this) || this;
        _this._view = _view;
        _this._viewRef = _viewRef;
        _this._component = _component;
        _this._elDef = _this._view.def.nodes[0];
        _this.hostView = _viewRef;
        _this.changeDetectorRef = _viewRef;
        _this.instance = _component;
        return _this;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
        get: /**
         * @return {?}
         */
        function () {
            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
        get: /**
         * @return {?}
         */
        function () { return new Injector_(this._view, this._elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
        get: /**
         * @return {?}
         */
        function () { return /** @type {?} */ (this._component.constructor); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComponentRef_.prototype.destroy = /**
     * @return {?}
     */
    function () { this._viewRef.destroy(); };
    /**
     * @param {?} callback
     * @return {?}
     */
    ComponentRef_.prototype.onDestroy = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) { this._viewRef.onDestroy(callback); };
    return ComponentRef_;
}(ComponentRef));
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} elData
 * @return {?}
 */
function createViewContainerData(view, elDef, elData) {
    return new ViewContainerRef_(view, elDef, elData);
}
var ViewContainerRef_ = /** @class */ (function () {
    function ViewContainerRef_(_view, _elDef, _data) {
        this._view = _view;
        this._elDef = _elDef;
        this._data = _data;
        /**
         * \@internal
         */
        this._embeddedViews = [];
    }
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
        get: /**
         * @return {?}
         */
        function () { return new ElementRef(this._data.renderElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
        get: /**
         * @return {?}
         */
        function () { return new Injector_(this._view, this._elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ view = this._view;
            var /** @type {?} */ elDef = this._elDef.parent;
            while (!elDef && view) {
                elDef = viewParentEl(view);
                view = /** @type {?} */ ((view.parent));
            }
            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ViewContainerRef_.prototype.clear = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ len = this._embeddedViews.length;
        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
            var /** @type {?} */ view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));
            Services.destroyView(view);
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ViewContainerRef_.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ view = this._embeddedViews[index];
        if (view) {
            var /** @type {?} */ ref = new ViewRef_(view);
            ref.attachToViewContainerRef(this);
            return ref;
        }
        return null;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () { return this._embeddedViews.length; },
        enumerable: true,
        configurable: true
    });
    /**
     * @template C
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.createEmbeddedView = /**
     * @template C
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    function (templateRef, context, index) {
        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));
        this.insert(viewRef, index);
        return viewRef;
    };
    /**
     * @template C
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @param {?=} ngModuleRef
     * @return {?}
     */
    ViewContainerRef_.prototype.createComponent = /**
     * @template C
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @param {?=} ngModuleRef
     * @return {?}
     */
    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
        var /** @type {?} */ contextInjector = injector || this.parentInjector;
        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
            ngModuleRef = contextInjector.get(NgModuleRef);
        }
        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
        this.insert(componentRef.hostView, index);
        return componentRef;
    };
    /**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.insert = /**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    function (viewRef, index) {
        if (viewRef.destroyed) {
            throw new Error('Cannot insert a destroyed View in a ViewContainer!');
        }
        var /** @type {?} */ viewRef_ = /** @type {?} */ (viewRef);
        var /** @type {?} */ viewData = viewRef_._view;
        attachEmbeddedView(this._view, this._data, index, viewData);
        viewRef_.attachToViewContainerRef(this);
        return viewRef;
    };
    /**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainerRef_.prototype.move = /**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    function (viewRef, currentIndex) {
        if (viewRef.destroyed) {
            throw new Error('Cannot move a destroyed View in a ViewContainer!');
        }
        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
        moveEmbeddedView(this._data, previousIndex, currentIndex);
        return viewRef;
    };
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ViewContainerRef_.prototype.indexOf = /**
     * @param {?} viewRef
     * @return {?}
     */
    function (viewRef) {
        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.remove = /**
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
        if (viewData) {
            Services.destroyView(viewData);
        }
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.detach = /**
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ view = detachEmbeddedView(this._data, index);
        return view ? new ViewRef_(view) : null;
    };
    return ViewContainerRef_;
}());
/**
 * @param {?} view
 * @return {?}
 */
function createChangeDetectorRef(view) {
    return new ViewRef_(view);
}
var ViewRef_ = /** @class */ (function () {
    function ViewRef_(_view) {
        this._view = _view;
        this._viewContainerRef = null;
        this._appRef = null;
    }
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
        get: /**
         * @return {?}
         */
        function () { return rootRenderNodes(this._view); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
        get: /**
         * @return {?}
         */
        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ViewRef_.prototype.markForCheck = /**
     * @return {?}
     */
    function () { markParentViewsForCheck(this._view); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detach = /**
     * @return {?}
     */
    function () { this._view.state &= ~4 /* Attached */; };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detectChanges = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ fs = this._view.root.rendererFactory;
        if (fs.begin) {
            fs.begin();
        }
        try {
            Services.checkAndUpdateView(this._view);
        }
        finally {
            if (fs.end) {
                fs.end();
            }
        }
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.checkNoChanges = /**
     * @return {?}
     */
    function () { Services.checkNoChangesView(this._view); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.reattach = /**
     * @return {?}
     */
    function () { this._view.state |= 4 /* Attached */; };
    /**
     * @param {?} callback
     * @return {?}
     */
    ViewRef_.prototype.onDestroy = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        if (!this._view.disposables) {
            this._view.disposables = [];
        }
        this._view.disposables.push(/** @type {?} */ (callback));
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this._appRef) {
            this._appRef.detachView(this);
        }
        else if (this._viewContainerRef) {
            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
        }
        Services.destroyView(this._view);
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detachFromAppRef = /**
     * @return {?}
     */
    function () {
        this._appRef = null;
        renderDetachView(this._view);
        Services.dirtyParentQueries(this._view);
    };
    /**
     * @param {?} appRef
     * @return {?}
     */
    ViewRef_.prototype.attachToAppRef = /**
     * @param {?} appRef
     * @return {?}
     */
    function (appRef) {
        if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this._appRef = appRef;
    };
    /**
     * @param {?} vcRef
     * @return {?}
     */
    ViewRef_.prototype.attachToViewContainerRef = /**
     * @param {?} vcRef
     * @return {?}
     */
    function (vcRef) {
        if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._viewContainerRef = vcRef;
    };
    return ViewRef_;
}());
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createTemplateData(view, def) {
    return new TemplateRef_(view, def);
}
var TemplateRef_ = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(TemplateRef_, _super);
    function TemplateRef_(_parentView, _def) {
        var _this = _super.call(this) || this;
        _this._parentView = _parentView;
        _this._def = _def;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    TemplateRef_.prototype.createEmbeddedView = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
        get: /**
         * @return {?}
         */
        function () {
            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
        },
        enumerable: true,
        configurable: true
    });
    return TemplateRef_;
}(TemplateRef));
/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */
function createInjector(view, elDef) {
    return new Injector_(view, elDef);
}
var Injector_ = /** @class */ (function () {
    function Injector_(view, elDef) {
        this.view = view;
        this.elDef = elDef;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    Injector_.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
    };
    return Injector_;
}());
/**
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function nodeValue(view, index) {
    var /** @type {?} */ def = view.def.nodes[index];
    if (def.flags & 1 /* TypeElement */) {
        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);
        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;
    }
    else if (def.flags & 2 /* TypeText */) {
        return asTextData(view, def.nodeIndex).renderText;
    }
    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
        return asProviderData(view, def.nodeIndex).instance;
    }
    throw new Error("Illegal state: read nodeValue for node index " + index);
}
/**
 * @param {?} view
 * @return {?}
 */
function createRendererV1(view) {
    return new RendererAdapter(view.renderer);
}
var RendererAdapter = /** @class */ (function () {
    function RendererAdapter(delegate) {
        this.delegate = delegate;
    }
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    RendererAdapter.prototype.selectRootElement = /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    function (selectorOrNode) {
        return this.delegate.selectRootElement(selectorOrNode);
    };
    /**
     * @param {?} parent
     * @param {?} namespaceAndName
     * @return {?}
     */
    RendererAdapter.prototype.createElement = /**
     * @param {?} parent
     * @param {?} namespaceAndName
     * @return {?}
     */
    function (parent, namespaceAndName) {
        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
        var /** @type {?} */ el = this.delegate.createElement(name, ns);
        if (parent) {
            this.delegate.appendChild(parent, el);
        }
        return el;
    };
    /**
     * @param {?} hostElement
     * @return {?}
     */
    RendererAdapter.prototype.createViewRoot = /**
     * @param {?} hostElement
     * @return {?}
     */
    function (hostElement) { return hostElement; };
    /**
     * @param {?} parentElement
     * @return {?}
     */
    RendererAdapter.prototype.createTemplateAnchor = /**
     * @param {?} parentElement
     * @return {?}
     */
    function (parentElement) {
        var /** @type {?} */ comment = this.delegate.createComment('');
        if (parentElement) {
            this.delegate.appendChild(parentElement, comment);
        }
        return comment;
    };
    /**
     * @param {?} parentElement
     * @param {?} value
     * @return {?}
     */
    RendererAdapter.prototype.createText = /**
     * @param {?} parentElement
     * @param {?} value
     * @return {?}
     */
    function (parentElement, value) {
        var /** @type {?} */ node = this.delegate.createText(value);
        if (parentElement) {
            this.delegate.appendChild(parentElement, node);
        }
        return node;
    };
    /**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    RendererAdapter.prototype.projectNodes = /**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    function (parentElement, nodes) {
        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
            this.delegate.appendChild(parentElement, nodes[i]);
        }
    };
    /**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    RendererAdapter.prototype.attachViewAfter = /**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    function (node, viewRootNodes) {
        var /** @type {?} */ parentElement = this.delegate.parentNode(node);
        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
        }
    };
    /**
     * @param {?} viewRootNodes
     * @return {?}
     */
    RendererAdapter.prototype.detachView = /**
     * @param {?} viewRootNodes
     * @return {?}
     */
    function (viewRootNodes) {
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            var /** @type {?} */ node = viewRootNodes[i];
            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
            this.delegate.removeChild(parentElement, node);
        }
    };
    /**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    RendererAdapter.prototype.destroyView = /**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    function (hostElement, viewAllNodes) {
        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    RendererAdapter.prototype.listen = /**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    function (renderElement, name, callback) {
        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
    };
    /**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    RendererAdapter.prototype.listenGlobal = /**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    function (target, name, callback) {
        return this.delegate.listen(target, name, /** @type {?} */ (callback));
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementProperty = /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    function (renderElement, propertyName, propertyValue) {
        this.delegate.setProperty(renderElement, propertyName, propertyValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} namespaceAndName
     * @param {?} attributeValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementAttribute = /**
     * @param {?} renderElement
     * @param {?} namespaceAndName
     * @param {?} attributeValue
     * @return {?}
     */
    function (renderElement, namespaceAndName, attributeValue) {
        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
        if (attributeValue != null) {
            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
        }
        else {
            this.delegate.removeAttribute(renderElement, name, ns);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    RendererAdapter.prototype.setBindingDebugInfo = /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    function (renderElement, propertyName, propertyValue) { };
    /**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    RendererAdapter.prototype.setElementClass = /**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    function (renderElement, className, isAdd) {
        if (isAdd) {
            this.delegate.addClass(renderElement, className);
        }
        else {
            this.delegate.removeClass(renderElement, className);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementStyle = /**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    function (renderElement, styleName, styleValue) {
        if (styleValue != null) {
            this.delegate.setStyle(renderElement, styleName, styleValue);
        }
        else {
            this.delegate.removeStyle(renderElement, styleName);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    RendererAdapter.prototype.invokeElementMethod = /**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    function (renderElement, methodName, args) {
        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);
    };
    /**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    RendererAdapter.prototype.setText = /**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
    /**
     * @return {?}
     */
    RendererAdapter.prototype.animate = /**
     * @return {?}
     */
    function () { throw new Error('Renderer.animate is no longer supported!'); };
    return RendererAdapter;
}());
/**
 * @param {?} moduleType
 * @param {?} parent
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
}
var NgModuleRef_ = /** @class */ (function () {
    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
        this._moduleType = _moduleType;
        this._parent = _parent;
        this._bootstrapComponents = _bootstrapComponents;
        this._def = _def;
        this._destroyListeners = [];
        this._destroyed = false;
        this.injector = this;
        initNgModule(this);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    NgModuleRef_.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: 0 /* None */ }, notFoundValue);
    };
    Object.defineProperty(NgModuleRef_.prototype, "instance", {
        get: /**
         * @return {?}
         */
        function () { return this.get(this._moduleType); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleRef_.prototype, "componentFactoryResolver", {
        get: /**
         * @return {?}
         */
        function () { return this.get(ComponentFactoryResolver); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgModuleRef_.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
        }
        this._destroyed = true;
        callNgModuleLifecycle(this, 131072 /* OnDestroy */);
        this._destroyListeners.forEach(function (listener) { return listener(); });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    NgModuleRef_.prototype.onDestroy = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) { this._destroyListeners.push(callback); };
    return NgModuleRef_;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RendererV1TokenKey = tokenKey(Renderer);
var Renderer2TokenKey = tokenKey(Renderer2);
var ElementRefTokenKey = tokenKey(ElementRef);
var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
var TemplateRefTokenKey = tokenKey(TemplateRef);
var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
var InjectorRefTokenKey = tokenKey(Injector);
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} childCount
 * @param {?} ctor
 * @param {?} deps
 * @param {?=} props
 * @param {?=} outputs
 * @return {?}
 */
function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
    var /** @type {?} */ bindings = [];
    if (props) {
        for (var /** @type {?} */ prop in props) {
            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
            bindings[bindingIndex] = {
                flags: 8 /* TypeProperty */,
                name: prop, nonMinifiedName: nonMinifiedName,
                ns: null,
                securityContext: null,
                suffix: null
            };
        }
    }
    var /** @type {?} */ outputDefs = [];
    if (outputs) {
        for (var /** @type {?} */ propName in outputs) {
            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
        }
    }
    flags |= 16384 /* TypeDirective */;
    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}
/**
 * @param {?} flags
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function pipeDef(flags, ctor, deps) {
    flags |= 16 /* TypePipe */;
    return _def(-1, flags, null, 0, ctor, ctor, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function providerDef(flags, matchedQueries, token, value, deps) {
    return _def(-1, flags, matchedQueries, 0, token, value, deps);
}
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} childCount
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @param {?=} bindings
 * @param {?=} outputs
 * @return {?}
 */
function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    if (!outputs) {
        outputs = [];
    }
    if (!bindings) {
        bindings = [];
    }
    // Need to resolve forwardRefs as e.g. for `useValue` we
    // lowered the expression and then stopped evaluating it,
    // i.e. also didn't unwrap it.
    value = resolveForwardRef(value);
    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
        ngContentIndex: -1, childCount: childCount, bindings: bindings,
        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
        element: null,
        provider: { token: token, value: value, deps: depDefs },
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createProviderInstance(view, def) {
    return _createProviderInstance(view, def);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPipeInstance(view, def) {
    // deps are looked up from component.
    var /** @type {?} */ compView = view;
    while (compView.parent && !isComponentView(compView)) {
        compView = compView.parent;
    }
    // pipes can see the private services of the component
    var /** @type {?} */ allowPrivateServices = true;
    // pipes are always eager and classes!
    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createDirectiveInstance(view, def) {
    // components can see other private services, other directives can't.
    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
    // directives are always eager and classes!
    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
    if (def.outputs.length) {
        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
            var /** @type {?} */ output = def.outputs[i];
            var /** @type {?} */ subscription = instance[/** @type {?} */ ((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */
            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
        }
    }
    return instance;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function eventHandlerClosure(view, index, eventName) {
    return function (event) { return dispatchEvent(view, index, eventName, event); };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);
    var /** @type {?} */ directive = providerData.instance;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ changes = /** @type {?} */ ((undefined));
    var /** @type {?} */ bindLen = def.bindings.length;
    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
        changed = true;
        changes = updateProp(view, providerData, def, 0, v0, changes);
    }
    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
        changed = true;
        changes = updateProp(view, providerData, def, 1, v1, changes);
    }
    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
        changed = true;
        changes = updateProp(view, providerData, def, 2, v2, changes);
    }
    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
        changed = true;
        changes = updateProp(view, providerData, def, 3, v3, changes);
    }
    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
        changed = true;
        changes = updateProp(view, providerData, def, 4, v4, changes);
    }
    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
        changed = true;
        changes = updateProp(view, providerData, def, 5, v5, changes);
    }
    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
        changed = true;
        changes = updateProp(view, providerData, def, 6, v6, changes);
    }
    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
        changed = true;
        changes = updateProp(view, providerData, def, 7, v7, changes);
    }
    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
        changed = true;
        changes = updateProp(view, providerData, def, 8, v8, changes);
    }
    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
        changed = true;
        changes = updateProp(view, providerData, def, 9, v9, changes);
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((def.flags & 65536 /* OnInit */) &&
        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateDirectiveDynamic(view, def, values) {
    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);
    var /** @type {?} */ directive = providerData.instance;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ changes = /** @type {?} */ ((undefined));
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
        }
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((def.flags & 65536 /* OnInit */) &&
        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function _createProviderInstance(view, def) {
    // private services can see other private services
    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
    var /** @type {?} */ providerDef = def.provider;
    switch (def.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
        case 1024 /* TypeFactoryProvider */:
            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
        case 2048 /* TypeUseExistingProvider */:
            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);
        case 256 /* TypeValueProvider */:
            return /** @type {?} */ ((providerDef)).value;
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function createClass(view, elDef, allowPrivateServices, ctor, deps) {
    var /** @type {?} */ len = deps.length;
    switch (len) {
        case 0:
            return new ctor();
        case 1:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
        case 2:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
        case 3:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
        default:
            var /** @type {?} */ depValues = new Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function callFactory(view, elDef, allowPrivateServices, factory, deps) {
    var /** @type {?} */ len = deps.length;
    switch (len) {
        case 0:
            return factory();
        case 1:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
        case 2:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
        case 3:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
        default:
            var /** @type {?} */ depValues = Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            return factory.apply(void 0, depValues);
    }
}
// This default value is when checking the hierarchy for a token.
//
// It means both:
// - the token is not provided by the current injector,
// - only the element injectors should be checked (ie do not check module injectors
//
//          mod1
//         /
//       el1   mod2
//         \  /
//         el2
//
// When requesting el2.injector.get(token), we should check in the following order and return the
// first found value:
// - el2.injector.get(token, default)
// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
// - mod2.injector.get(token, default)
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
    if (depDef.flags & 8 /* Value */) {
        return depDef.token;
    }
    var /** @type {?} */ startView = view;
    if (depDef.flags & 2 /* Optional */) {
        notFoundValue = null;
    }
    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {
        // directives on the same element as a component should be able to control the change detector
        // of that component as well.
        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);
    }
    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
        allowPrivateServices = false;
        elDef = /** @type {?} */ ((elDef.parent));
    }
    while (view) {
        if (elDef) {
            switch (tokenKey$$1) {
                case RendererV1TokenKey: {
                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                    return createRendererV1(compView);
                }
                case Renderer2TokenKey: {
                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                    return compView.renderer;
                }
                case ElementRefTokenKey:
                    return new ElementRef(asElementData(view, elDef.nodeIndex).renderElement);
                case ViewContainerRefTokenKey:
                    return asElementData(view, elDef.nodeIndex).viewContainer;
                case TemplateRefTokenKey: {
                    if (/** @type {?} */ ((elDef.element)).template) {
                        return asElementData(view, elDef.nodeIndex).template;
                    }
                    break;
                }
                case ChangeDetectorRefTokenKey: {
                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
                    return createChangeDetectorRef(cdView);
                }
                case InjectorRefTokenKey:
                    return createInjector(view, elDef);
                default:
                    var /** @type {?} */ providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey$$1];
                    if (providerDef_1) {
                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.nodeIndex);
                        if (!providerData) {
                            providerData = { instance: _createProviderInstance(view, providerDef_1) };
                            view.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);
                        }
                        return providerData.instance;
                    }
            }
        }
        allowPrivateServices = isComponentView(view);
        elDef = /** @type {?} */ ((viewParentEl(view)));
        view = /** @type {?} */ ((view.parent));
    }
    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
    }
    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @return {?}
 */
function findCompView(view, elDef, allowPrivateServices) {
    var /** @type {?} */ compView;
    if (allowPrivateServices) {
        compView = asElementData(view, elDef.nodeIndex).componentView;
    }
    else {
        compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
    }
    return compView;
}
/**
 * @param {?} view
 * @param {?} providerData
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @param {?} changes
 * @return {?}
 */
function updateProp(view, providerData, def, bindingIdx, value, changes) {
    if (def.flags & 32768 /* Component */) {
        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;
        if (compView.def.flags & 2 /* OnPush */) {
            compView.state |= 8 /* ChecksEnabled */;
        }
    }
    var /** @type {?} */ binding = def.bindings[bindingIdx];
    var /** @type {?} */ propName = /** @type {?} */ ((binding.name));
    // Note: This is still safe with Closure Compiler as
    // the user passed in the property name as an object has to `providerDef`,
    // so Closure Compiler will have renamed the property correctly already.
    providerData.instance[propName] = value;
    if (def.flags & 524288 /* OnChanges */) {
        changes = changes || {};
        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =
            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
    }
    view.oldValues[def.bindingIndex + bindingIdx] = value;
    return changes;
}
/**
 * @param {?} view
 * @param {?} lifecycles
 * @return {?}
 */
function callLifecycleHooksChildrenFirst(view, lifecycles) {
    if (!(view.def.nodeFlags & lifecycles)) {
        return;
    }
    var /** @type {?} */ nodes = view.def.nodes;
    var /** @type {?} */ initIndex = 0;
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        var /** @type {?} */ nodeDef = nodes[i];
        var /** @type {?} */ parent_1 = nodeDef.parent;
        if (!parent_1 && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        }
        if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
        }
        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&
            i === parent_1.nodeIndex + parent_1.childCount) {
            // last child of an element
            if (parent_1.directChildFlags & lifecycles) {
                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);
            }
            parent_1 = parent_1.parent;
        }
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} lifecycles
 * @param {?} initIndex
 * @return {?}
 */
function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
    for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        }
        // only visit direct children
        i += nodeDef.childCount;
    }
    return initIndex;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} lifecycles
 * @param {?} initIndex
 * @return {?}
 */
function callProviderLifecycles(view, index, lifecycles, initIndex) {
    var /** @type {?} */ providerData = asProviderData(view, index);
    if (!providerData) {
        return;
    }
    var /** @type {?} */ provider = providerData.instance;
    if (!provider) {
        return;
    }
    Services.setCurrentNode(view, index);
    if (lifecycles & 1048576 /* AfterContentInit */ &&
        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {
        provider.ngAfterContentInit();
    }
    if (lifecycles & 2097152 /* AfterContentChecked */) {
        provider.ngAfterContentChecked();
    }
    if (lifecycles & 4194304 /* AfterViewInit */ &&
        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {
        provider.ngAfterViewInit();
    }
    if (lifecycles & 8388608 /* AfterViewChecked */) {
        provider.ngAfterViewChecked();
    }
    if (lifecycles & 131072 /* OnDestroy */) {
        provider.ngOnDestroy();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} id
 * @param {?} bindings
 * @return {?}
 */
function queryDef(flags, id, bindings) {
    var /** @type {?} */ bindingDefs = [];
    for (var /** @type {?} */ propName in bindings) {
        var /** @type {?} */ bindingType = bindings[propName];
        bindingDefs.push({ propName: propName, bindingType: bindingType });
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        // TODO(vicb): check
        checkIndex: -1, flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        ngContentIndex: -1,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
        ngContent: null
    };
}
/**
 * @return {?}
 */
function createQuery() {
    return new QueryList();
}
/**
 * @param {?} view
 * @return {?}
 */
function dirtyParentQueries(view) {
    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
    while (view.parent && isEmbeddedView(view)) {
        var /** @type {?} */ tplDef = /** @type {?} */ ((view.parentNodeDef));
        view = view.parent;
        // content queries
        var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;
        for (var /** @type {?} */ i = 0; i <= end; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
                (nodeDef.flags & 536870912 /* DynamicQuery */) &&
                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {
                asQueryList(view, i).setDirty();
            }
            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||
                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
                // skip elements that don't contain the template element or no query.
                i += nodeDef.childCount;
            }
        }
    }
    // view queries
    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
                asQueryList(view, i).setDirty();
            }
            // only visit the root nodes
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkAndUpdateQuery(view, nodeDef) {
    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);
    if (!queryList.dirty) {
        return;
    }
    var /** @type {?} */ directiveInstance;
    var /** @type {?} */ newValues = /** @type {?} */ ((undefined));
    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
        var /** @type {?} */ elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));
        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);
        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;
    }
    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);
        directiveInstance = view.component;
    }
    queryList.reset(newValues);
    var /** @type {?} */ bindings = /** @type {?} */ ((nodeDef.query)).bindings;
    var /** @type {?} */ notify = false;
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        var /** @type {?} */ binding = bindings[i];
        var /** @type {?} */ boundValue = void 0;
        switch (binding.bindingType) {
            case 0 /* First */:
                boundValue = queryList.first;
                break;
            case 1 /* All */:
                boundValue = queryList;
                notify = true;
                break;
        }
        directiveInstance[binding.propName] = boundValue;
    }
    if (notify) {
        queryList.notifyOnChanges();
    }
}
/**
 * @param {?} view
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} queryDef
 * @param {?} values
 * @return {?}
 */
function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
        if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
        }
        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&
            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
                queryDef.filterId) {
            var /** @type {?} */ elementData = asElementData(view, i);
            // check embedded views that were attached at the place of their template,
            // but process child nodes first if some match the query (see issue #16568)
            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
                i += nodeDef.childCount;
            }
            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;
                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                    var /** @type {?} */ embeddedView = embeddedViews[k];
                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
                    if (dvc && dvc === elementData) {
                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            var /** @type {?} */ projectedViews = elementData.template._projectedViews;
            if (projectedViews) {
                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
                    var /** @type {?} */ projectedView = projectedViews[k];
                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                }
            }
        }
        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
        }
    }
    return values;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} queryValueType
 * @return {?}
 */
function getQueryValue(view, nodeDef, queryValueType) {
    if (queryValueType != null) {
        // a match
        switch (queryValueType) {
            case 1 /* RenderElement */:
                return asElementData(view, nodeDef.nodeIndex).renderElement;
            case 0 /* ElementRef */:
                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);
            case 2 /* TemplateRef */:
                return asElementData(view, nodeDef.nodeIndex).template;
            case 3 /* ViewContainerRef */:
                return asElementData(view, nodeDef.nodeIndex).viewContainer;
            case 4 /* Provider */:
                return asProviderData(view, nodeDef.nodeIndex).instance;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} ngContentIndex
 * @param {?} index
 * @return {?}
 */
function ngContentDef(ngContentIndex, index) {
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: -1,
        flags: 8 /* TypeNgContent */,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: { index: index }
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function appendNgContent(view, renderHost, def) {
    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
    if (!parentEl) {
        // Nothing to do if there is no parent element.
        return;
    }
    var /** @type {?} */ ngContentIndex = /** @type {?} */ ((def.ngContent)).index;
    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} checkIndex
 * @param {?} argCount
 * @return {?}
 */
function purePipeDef(checkIndex, argCount) {
    // argCount + 1 to include the pipe as first arg
    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));
}
/**
 * @param {?} checkIndex
 * @param {?} argCount
 * @return {?}
 */
function pureArrayDef(checkIndex, argCount) {
    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));
}
/**
 * @param {?} checkIndex
 * @param {?} propToIndex
 * @return {?}
 */
function pureObjectDef(checkIndex, propToIndex) {
    var /** @type {?} */ keys = Object.keys(propToIndex);
    var /** @type {?} */ nbKeys = keys.length;
    var /** @type {?} */ propertyNames = new Array(nbKeys);
    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {
        var /** @type {?} */ key = keys[i];
        var /** @type {?} */ index = propToIndex[key];
        propertyNames[index] = key;
    }
    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);
}
/**
 * @param {?} flags
 * @param {?} checkIndex
 * @param {?} propertyNames
 * @return {?}
 */
function _pureExpressionDef(flags, checkIndex, propertyNames) {
    var /** @type {?} */ bindings = new Array(propertyNames.length);
    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
        var /** @type {?} */ prop = propertyNames[i];
        bindings[i] = {
            flags: 8 /* TypeProperty */,
            name: prop,
            ns: null,
            nonMinifiedName: prop,
            securityContext: null,
            suffix: null
        };
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: -1,
        childCount: 0, bindings: bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPureExpression(view, def) {
    return { value: undefined };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);
        var /** @type {?} */ value = void 0;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = new Array(bindings.length);
                if (bindLen > 0)
                    value[0] = v0;
                if (bindLen > 1)
                    value[1] = v1;
                if (bindLen > 2)
                    value[2] = v2;
                if (bindLen > 3)
                    value[3] = v3;
                if (bindLen > 4)
                    value[4] = v4;
                if (bindLen > 5)
                    value[5] = v5;
                if (bindLen > 6)
                    value[6] = v6;
                if (bindLen > 7)
                    value[7] = v7;
                if (bindLen > 8)
                    value[8] = v8;
                if (bindLen > 9)
                    value[9] = v9;
                break;
            case 64 /* TypePureObject */:
                value = {};
                if (bindLen > 0)
                    value[/** @type {?} */ ((bindings[0].name))] = v0;
                if (bindLen > 1)
                    value[/** @type {?} */ ((bindings[1].name))] = v1;
                if (bindLen > 2)
                    value[/** @type {?} */ ((bindings[2].name))] = v2;
                if (bindLen > 3)
                    value[/** @type {?} */ ((bindings[3].name))] = v3;
                if (bindLen > 4)
                    value[/** @type {?} */ ((bindings[4].name))] = v4;
                if (bindLen > 5)
                    value[/** @type {?} */ ((bindings[5].name))] = v5;
                if (bindLen > 6)
                    value[/** @type {?} */ ((bindings[6].name))] = v6;
                if (bindLen > 7)
                    value[/** @type {?} */ ((bindings[7].name))] = v7;
                if (bindLen > 8)
                    value[/** @type {?} */ ((bindings[8].name))] = v8;
                if (bindLen > 9)
                    value[/** @type {?} */ ((bindings[9].name))] = v9;
                break;
            case 128 /* TypePurePipe */:
                var /** @type {?} */ pipe = v0;
                switch (bindLen) {
                    case 1:
                        value = pipe.transform(v0);
                        break;
                    case 2:
                        value = pipe.transform(v1);
                        break;
                    case 3:
                        value = pipe.transform(v1, v2);
                        break;
                    case 4:
                        value = pipe.transform(v1, v2, v3);
                        break;
                    case 5:
                        value = pipe.transform(v1, v2, v3, v4);
                        break;
                    case 6:
                        value = pipe.transform(v1, v2, v3, v4, v5);
                        break;
                    case 7:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
                        break;
                    case 8:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                        break;
                    case 9:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                        break;
                    case 10:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                        break;
                }
                break;
        }
        data.value = value;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdatePureExpressionDynamic(view, def, values) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);
        var /** @type {?} */ value = void 0;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = values;
                break;
            case 64 /* TypePureObject */:
                value = {};
                for (var /** @type {?} */ i = 0; i < values.length; i++) {
                    value[/** @type {?} */ ((bindings[i].name))] = values[i];
                }
                break;
            case 128 /* TypePurePipe */:
                var /** @type {?} */ pipe = values[0];
                var /** @type {?} */ params = values.slice(1);
                value = pipe.transform.apply(pipe, params);
                break;
        }
        data.value = value;
    }
    return changed;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} checkIndex
 * @param {?} ngContentIndex
 * @param {?} staticText
 * @return {?}
 */
function textDef(checkIndex, ngContentIndex, staticText) {
    var /** @type {?} */ bindings = new Array(staticText.length - 1);
    for (var /** @type {?} */ i = 1; i < staticText.length; i++) {
        bindings[i - 1] = {
            flags: 8 /* TypeProperty */,
            name: null,
            ns: null,
            nonMinifiedName: null,
            securityContext: null,
            suffix: staticText[i],
        };
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: 2 /* TypeText */,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0, bindings: bindings,
        bindingFlags: 8 /* TypeProperty */,
        outputs: [],
        element: null,
        provider: null,
        text: { prefix: staticText[0] },
        query: null,
        ngContent: null,
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createText(view, renderHost, def) {
    var /** @type {?} */ renderNode$$1;
    var /** @type {?} */ renderer = view.renderer;
    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);
    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
    if (parentEl) {
        renderer.appendChild(parentEl, renderNode$$1);
    }
    return { renderText: renderNode$$1 };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ changed = false;
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        var /** @type {?} */ value = /** @type {?} */ ((def.text)).prefix;
        if (bindLen > 0)
            value += _addInterpolationPart(v0, bindings[0]);
        if (bindLen > 1)
            value += _addInterpolationPart(v1, bindings[1]);
        if (bindLen > 2)
            value += _addInterpolationPart(v2, bindings[2]);
        if (bindLen > 3)
            value += _addInterpolationPart(v3, bindings[3]);
        if (bindLen > 4)
            value += _addInterpolationPart(v4, bindings[4]);
        if (bindLen > 5)
            value += _addInterpolationPart(v5, bindings[5]);
        if (bindLen > 6)
            value += _addInterpolationPart(v6, bindings[6]);
        if (bindLen > 7)
            value += _addInterpolationPart(v7, bindings[7]);
        if (bindLen > 8)
            value += _addInterpolationPart(v8, bindings[8]);
        if (bindLen > 9)
            value += _addInterpolationPart(v9, bindings[9]);
        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(renderNode$$1, value);
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateTextDynamic(view, def, values) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */ value = '';
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            value = value + _addInterpolationPart(values[i], bindings[i]);
        }
        value = /** @type {?} */ ((def.text)).prefix + value;
        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(renderNode$$1, value);
    }
    return changed;
}
/**
 * @param {?} value
 * @param {?} binding
 * @return {?}
 */
function _addInterpolationPart(value, binding) {
    var /** @type {?} */ valueStr = value != null ? value.toString() : '';
    return valueStr + binding.suffix;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} nodes
 * @param {?=} updateDirectives
 * @param {?=} updateRenderer
 * @return {?}
 */
function viewDef(flags, nodes, updateDirectives, updateRenderer) {
    // clone nodes and set auto calculated values
    var /** @type {?} */ viewBindingCount = 0;
    var /** @type {?} */ viewDisposableCount = 0;
    var /** @type {?} */ viewNodeFlags = 0;
    var /** @type {?} */ viewRootNodeFlags = 0;
    var /** @type {?} */ viewMatchedQueries = 0;
    var /** @type {?} */ currentParent = null;
    var /** @type {?} */ currentRenderParent = null;
    var /** @type {?} */ currentElementHasPublicProviders = false;
    var /** @type {?} */ currentElementHasPrivateProviders = false;
    var /** @type {?} */ lastRenderRootNode = null;
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        var /** @type {?} */ node = nodes[i];
        node.nodeIndex = i;
        node.parent = currentParent;
        node.bindingIndex = viewBindingCount;
        node.outputIndex = viewDisposableCount;
        node.renderParent = currentRenderParent;
        viewNodeFlags |= node.flags;
        viewMatchedQueries |= node.matchedQueryIds;
        if (node.element) {
            var /** @type {?} */ elDef = node.element;
            elDef.publicProviders =
                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders;
            // Note: We assume that all providers of an element are before any child element!
            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;
            if (node.element.template) {
                viewMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        }
        validateNode(currentParent, node, nodes.length);
        viewBindingCount += node.bindings.length;
        viewDisposableCount += node.outputs.length;
        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
            lastRenderRootNode = node;
        }
        if (node.flags & 20224 /* CatProvider */) {
            if (!currentElementHasPublicProviders) {
                currentElementHasPublicProviders = true; /** @type {?} */
                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */
                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;
            }
            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;
            if (!isPrivateService || isComponent) {
                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
            }
            else {
                if (!currentElementHasPrivateProviders) {
                    currentElementHasPrivateProviders = true; /** @type {?} */
                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);
                } /** @type {?} */
                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
            }
            if (isComponent) {
                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;
            }
        }
        if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;
            if (node.element && node.element.template) {
                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        }
        else {
            viewRootNodeFlags |= node.flags;
        }
        if (node.childCount > 0) {
            currentParent = node;
            if (!isNgContainer(node)) {
                currentRenderParent = node;
            }
        }
        else {
            // When the current node has no children, check if it is the last children of its parent.
            // When it is, propagate the flags up.
            // The loop is required because an element could be the last transitive children of several
            // elements. We loop to either the root or the highest opened element (= with remaining
            // children)
            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
                var /** @type {?} */ newParent = currentParent.parent;
                if (newParent) {
                    newParent.childFlags |= currentParent.childFlags;
                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;
                }
                currentParent = newParent;
                // We also need to update the render parent & account for ng-container
                if (currentParent && isNgContainer(currentParent)) {
                    currentRenderParent = currentParent.renderParent;
                }
                else {
                    currentRenderParent = currentParent;
                }
            }
        }
    }
    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };
    return {
        // Will be filled later...
        factory: null,
        nodeFlags: viewNodeFlags,
        rootNodeFlags: viewRootNodeFlags,
        nodeMatchedQueries: viewMatchedQueries, flags: flags,
        nodes: nodes,
        updateDirectives: updateDirectives || NOOP,
        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,
        bindingCount: viewBindingCount,
        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
    };
}
/**
 * @param {?} node
 * @return {?}
 */
function isNgContainer(node) {
    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;
}
/**
 * @param {?} parent
 * @param {?} node
 * @param {?} nodeCount
 * @return {?}
 */
function validateNode(parent, node, nodeCount) {
    var /** @type {?} */ template = node.element && node.element.template;
    if (template) {
        if (!template.lastRenderRootNode) {
            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
        }
        if (template.lastRenderRootNode &&
            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.nodeIndex + "!");
        }
    }
    if (node.flags & 20224 /* CatProvider */) {
        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;
        if ((parentFlags & 1 /* TypeElement */) === 0) {
            throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index " + node.nodeIndex + "!");
        }
    }
    if (node.query) {
        if (node.flags & 67108864 /* TypeContentQuery */ &&
            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.nodeIndex + "!");
        }
        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.nodeIndex + "!");
        }
    }
    if (node.childCount) {
        var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;
        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.nodeIndex + "!");
        }
    }
}
/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function createEmbeddedView(parent, anchorDef$$1, viewDef, context) {
    // embedded views are seen as siblings to the anchor, so we need
    // to get the parent of the anchor and use it as parentIndex.
    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);
    initView(view, parent.component, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} root
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function createRootView(root, def, context) {
    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
    initView(view, context, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function createComponentView(parentView, nodeDef, viewDef, hostElement) {
    var /** @type {?} */ rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;
    var /** @type {?} */ compRenderer;
    if (!rendererType) {
        compRenderer = parentView.root.renderer;
    }
    else {
        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
    }
    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);
}
/**
 * @param {?} root
 * @param {?} renderer
 * @param {?} parent
 * @param {?} parentNodeDef
 * @param {?} def
 * @return {?}
 */
function createView(root, renderer, parent, parentNodeDef, def) {
    var /** @type {?} */ nodes = new Array(def.nodes.length);
    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;
    var /** @type {?} */ view = {
        def: def,
        parent: parent,
        viewContainerParent: null, parentNodeDef: parentNodeDef,
        context: null,
        component: null, nodes: nodes,
        state: 13 /* CatInit */, root: root, renderer: renderer,
        oldValues: new Array(def.bindingCount), disposables: disposables,
        initIndex: -1
    };
    return view;
}
/**
 * @param {?} view
 * @param {?} component
 * @param {?} context
 * @return {?}
 */
function initView(view, component, context) {
    view.component = component;
    view.context = context;
}
/**
 * @param {?} view
 * @return {?}
 */
function createViewNodes(view) {
    var /** @type {?} */ renderHost;
    if (isComponentView(view)) {
        var /** @type {?} */ hostDef = view.parentNodeDef;
        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;
    }
    var /** @type {?} */ def = view.def;
    var /** @type {?} */ nodes = view.nodes;
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        Services.setCurrentNode(view, i);
        var /** @type {?} */ nodeData = void 0;
        switch (nodeDef.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                var /** @type {?} */ el = /** @type {?} */ (createElement(view, renderHost, nodeDef));
                var /** @type {?} */ componentView = /** @type {?} */ ((undefined));
                if (nodeDef.flags & 33554432 /* ComponentView */) {
                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));
                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                }
                listenToElementOutputs(view, componentView, nodeDef, el);
                nodeData = /** @type {?} */ ({
                    renderElement: el,
                    componentView: componentView,
                    viewContainer: null,
                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
                });
                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                }
                break;
            case 2 /* TypeText */:
                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));
                break;
            case 512 /* TypeClassProvider */:
            case 1024 /* TypeFactoryProvider */:
            case 2048 /* TypeUseExistingProvider */:
            case 256 /* TypeValueProvider */: {
                nodeData = nodes[i];
                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {
                    var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
                    nodeData = /** @type {?} */ ({ instance: instance });
                }
                break;
            }
            case 16 /* TypePipe */: {
                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
                nodeData = /** @type {?} */ ({ instance: instance });
                break;
            }
            case 16384 /* TypeDirective */: {
                nodeData = nodes[i];
                if (!nodeData) {
                    var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
                    nodeData = /** @type {?} */ ({ instance: instance });
                }
                if (nodeDef.flags & 32768 /* Component */) {
                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;
                    initView(compView, nodeData.instance, nodeData.instance);
                }
                break;
            }
            case 32 /* TypePureArray */:
            case 64 /* TypePureObject */:
            case 128 /* TypePurePipe */:
                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));
                break;
            case 67108864 /* TypeContentQuery */:
            case 134217728 /* TypeViewQuery */:
                nodeData = /** @type {?} */ (createQuery());
                break;
            case 8 /* TypeNgContent */:
                appendNgContent(view, renderHost, nodeDef);
                // no runtime data needed for NgContent...
                nodeData = undefined;
                break;
        }
        nodes[i] = nodeData;
    }
    // Create the ViewData.nodes of component views after we created everything else,
    // so that e.g. ng-content works
    execComponentViewsAction(view, ViewAction.CreateViewNodes);
    // fill static content and view queries
    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkNoChangesView(view) {
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 1 /* CheckNoChanges */);
    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
    Services.updateRenderer(view, 1 /* CheckNoChanges */);
    execComponentViewsAction(view, ViewAction.CheckNoChanges);
    // Note: We don't check queries for changes as we didn't do this in v2.x.
    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkAndUpdateView(view) {
    if (view.state & 1 /* BeforeFirstCheck */) {
        view.state &= ~1 /* BeforeFirstCheck */;
        view.state |= 2 /* FirstCheck */;
    }
    else {
        view.state &= ~2 /* FirstCheck */;
    }
    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    var /** @type {?} */ callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);
    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));
    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);
    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));
    if (view.def.flags & 2 /* OnPush */) {
        view.state &= ~8 /* ChecksEnabled */;
    }
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markProjectedViewsForCheck(view) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;
            if (projectedViews) {
                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {
                    var /** @type {?} */ projectedView = projectedViews[i_1];
                    projectedView.state |= 32 /* CheckProjectedView */;
                    markParentViewsForCheckProjectedViews(projectedView, view);
                }
            }
        }
        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 2 /* TypeText */:
            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 16384 /* TypeDirective */:
            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        default:
            throw 'unreachable';
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateNodeDynamic(view, nodeDef, values) {
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return checkAndUpdateElementDynamic(view, nodeDef, values);
        case 2 /* TypeText */:
            return checkAndUpdateTextDynamic(view, nodeDef, values);
        case 16384 /* TypeDirective */:
            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
        default:
            throw 'unreachable';
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        checkNoChangesNodeDynamic(view, nodeDef, v0);
    }
    // Returning false is ok here as we would have thrown in case of a change.
    return false;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindLen = nodeDef.bindings.length;
    if (bindLen > 0)
        checkBindingNoChanges(view, nodeDef, 0, v0);
    if (bindLen > 1)
        checkBindingNoChanges(view, nodeDef, 1, v1);
    if (bindLen > 2)
        checkBindingNoChanges(view, nodeDef, 2, v2);
    if (bindLen > 3)
        checkBindingNoChanges(view, nodeDef, 3, v3);
    if (bindLen > 4)
        checkBindingNoChanges(view, nodeDef, 4, v4);
    if (bindLen > 5)
        checkBindingNoChanges(view, nodeDef, 5, v5);
    if (bindLen > 6)
        checkBindingNoChanges(view, nodeDef, 6, v6);
    if (bindLen > 7)
        checkBindingNoChanges(view, nodeDef, 7, v7);
    if (bindLen > 8)
        checkBindingNoChanges(view, nodeDef, 8, v8);
    if (bindLen > 9)
        checkBindingNoChanges(view, nodeDef, 9, v9);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkNoChangesNodeDynamic(view, nodeDef, values) {
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        checkBindingNoChanges(view, nodeDef, i, values[i]);
    }
}
/**
 * Workaround https://github.com/angular/tsickle/issues/497
 * @suppress {misplacedTypeAnnotation}
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkNoChangesQuery(view, nodeDef) {
    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);
    if (queryList.dirty) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query " + (/** @type {?} */ ((nodeDef.query))).id + " not dirty", "Query " + (/** @type {?} */ ((nodeDef.query))).id + " dirty", (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyView(view) {
    if (view.state & 128 /* Destroyed */) {
        return;
    }
    execEmbeddedViewsAction(view, ViewAction.Destroy);
    execComponentViewsAction(view, ViewAction.Destroy);
    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
    if (view.disposables) {
        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
        }
    }
    detachProjectedView(view);
    if (view.renderer.destroyNode) {
        destroyViewNodes(view);
    }
    if (isComponentView(view)) {
        view.renderer.destroy();
    }
    view.state |= 128 /* Destroyed */;
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyViewNodes(view) {
    var /** @type {?} */ len = view.def.nodes.length;
    for (var /** @type {?} */ i = 0; i < len; i++) {
        var /** @type {?} */ def = view.def.nodes[i];
        if (def.flags & 1 /* TypeElement */) {
            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);
        }
        else if (def.flags & 2 /* TypeText */) {
            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);
        }
        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {
            asQueryList(view, i).destroy();
        }
    }
}
/** @enum {number} */
var ViewAction = {
    CreateViewNodes: 0,
    CheckNoChanges: 1,
    CheckNoChangesProjectedViews: 2,
    CheckAndUpdate: 3,
    CheckAndUpdateProjectedViews: 4,
    Destroy: 5,
};
ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
ViewAction[ViewAction.CheckNoChangesProjectedViews] = "CheckNoChangesProjectedViews";
ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
ViewAction[ViewAction.CheckAndUpdateProjectedViews] = "CheckAndUpdateProjectedViews";
ViewAction[ViewAction.Destroy] = "Destroy";
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execComponentViewsAction(view, action) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 33554432 /* ComponentView */) {
            // a leaf
            callViewAction(asElementData(view, i).componentView, action);
        }
        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execEmbeddedViewsAction(view, action) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            // a leaf
            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;
            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                callViewAction(embeddedViews[k], action);
            }
        }
        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function callViewAction(view, action) {
    var /** @type {?} */ viewState = view.state;
    switch (action) {
        case ViewAction.CheckNoChanges:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                }
            }
            break;
        case ViewAction.CheckNoChangesProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.CheckAndUpdate:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                }
            }
            break;
        case ViewAction.CheckAndUpdateProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.Destroy:
            // Note: destroyView recurses over all views,
            // so we don't need to special case projected views here.
            destroyView(view);
            break;
        case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execProjectedViewsAction(view, action) {
    execEmbeddedViewsAction(view, action);
    execComponentViewsAction(view, action);
}
/**
 * @param {?} view
 * @param {?} queryFlags
 * @param {?} staticDynamicQueryFlag
 * @param {?} checkType
 * @return {?}
 */
function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
        return;
    }
    var /** @type {?} */ nodeCount = view.def.nodes.length;
    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
            Services.setCurrentNode(view, nodeDef.nodeIndex);
            switch (checkType) {
                case 0 /* CheckAndUpdate */:
                    checkAndUpdateQuery(view, nodeDef);
                    break;
                case 1 /* CheckNoChanges */:
                    checkNoChangesQuery(view, nodeDef);
                    break;
            }
        }
        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var initialized = false;
/**
 * @return {?}
 */
function initServicesIfNeeded() {
    if (initialized) {
        return;
    }
    initialized = true;
    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
    Services.setCurrentNode = services.setCurrentNode;
    Services.createRootView = services.createRootView;
    Services.createEmbeddedView = services.createEmbeddedView;
    Services.createComponentView = services.createComponentView;
    Services.createNgModuleRef = services.createNgModuleRef;
    Services.overrideProvider = services.overrideProvider;
    Services.overrideComponentView = services.overrideComponentView;
    Services.clearOverrides = services.clearOverrides;
    Services.checkAndUpdateView = services.checkAndUpdateView;
    Services.checkNoChangesView = services.checkNoChangesView;
    Services.destroyView = services.destroyView;
    Services.resolveDep = resolveDep;
    Services.createDebugContext = services.createDebugContext;
    Services.handleEvent = services.handleEvent;
    Services.updateDirectives = services.updateDirectives;
    Services.updateRenderer = services.updateRenderer;
    Services.dirtyParentQueries = dirtyParentQueries;
}
/**
 * @return {?}
 */
function createProdServices() {
    return {
        setCurrentNode: function () { },
        createRootView: createProdRootView,
        createEmbeddedView: createEmbeddedView,
        createComponentView: createComponentView,
        createNgModuleRef: createNgModuleRef,
        overrideProvider: NOOP,
        overrideComponentView: NOOP,
        clearOverrides: NOOP,
        checkAndUpdateView: checkAndUpdateView,
        checkNoChangesView: checkNoChangesView,
        destroyView: destroyView,
        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
        handleEvent: function (view, nodeIndex, eventName, event) {
            return view.def.handleEvent(view, nodeIndex, eventName, event);
        },
        updateDirectives: function (view, checkType) {
            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
                prodCheckNoChangesNode, view);
        },
        updateRenderer: function (view, checkType) {
            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
                prodCheckNoChangesNode, view);
        },
    };
}
/**
 * @return {?}
 */
function createDebugServices() {
    return {
        setCurrentNode: debugSetCurrentNode,
        createRootView: debugCreateRootView,
        createEmbeddedView: debugCreateEmbeddedView,
        createComponentView: debugCreateComponentView,
        createNgModuleRef: debugCreateNgModuleRef,
        overrideProvider: debugOverrideProvider,
        overrideComponentView: debugOverrideComponentView,
        clearOverrides: debugClearOverrides,
        checkAndUpdateView: debugCheckAndUpdateView,
        checkNoChangesView: debugCheckNoChangesView,
        destroyView: debugDestroyView,
        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
        handleEvent: debugHandleEvent,
        updateDirectives: debugUpdateDirectives,
        updateRenderer: debugUpdateRenderer,
    };
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);
    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
}
/**
 * @param {?} elInjector
 * @param {?} ngModule
 * @param {?} rendererFactory
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @return {?}
 */
function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);
    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
    return {
        ngModule: ngModule,
        injector: elInjector, projectableNodes: projectableNodes,
        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler
    };
}
/**
 * @param {?} parentView
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {
    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);
    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {
    var /** @type {?} */ overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);
    if (overrideComponentView) {
        viewDef$$1 = overrideComponentView;
    }
    else {
        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);
    }
    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);
}
/**
 * @param {?} moduleType
 * @param {?} parentInjector
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);
    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
}
var providerOverrides = new Map();
var viewDefOverrides = new Map();
/**
 * @param {?} override
 * @return {?}
 */
function debugOverrideProvider(override) {
    providerOverrides.set(override.token, override);
}
/**
 * @param {?} comp
 * @param {?} compFactory
 * @return {?}
 */
function debugOverrideComponentView(comp, compFactory) {
    var /** @type {?} */ hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));
    viewDefOverrides.set(comp, compViewDef);
}
/**
 * @return {?}
 */
function debugClearOverrides() {
    providerOverrides.clear();
    viewDefOverrides.clear();
}
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToView(def) {
    if (providerOverrides.size === 0) {
        return def;
    }
    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
    if (elementIndicesWithOverwrittenProviders.length === 0) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });
    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
    }
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function findElementIndicesWithOverwrittenProviders(def) {
        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];
        var /** @type {?} */ lastElementDef = null;
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                lastElementDef = nodeDef;
            }
            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {
                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);
                lastElementDef = null;
            }
        }
        return elIndicesWithOverwrittenProviders;
    }
    /**
     * @param {?} viewDef
     * @param {?} elIndex
     * @return {?}
     */
    function applyProviderOverridesToElement(viewDef$$1, elIndex) {
        for (var /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {
            var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                // stop at the next element
                return;
            }
            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
                var /** @type {?} */ provider = /** @type {?} */ ((nodeDef.provider));
                var /** @type {?} */ override = providerOverrides.get(provider.token);
                if (override) {
                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                    provider.deps = splitDepsDsl(override.deps);
                    provider.value = override.value;
                }
            }
        }
    }
}
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToNgModule(def) {
    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;
    if (!hasOverrides) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });
    applyProviderOverrides(def);
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function calcHasOverrides(def) {
        var /** @type {?} */ hasOverrides = false;
        var /** @type {?} */ hasDeprecatedOverrides = false;
        if (providerOverrides.size === 0) {
            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
        }
        def.providers.forEach(function (node) {
            var /** @type {?} */ override = providerOverrides.get(node.token);
            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {
                hasOverrides = true;
                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
            }
        });
        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
    }
    /**
     * @param {?} def
     * @return {?}
     */
    function applyProviderOverrides(def) {
        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
            var /** @type {?} */ provider = def.providers[i];
            if (hasDeprecatedOverrides) {
                // We had a bug where me made
                // all providers lazy. Keep this logic behind a flag
                // for migrating existing users.
                provider.flags |= 4096 /* LazyProvider */;
            }
            var /** @type {?} */ override = providerOverrides.get(provider.token);
            if (override) {
                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                provider.deps = splitDepsDsl(override.deps);
                provider.value = override.value;
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} checkIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];
    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, checkIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @param {?} checkIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];
    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, checkIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckAndUpdateView(view) {
    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckNoChangesView(view) {
    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugDestroyView(view) {
    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
}
/** @enum {number} */
var DebugAction = {
    create: 0,
    detectChanges: 1,
    checkNoChanges: 2,
    destroy: 3,
    handleEvent: 4,
};
DebugAction[DebugAction.create] = "create";
DebugAction[DebugAction.detectChanges] = "detectChanges";
DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
DebugAction[DebugAction.destroy] = "destroy";
DebugAction[DebugAction.handleEvent] = "handleEvent";
var _currentAction;
var _currentView;
var _currentNodeIndex;
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function debugSetCurrentNode(view, nodeIndex) {
    _currentView = view;
    _currentNodeIndex = nodeIndex;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function debugHandleEvent(view, nodeIndex, eventName, event) {
    debugSetCurrentNode(view, nodeIndex);
    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateDirectives(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
    return view.def.updateDirectives(debugCheckDirectivesFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
        var values = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            values[_i - 3] = arguments[_i];
        }
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.nodeIndex).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateRenderer(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
        var values = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            values[_i - 3] = arguments[_i];
        }
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.nodeIndex).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} givenValues
 * @return {?}
 */
function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
    var /** @type {?} */ changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
    if (changed) {
        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            var /** @type {?} */ bindingValues = {};
            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
                var /** @type {?} */ binding = nodeDef.bindings[i];
                var /** @type {?} */ value = values[i];
                if (binding.flags & 8 /* TypeProperty */) {
                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =
                        normalizeDebugBindingValue(value);
                }
            }
            var /** @type {?} */ elDef = /** @type {?} */ ((nodeDef.parent));
            var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;
            if (!/** @type {?} */ ((elDef.element)).name) {
                // a comment.
                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
            }
            else {
                // a regular element.
                for (var /** @type {?} */ attr in bindingValues) {
                    var /** @type {?} */ value = bindingValues[attr];
                    if (value != null) {
                        view.renderer.setAttribute(el, attr, value);
                    }
                    else {
                        view.renderer.removeAttribute(el, attr);
                    }
                }
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} values
 * @return {?}
 */
function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
}
/**
 * @param {?} name
 * @return {?}
 */
function normalizeDebugBindingName(name) {
    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
    return "ng-reflect-" + name;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        return '-' + m[1].toLowerCase();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeDebugBindingValue(value) {
    try {
        // Limit the size of the value as otherwise the DOM just gets polluted.
        return value != null ? value.toString().slice(0, 30) : value;
    }
    catch (/** @type {?} */ e) {
        return '[ERROR] Exception while trying to serialize the value';
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextDirectiveWithBinding(view, nodeIndex) {
    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextRenderNodeWithBinding(view, nodeIndex) {
    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
var DebugContext_ = /** @class */ (function () {
    function DebugContext_(view, nodeIndex) {
        this.view = view;
        this.nodeIndex = nodeIndex;
        if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
        }
        this.nodeDef = view.def.nodes[nodeIndex];
        var /** @type {?} */ elDef = this.nodeDef;
        var /** @type {?} */ elView = view;
        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
            elDef = /** @type {?} */ ((elDef.parent));
        }
        if (!elDef) {
            while (!elDef && elView) {
                elDef = /** @type {?} */ ((viewParentEl(elView)));
                elView = /** @type {?} */ ((elView.parent));
            }
        }
        this.elDef = elDef;
        this.elView = elView;
    }
    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
        get: /**
         * @return {?}
         */
        function () {
            // Has to be done lazily as we use the DebugContext also during creation of elements...
            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "injector", {
        get: /**
         * @return {?}
         */
        function () { return createInjector(this.elView, this.elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "component", {
        get: /**
         * @return {?}
         */
        function () { return this.elOrCompView.component; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () { return this.elOrCompView.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ tokens = [];
            if (this.elDef) {
                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 20224 /* CatProvider */) {
                        tokens.push(/** @type {?} */ ((childDef.provider)).token);
                    }
                    i += childDef.childCount;
                }
            }
            return tokens;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "references", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ references = {};
            if (this.elDef) {
                collectReferences(this.elView, this.elDef, references);
                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 20224 /* CatProvider */) {
                        collectReferences(this.elView, childDef, references);
                    }
                    i += childDef.childCount;
                }
            }
            return references;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ elData = findHostElement(this.elOrCompView);
            return elData ? elData.renderElement : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "renderNode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
                renderNode(this.elView, this.elDef);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    DebugContext_.prototype.logError = /**
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    function (console) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var /** @type {?} */ logViewDef;
        var /** @type {?} */ logNodeIndex;
        if (this.nodeDef.flags & 2 /* TypeText */) {
            logViewDef = this.view.def;
            logNodeIndex = this.nodeDef.nodeIndex;
        }
        else {
            logViewDef = this.elView.def;
            logNodeIndex = this.elDef.nodeIndex;
        }
        // Note: we only generate a log function for text and element nodes
        // to make the generated code as small as possible.
        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
        var /** @type {?} */ currRenderNodeIndex = -1;
        var /** @type {?} */ nodeLogger = function () {
            currRenderNodeIndex++;
            if (currRenderNodeIndex === renderNodeIndex) {
                return (_a = console.error).bind.apply(_a, [console].concat(values));
            }
            else {
                return NOOP;
            }
            var _a;
        }; /** @type {?} */
        ((logViewDef.factory))(nodeLogger);
        if (currRenderNodeIndex < renderNodeIndex) {
            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
            console.error.apply(console, values);
        }
    };
    return DebugContext_;
}());
/**
 * @param {?} viewDef
 * @param {?} nodeIndex
 * @return {?}
 */
function getRenderNodeIndex(viewDef$$1, nodeIndex) {
    var /** @type {?} */ renderNodeIndex = -1;
    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            renderNodeIndex++;
        }
    }
    return renderNodeIndex;
}
/**
 * @param {?} view
 * @return {?}
 */
function findHostElement(view) {
    while (view && !isComponentView(view)) {
        view = /** @type {?} */ ((view.parent));
    }
    if (view.parent) {
        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} references
 * @return {?}
 */
function collectReferences(view, nodeDef, references) {
    for (var /** @type {?} */ refName in nodeDef.references) {
        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
    }
}
/**
 * @param {?} action
 * @param {?} fn
 * @param {?} self
 * @param {?} args
 * @return {?}
 */
function callWithDebugContext(action, fn, self, args) {
    var /** @type {?} */ oldAction = _currentAction;
    var /** @type {?} */ oldView = _currentView;
    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
    try {
        _currentAction = action;
        var /** @type {?} */ result = fn.apply(self, args);
        _currentView = oldView;
        _currentNodeIndex = oldNodeIndex;
        _currentAction = oldAction;
        return result;
    }
    catch (/** @type {?} */ e) {
        if (isViewDebugError(e) || !_currentView) {
            throw e;
        }
        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));
    }
}
/**
 * @return {?}
 */
function getCurrentDebugContext() {
    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
}
var DebugRendererFactory2 = /** @class */ (function () {
    function DebugRendererFactory2(delegate) {
        this.delegate = delegate;
    }
    /**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */
    DebugRendererFactory2.prototype.createRenderer = /**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */
    function (element, renderData) {
        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.begin = /**
     * @return {?}
     */
    function () {
        if (this.delegate.begin) {
            this.delegate.begin();
        }
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.end = /**
     * @return {?}
     */
    function () {
        if (this.delegate.end) {
            this.delegate.end();
        }
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.whenRenderingDone = /**
     * @return {?}
     */
    function () {
        if (this.delegate.whenRenderingDone) {
            return this.delegate.whenRenderingDone();
        }
        return Promise.resolve(null);
    };
    return DebugRendererFactory2;
}());
var DebugRenderer2 = /** @class */ (function () {
    function DebugRenderer2(delegate) {
        this.delegate = delegate;
        this.data = this.delegate.data;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.destroyNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));
        if (this.delegate.destroyNode) {
            this.delegate.destroyNode(node);
        }
    };
    /**
     * @return {?}
     */
    DebugRenderer2.prototype.destroy = /**
     * @return {?}
     */
    function () { this.delegate.destroy(); };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.createElement = /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (name, namespace) {
        var /** @type {?} */ el = this.delegate.createElement(name, namespace);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
            debugEl.name = name;
            indexDebugNode(debugEl);
        }
        return el;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.createComment = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ comment = this.delegate.createComment(value);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugNode(comment, null, debugCtx));
        }
        return comment;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.createText = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ text = this.delegate.createText(value);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugNode(text, null, debugCtx));
        }
        return text;
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    DebugRenderer2.prototype.appendChild = /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    function (parent, newChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.addChild(debugChildEl);
        }
        this.delegate.appendChild(parent, newChild);
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    DebugRenderer2.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    function (parent, newChild, refChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
        var /** @type {?} */ debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.insertBefore(debugRefEl, debugChildEl);
        }
        this.delegate.insertBefore(parent, newChild, refChild);
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    DebugRenderer2.prototype.removeChild = /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    function (parent, oldChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.removeChild(debugChildEl);
        }
        this.delegate.removeChild(parent, oldChild);
    };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    DebugRenderer2.prototype.selectRootElement = /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    function (selectorOrNode) {
        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugElement(el, null, debugCtx));
        }
        return el;
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.setAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, value, namespace) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = value;
        }
        this.delegate.setAttribute(el, name, value, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.removeAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, namespace) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = null;
        }
        this.delegate.removeAttribute(el, name, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DebugRenderer2.prototype.addClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.classes[name] = true;
        }
        this.delegate.addClass(el, name);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DebugRenderer2.prototype.removeClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.classes[name] = false;
        }
        this.delegate.removeClass(el, name);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    DebugRenderer2.prototype.setStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    function (el, style, value, flags) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.styles[style] = value;
        }
        this.delegate.setStyle(el, style, value, flags);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    DebugRenderer2.prototype.removeStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    function (el, style, flags) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.styles[style] = null;
        }
        this.delegate.removeStyle(el, style, flags);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.properties[name] = value;
        }
        this.delegate.setProperty(el, name, value);
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    DebugRenderer2.prototype.listen = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (target, eventName, callback) {
        if (typeof target !== 'string') {
            var /** @type {?} */ debugEl = getDebugNode(target);
            if (debugEl) {
                debugEl.listeners.push(new EventListener(eventName, callback));
            }
        }
        return this.delegate.listen(target, eventName, callback);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.parentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return this.delegate.parentNode(node); };
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.nextSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return this.delegate.nextSibling(node); };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.setValue = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) { return this.delegate.setValue(node, value); };
    return DebugRenderer2;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} override
 * @return {?}
 */
function overrideProvider(override) {
    initServicesIfNeeded();
    return Services.overrideProvider(override);
}
/**
 * @param {?} comp
 * @param {?} componentFactory
 * @return {?}
 */
function overrideComponentView(comp, componentFactory) {
    initServicesIfNeeded();
    return Services.overrideComponentView(comp, componentFactory);
}
/**
 * @return {?}
 */
function clearOverrides() {
    initServicesIfNeeded();
    return Services.clearOverrides();
}
/**
 * @param {?} ngModuleType
 * @param {?} bootstrapComponents
 * @param {?} defFactory
 * @return {?}
 */
function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
}
var NgModuleFactory_ = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["b" /* __extends */])(NgModuleFactory_, _super);
    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
        var _this = 
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _super.call(this) || this;
        _this.moduleType = moduleType;
        _this._bootstrapComponents = _bootstrapComponents;
        _this._ngModuleDefFactory = _ngModuleDefFactory;
        return _this;
    }
    /**
     * @param {?} parentInjector
     * @return {?}
     */
    NgModuleFactory_.prototype.create = /**
     * @param {?} parentInjector
     * @return {?}
     */
    function (parentInjector) {
        initServicesIfNeeded();
        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);
        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
    };
    return NgModuleFactory_;
}(NgModuleFactory));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// The functions in this file verify that the assumptions we are making
// about state in an instruction are correct before implementing any logic.
// They are meant only to be called in dev mode as sanity checks.
/**
 * Stringifies values such that strings are wrapped in explicit quotation marks and
 * other types are stringified normally. Used in error messages (e.g. assertThrow)
 * to make it clear that certain values are of the string type when comparing.
 *
 * e.g. `expected "3" to be 3` is easier to understand than `expected 3 to be 3`.
 *
 * @param {?} value The value to be stringified
 * @return {?} The stringified value
 */
function stringifyValueForError(value) {
    return typeof value === 'string' ? "\"" + value + "\"" : '' + value;
}
/**
 * @param {?} actual
 * @param {?} name
 * @return {?}
 */

/**
 * @template T
 * @param {?} actual
 * @param {?} expected
 * @param {?} name
 * @param {?=} serializer
 * @return {?}
 */
function assertEqual(actual, expected, name, serializer) {
    (actual != expected) && assertThrow(actual, expected, name, '==', serializer);
}
/**
 * @template T
 * @param {?} actual
 * @param {?} expected
 * @param {?} name
 * @return {?}
 */
function assertLessThan(actual, expected, name) {
    (actual < expected) && assertThrow(actual, expected, name, '>');
}
/**
 * @template T
 * @param {?} actual
 * @param {?} name
 * @return {?}
 */
function assertNotNull(actual, name) {
    assertNotEqual(actual, null, name);
}
/**
 * @template T
 * @param {?} actual
 * @param {?} expected
 * @param {?} name
 * @return {?}
 */
function assertNotEqual(actual, expected, name) {
    (actual == expected) && assertThrow(actual, expected, name, '!=');
}
/**
 * Throws an error with a message constructed from the arguments.
 *
 * @template T
 * @param {?} actual The actual value (e.g. 3)
 * @param {?} expected The expected value (e.g. 5)
 * @param {?} name The name of the value being checked (e.g. attrs.length)
 * @param {?} operator The comparison operator (e.g. <, >, ==)
 * @param {?=} serializer Function that maps a value to its display value
 * @return {?}
 */
function assertThrow(actual, expected, name, operator, serializer) {
    if (serializer === void 0) { serializer = stringifyValueForError; }
    throw new Error("ASSERT: expected " + name + " " + operator + " " + serializer(expected) + " but was " + serializer(actual) + "!");
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
if (typeof ngDevMode == 'undefined') {
    if (typeof window != 'undefined')
        (/** @type {?} */ (window)).ngDevMode = true;
    if (typeof self != 'undefined')
        (/** @type {?} */ (self)).ngDevMode = true;
    if (typeof global != 'undefined')
        (/** @type {?} */ (global)).ngDevMode = true;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} node
 * @param {?} type
 * @return {?}
 */
function assertNodeType(node, type) {
    assertNotEqual(node, null, 'node');
    assertEqual(node.flags & 3 /* TYPE_MASK */, type, 'Node.type', typeSerializer);
}
/**
 * @param {?} node
 * @param {...?} types
 * @return {?}
 */

/**
 * @param {?} type
 * @return {?}
 */
function typeSerializer(type) {
    if (type == 1 /* Projection */)
        return 'Projection';
    if (type == 0 /* Container */)
        return 'Container';
    if (type == 2 /* View */)
        return 'View';
    if (type == 3 /* Element */)
        return 'Element';
    return '??? ' + type + ' ???';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Finds the closest DOM node above a given container in the hierarchy.
 *
 * This is necessary to add or remove elements from the DOM when a view
 * is added or removed from the container. e.g. parent.removeChild(...)
 *
 * @param {?} containerNode The container node whose parent must be found
 * @return {?} Closest DOM node above the container
 */
function findNativeParent(containerNode) {
    var /** @type {?} */ container = containerNode;
    while (container) {
        ngDevMode && assertNodeType(container, 0 /* Container */);
        var /** @type {?} */ renderParent = container.data.renderParent;
        if (renderParent !== null) {
            return renderParent.native;
        }
        var /** @type {?} */ viewOrElement = /** @type {?} */ ((container.parent));
        ngDevMode && assertNotNull(viewOrElement, 'container.parent');
        if ((viewOrElement.flags & 3 /* TYPE_MASK */) === 3 /* Element */) {
            // we are an LElement, which means we are past the last LContainer.
            // This means than we have not been projected so just ignore.
            return null;
        }
        ngDevMode && assertNodeType(viewOrElement, 2 /* View */);
        container = (/** @type {?} */ (viewOrElement)).parent;
    }
    return null;
}
/**
 * Finds the DOM element before which a certain view should be inserting its
 * child elements.
 *
 * If the view has a next (e.g. for loop), elements should be inserted before
 * the next view's first child element. Otherwise, the container's comment
 * anchor is the marker.
 *
 * @param {?} index The index of the view to check
 * @param {?} state ContainerState of the parent container
 * @param {?} native Comment anchor for container
 * @return {?} The DOM element for which the view should insert elements
 */
function findBeforeNode(index, state, native) {
    var /** @type {?} */ views = state.views;
    // Find the node to insert in front of
    return index + 1 < views.length ?
        (/** @type {?} */ (views[index + 1].child)).native :
        native;
}
/**
 * @param {?} container
 * @param {?} rootNode
 * @param {?} insertMode
 * @param {?=} beforeNode
 * @return {?}
 */
function addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {
    ngDevMode && assertNodeType(container, 0 /* Container */);
    ngDevMode && assertNodeType(rootNode, 2 /* View */);
    var /** @type {?} */ parent = findNativeParent(container);
    var /** @type {?} */ node = rootNode.child;
    if (parent) {
        while (node) {
            var /** @type {?} */ type = node.flags & 3;
            var /** @type {?} */ nextNode = null;
            var /** @type {?} */ renderer = container.view.renderer;
            var /** @type {?} */ isFnRenderer = (/** @type {?} */ (renderer)).listen;
            if (type === 3 /* Element */) {
                insertMode ? (isFnRenderer ? /** @type {?} */ (((/** @type {?} */ (renderer))
                    .insertBefore))(parent, /** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode)) :
                    parent.insertBefore(/** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode), true)) :
                    (isFnRenderer ? /** @type {?} */ (((/** @type {?} */ (renderer))
                        .removeChild))(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :
                        parent.removeChild(/** @type {?} */ ((node.native))));
                nextNode = node.next;
            }
            else if (type === 0 /* Container */) {
                // if we get to a container, it must be a root node of a view because we are only
                // propagating down into child views / containers and not child elements
                var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;
                insertMode ? (isFnRenderer ? /** @type {?} */ (((/** @type {?} */ (renderer))
                    .appendChild))(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :
                    parent.appendChild(/** @type {?} */ ((node.native)))) :
                    (isFnRenderer ? /** @type {?} */ (((/** @type {?} */ (renderer))
                        .removeChild))(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :
                        parent.removeChild(/** @type {?} */ ((node.native))));
                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;
            }
            else if (type === 1 /* Projection */) {
                nextNode = (/** @type {?} */ (node)).data[0];
            }
            else {
                nextNode = (/** @type {?} */ (node)).child;
            }
            if (nextNode === null) {
                while (node && !node.next) {
                    node = node.parent;
                    if (node === rootNode)
                        node = null;
                }
                node = node && node.next;
            }
            else {
                node = nextNode;
            }
        }
    }
}
/**
 * Traverses the tree of component views and containers to remove listeners and
 * call onDestroy callbacks.
 *
 * Notes:
 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
 *  - Must process containers instead of their views to avoid splicing
 *  when views are destroyed and re-added.
 *  - Using a while loop because it's faster than recursion
 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
 *
 *  \@param rootView The view to destroy
 * @param {?} rootView
 * @return {?}
 */
function destroyViewTree(rootView) {
    var /** @type {?} */ viewOrContainerState = rootView;
    while (viewOrContainerState) {
        var /** @type {?} */ next = null;
        if (viewOrContainerState.views && viewOrContainerState.views.length) {
            next = viewOrContainerState.views[0].data;
        }
        else if (viewOrContainerState.child) {
            next = viewOrContainerState.child;
        }
        else if (viewOrContainerState.next) {
            cleanUpView(/** @type {?} */ (viewOrContainerState));
            next = viewOrContainerState.next;
        }
        if (next == null) {
            while (viewOrContainerState && !/** @type {?} */ ((viewOrContainerState)).next) {
                cleanUpView(/** @type {?} */ (viewOrContainerState));
                viewOrContainerState = getParentState(viewOrContainerState, rootView);
            }
            cleanUpView(/** @type {?} */ (viewOrContainerState) || rootView);
            next = viewOrContainerState && viewOrContainerState.next;
        }
        viewOrContainerState = next;
    }
}
/**
 * Inserts a view into a container.
 *
 * This adds the view to the container's array of active views in the correct
 * position. It also adds the view's elements to the DOM if the container isn't a
 * root node of another view (in that case, the view's elements will be added when
 * the container's parent view is added later).
 *
 * @param {?} container The container into which the view should be inserted
 * @param {?} newView The view to insert
 * @param {?} index The index at which to insert the view
 * @return {?} The inserted view
 */
function insertView(container, newView, index) {
    var /** @type {?} */ state = container.data;
    var /** @type {?} */ views = state.views;
    if (index > 0) {
        // This is a new view, we need to add it to the children.
        setViewNext(views[index - 1], newView);
    }
    if (index < views.length && views[index].data.id !== newView.data.id) {
        // View ID change replace the view.
        setViewNext(newView, views[index]);
        views.splice(index, 0, newView);
    }
    else if (index >= views.length) {
        views.push(newView);
    }
    if (state.nextIndex <= index) {
        state.nextIndex++;
    }
    // If the container's renderParent is null, we know that it is a root node of its own parent view
    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's
    // nodes twice - once now and once when its parent inserts its views).
    if (container.data.renderParent !== null) {
        addRemoveViewFromContainer(container, newView, true, findBeforeNode(index, state, container.native));
    }
    // Notify query that view has been inserted
    container.query && container.query.insertView(container, newView, index);
    return newView;
}
/**
 * Removes a view from a container.
 *
 * This method splices the view from the container's array of active views. It also
 * removes the view's elements from the DOM and conducts cleanup (e.g. removing
 * listeners, calling onDestroys).
 *
 * @param {?} container The container from which to remove a view
 * @param {?} removeIndex The index of the view to remove
 * @return {?} The removed view
 */
function removeView(container, removeIndex) {
    var /** @type {?} */ views = container.data.views;
    var /** @type {?} */ viewNode = views[removeIndex];
    if (removeIndex > 0) {
        setViewNext(views[removeIndex - 1], viewNode.next);
    }
    views.splice(removeIndex, 1);
    destroyViewTree(viewNode.data);
    addRemoveViewFromContainer(container, viewNode, false);
    // Notify query that view has been removed
    container.query && container.query.removeView(container, viewNode, removeIndex);
    return viewNode;
}
/**
 * Sets a next on the view node, so views in for loops can easily jump from
 * one view to the next to add/remove elements. Also adds the ViewState (view.data)
 * to the view tree for easy traversal when cleaning up the view.
 *
 * @param {?} view The view to set up
 * @param {?} next The view's new next
 * @return {?}
 */
function setViewNext(view, next) {
    view.next = next;
    view.data.next = next ? next.data : null;
}
/**
 * Determines which ViewOrContainerState to jump to when traversing back up the
 * tree in destroyViewTree.
 *
 * Normally, the view's parent ViewState should be checked, but in the case of
 * embedded views, the container (which is the view node's parent, but not the
 * ViewState's parent) needs to be checked for a possible next property.
 *
 * @param {?} state The ViewOrContainerState for which we need a parent state
 * @param {?} rootView The rootView, so we don't propagate too far up the view tree
 * @return {?} The correct parent ViewOrContainerState
 */
function getParentState(state, rootView) {
    var /** @type {?} */ node;
    if ((node = /** @type {?} */ (((/** @type {?} */ (state)))).node) &&
        (node.flags & 3 /* TYPE_MASK */) === 2 /* View */) {
        // if it's an embedded view, the state needs to go up to the container, in case the
        // container has a next
        return /** @type {?} */ (((node.parent)).data);
    }
    else {
        // otherwise, use parent view for containers or component views
        return state.parent === rootView ? null : state.parent;
    }
}
/**
 * Removes all listeners and call all onDestroys in a given view.
 *
 * @param {?} viewState The ViewState of the view to clean up
 * @return {?}
 */
function cleanUpView(viewState) {
    if (!viewState.cleanup)
        return;
    var /** @type {?} */ cleanup = /** @type {?} */ ((viewState.cleanup));
    for (var /** @type {?} */ i = 0; i < cleanup.length - 1; i += 2) {
        if (typeof cleanup[i] === 'string') {
            /** @type {?} */ ((cleanup))[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);
            i += 2;
        }
        else {
            cleanup[i].call(cleanup[i + 1]);
        }
    }
    viewState.cleanup = null;
}
/**
 * Appends the provided child element to the provided parent, if appropriate.
 *
 * If the parent is a view, the element will be appended as part of viewEnd(), so
 * the element should not be appended now. Similarly, if the child is a content child
 * of a parent component, the child will be appended to the right position later by
 * the content projection system. Otherwise, append normally.
 *
 * @param {?} parent The parent to which to append the child
 * @param {?} child The child that should be appended
 * @param {?} currentView The current view's ViewState
 * @return {?} Whether or not the child was appended
 */
function appendChild(parent, child, currentView) {
    // Only add native child element to parent element if the parent element is regular Element.
    // If parent is:
    // - Regular element => add child
    // - Component host element =>
    //    - Current View, and parent view same => content => don't add -> parent component will
    //    re-project if needed.
    //    - Current View, and parent view different => view => add Child
    // - View element => View's get added separately.
    if (child !== null && (parent.flags & 3 /* TYPE_MASK */) === 3 /* Element */ &&
        (parent.view !==
            currentView /* Crossing View Boundaries, it is Component, but add Element of View */
            || parent.data === null /* Regular Element. */)) {
        // We only add element if not in View or not projected.
        var /** @type {?} */ renderer = currentView.renderer;
        (/** @type {?} */ (renderer)).listen ? /** @type {?} */ (((/** @type {?} */ (renderer)).appendChild))(/** @type {?} */ (((parent.native))), child) : /** @type {?} */ ((parent.native)).appendChild(child);
        return true;
    }
    return false;
}
/**
 * Inserts the provided node before the correct element in the DOM, if appropriate.
 *
 * If the parent is a view, the element will be inserted as part of viewEnd(), so
 * the element should not be inserted now. Similarly, if the child is a content child
 * of a parent component, the child will be inserted to the right position later by
 * the content projection system. Otherwise, insertBefore normally.
 *
 * @param {?} node Node to insert
 * @param {?} currentView The current view's ViewState
 * @return {?}
 */
function insertChild(node, currentView) {
    var /** @type {?} */ parent = /** @type {?} */ ((node.parent));
    // Only add child element to parent element if the parent element is regular Element.
    // If parent is:
    // - Normal element => add child
    // - Component element =>
    //    - Current View, and parent view same => content don't add -> parent component will
    //    re-project if needed.
    //    - Current View, and parent view different => view => add Child
    // - View element => View's get added separately.
    if ((parent.flags & 3 /* TYPE_MASK */) === 3 /* Element */ &&
        (parent.view !==
            currentView /* Crossing View Boundaries, its Component, but add Element of View */
            || parent.data === null /* Regular Element. */)) {
        // We only add element if not in View or not projected.
        var /** @type {?} */ sibling = node.next;
        var /** @type {?} */ nativeSibling = null;
        while (sibling && (nativeSibling = sibling.native) === null) {
            sibling = sibling.next;
        }
        var /** @type {?} */ renderer = currentView.renderer;
        (/** @type {?} */ (renderer)).listen ? /** @type {?} */ (((/** @type {?} */ (renderer))
            .insertBefore))(/** @type {?} */ ((parent.native)), /** @type {?} */ ((node.native)), nativeSibling) : /** @type {?} */ ((parent.native)).insertBefore(/** @type {?} */ ((node.native)), nativeSibling, false);
    }
}
/**
 * Appends a projected node to the DOM, or in the case of a projected container,
 * appends the nodes from all of the container's active views to the DOM. Also stores the
 * node in the given projectedNodes array.
 *
 * @param {?} projectedNodes Array to store the projected node
 * @param {?} node The node to process
 * @param {?} currentParent The last parent element to be processed
 * @param {?} currentView The current view's ViewState
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A utility function to match an Ivy node static data against a simple CSS selector
 *
 * @param {?} lNodeStaticData
 * @param {?} selector
 * @return {?} true if node matches the selector.
 */

/**
 * @param {?} lNodeStaticData
 * @param {?} selector
 * @return {?}
 */

/**
 * @param {?} lNodeStaticData
 * @param {?} selector
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Must use this method for CD (instead of === ) since NaN !== NaN
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function isDifferent(a, b) {
    // NaN is the only value that is not equal to itself so the first
    // test checks if both a and b are not NaN
    return !(a !== a && b !== b) && a !== b;
}
/**
 * @param {?} value
 * @return {?}
 */
function stringify$1(value) {
    if (typeof value == 'function')
        return value.name || value;
    if (typeof value == 'string')
        return value;
    if (value == null)
        return '';
    return '' + value;
}
/**
 *  Function that throws a "not implemented" error so it's clear certain
 *  behaviors/methods aren't yet ready.
 *
 * @return {?} Not implemented error
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as
 * the key and the directive's unique ID as the value. This allows us to map directives to their
 * bloom filter bit for DI.
 */
var NG_ELEMENT_ID = '__NG_ELEMENT_ID__';
/**
 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
 * directives that will share slots, and thus, the fewer false positives when checking for
 * the existence of a directive.
 */
var BLOOM_SIZE = 128;
/**
 * Registers this directive as present in its node's injector by flipping the directive's
 * corresponding bit in the injector's bloom filter.
 *
 * @param {?} injector The node injector in which the directive should be registered
 * @param {?} type The directive to register
 * @return {?}
 */

/**
 * Creates (or gets an existing) injector for a given element or container.
 *
 * @param {?} node for which an injector should be retrieved / created.
 * @return {?} Node injector
 */

/**
 * Constructs an injection error with the given text and token.
 *
 * @param {?} text The text of the error
 * @param {?} token The token associated with the error
 * @return {?} The error that was created
 */
function createInjectionError(text, token) {
    return new Error("ElementInjector: " + text + " [" + stringify$1(token) + "]");
}
/**
 * Makes a directive public to the DI system by adding it to an injector's bloom filter.
 *
 * @param {?} di The node injector in which a directive will be added
 * @param {?} def The definition of the directive to be made public
 * @return {?}
 */

/**
 * Searches for an instance of the given directive type up the injector tree and returns
 * that instance if found.
 *
 * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),
 * checks that bit against the bloom filter structure to identify an injector that might have
 * the directive (see bloomFindPossibleInjector), then searches the directives on that injector
 * for a match.
 *
 * If not found, it will propagate up to the next parent injector until the token
 * is found or the top is reached.
 *
 * @template T
 * @param {?} di Node injector where the search should start
 * @param {?} token The directive type to search for
 * @param {?=} flags Injection flags (e.g. CheckParent)
 * @return {?} The instance found
 */

/**
 * Given a directive type, this function returns the bit in an injector's bloom filter
 * that should be used to determine whether or not the directive is present.
 *
 * When the directive was added to the bloom filter, it was given a unique ID that can be
 * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's
 * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after
 * BLOOM_SIZE is reached).
 *
 * @param {?} type The directive type
 * @return {?} The bloom bit to check for the directive
 */
function bloomHashBit(type) {
    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];
    return typeof id === 'number' ? id % BLOOM_SIZE : null;
}
/**
 * Finds the closest injector that might have a certain directive.
 *
 * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to
 * check and a starting injector, this function traverses up injectors until it finds an
 * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the
 * injector may have that directive. It only *may* have the directive because directives begin
 * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a
 * different directive sharing the bit.
 *
 * Note: We can skip checking further injectors up the tree if an injector's cbf structure
 * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent
 * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain
 * the directive and do not need to be checked.
 *
 * @param {?} startInjector
 * @param {?} bloomBit The bit to check in each injector's bloom filter
 * @return {?} An injector that might have the directive
 */
function bloomFindPossibleInjector(startInjector, bloomBit) {
    // Create a mask that targets the specific bit associated with the directive we're looking for.
    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
    // to bit positions 0 - 31 in a 32 bit integer.
    var /** @type {?} */ mask = 1 << bloomBit;
    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a
    // match.
    var /** @type {?} */ injector = startInjector;
    while (injector) {
        // Our bloom filter size is 128 bits, which is four 32-bit bloom filter buckets:
        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127]
        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.
        var /** @type {?} */ value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :
            (bloomBit < 96 ? injector.bf2 : injector.bf3);
        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
        // this injector is a potential match.
        if ((value & mask) === mask) {
            return injector;
        }
        // If the current injector does not have the directive, check the bloom filters for the ancestor
        // injectors (cbf0 - cbf3). These filters capture *all* ancestor injectors.
        value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :
            (bloomBit < 96 ? injector.cbf2 : injector.cbf3);
        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to
        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.
        injector = (value & mask) ? injector.parent : null;
    }
    return null;
}
/**
 * Creates an ElementRef for a given node injector and stores it on the injector.
 * Or, if the ElementRef already exists, retrieves the existing ElementRef.
 *
 * @param {?} di The node injector where we should store a created ElementRef
 * @return {?} The ElementRef instance to use
 */

/**
 * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
 * exists, retrieves the existing TemplateRef.
 *
 * @template T
 * @param {?} di The node injector where we should store a created TemplateRef
 * @return {?} The TemplateRef instance to use
 */

/**
 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
 * already exists, retrieves the existing ViewContainerRef.
 *
 * @param {?} di
 * @return {?} The ViewContainerRef instance to use
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A predicate which determines if a given element/directive should be included in the query
 * @record
 * @template T
 */

/**
 * @template T
 */
var QueryList_ = /** @class */ (function () {
    function QueryList_() {
        this.dirty = false;
        /**
         * \@internal
         */
        this._valuesTree = null;
        /**
         * \@internal
         */
        this._values = null;
    }
    Object.defineProperty(QueryList_.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            ngDevMode && assertNotNull(this._values, 'refreshed');
            return /** @type {?} */ ((this._values)).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList_.prototype, "first", {
        get: /**
         * @return {?}
         */
        function () {
            ngDevMode && assertNotNull(this._values, 'refreshed');
            var /** @type {?} */ values = /** @type {?} */ ((this._values));
            return values.length ? values[0] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList_.prototype, "last", {
        get: /**
         * @return {?}
         */
        function () {
            ngDevMode && assertNotNull(this._values, 'refreshed');
            var /** @type {?} */ values = /** @type {?} */ ((this._values));
            return values.length ? values[values.length - 1] : null;
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    QueryList_.prototype._refresh = /**
     * \@internal
     * @return {?}
     */
    function () {
        // TODO(misko): needs more logic to flatten tree.
        if (this._values === null) {
            this._values = this._valuesTree;
            return true;
        }
        return false;
    };
    /**
     * @template U
     * @param {?} fn
     * @return {?}
     */
    QueryList_.prototype.map = /**
     * @template U
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QueryList_.prototype.filter = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QueryList_.prototype.find = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        throw new Error('Method not implemented.');
    };
    /**
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    QueryList_.prototype.reduce = /**
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    function (fn, init) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QueryList_.prototype.forEach = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QueryList_.prototype.some = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        throw new Error('Method not implemented.');
    };
    /**
     * @return {?}
     */
    QueryList_.prototype.toArray = /**
     * @return {?}
     */
    function () {
        ngDevMode && assertNotNull(this._values, 'refreshed');
        return /** @type {?} */ ((this._values));
    };
    /**
     * @return {?}
     */
    QueryList_.prototype.toString = /**
     * @return {?}
     */
    function () { throw new Error('Method not implemented.'); };
    /**
     * @param {?} res
     * @return {?}
     */
    QueryList_.prototype.reset = /**
     * @param {?} res
     * @return {?}
     */
    function (res) { throw new Error('Method not implemented.'); };
    /**
     * @return {?}
     */
    QueryList_.prototype.notifyOnChanges = /**
     * @return {?}
     */
    function () { throw new Error('Method not implemented.'); };
    /**
     * @return {?}
     */
    QueryList_.prototype.setDirty = /**
     * @return {?}
     */
    function () { throw new Error('Method not implemented.'); };
    /**
     * @return {?}
     */
    QueryList_.prototype.destroy = /**
     * @return {?}
     */
    function () { throw new Error('Method not implemented.'); };
    return QueryList_;
}());

/**
 * @param {?} query
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var RendererStyleFlags3 = {
    Important: 1,
    DashCase: 2,
};
RendererStyleFlags3[RendererStyleFlags3.Important] = "Important";
RendererStyleFlags3[RendererStyleFlags3.DashCase] = "DashCase";
/**
 * Object Oriented style of API needed to create elements and text nodes.
 *
 * This is the native browser API style, e.g. operations are methods on individual objects
 * like HTMLElement. With this style, no additional code is needed as a facade
 * (reducing payload size).
 *
 * @record
 */

/**
 * Procedural style of API needed to create elements and text nodes.
 *
 * In non-native browser environments (e.g. platforms such as web-workers), this is the
 * facade that enables element manipulation. This also facilitates backwards compatibility
 * with Renderer2.
 * @record
 */

/**
 * @record
 */

var domRendererFactory3 = {
    createRenderer: function (hostElement, rendererType) { return document; }
};
/**
 * Subset of API needed for appending elements and text nodes.
 * @record
 */

/**
 * Subset of API needed for writing attributes, properties, and setting up
 * listeners on Element.
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive (D) sets a property on all component instances using this constant as a key and the
 * component's host node (LElement) as the value. This is used in methods like detectChanges to
 * facilitate jumping from an instance to the host node.
 */
var NG_HOST_SYMBOL = '__ngHostLNode__';
/**
 * This property gets set before entering a template.
 *
 * This renderer can be one of two varieties of Renderer3:
 *
 * - ObjectedOrientedRenderer3
 *
 * This is the native browser API style, e.g. operations are methods on individual objects
 * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload
 * size).
 *
 * - ProceduralRenderer3
 *
 * In non-native browser environments (e.g. platforms such as web-workers), this is the facade
 * that enables element manipulation. This also facilitates backwards compatibility with
 * Renderer2.
 */
var renderer;
var rendererFactory;
/**
 * Used to set the parent property when nodes are created.
 */
var previousOrParentNode;
/**
 * If `isParent` is:
 *  - `true`: then `previousOrParentNode` points to a parent node.
 *  - `false`: then `previousOrParentNode` points to previous node (sibling).
 */
var isParent;
/**
 * The current template's static data (shared between all templates of a
 * given type).
 *
 * Each node's static data is stored at the same index that it's stored
 * in the data array. Any nodes that do not have static data store a null
 * value to avoid a sparse array.
 */
var ngStaticData;
/**
 * State of the current view being processed.
 */
var currentView;
// The initialization has to be after the `let`, otherwise `createViewState` can't see `let`.
currentView = createViewState(/** @type {?} */ ((null)), /** @type {?} */ ((null)), []);
var currentQuery;
/**
 * This property gets set before entering a template.
 */
var creationMode;
/**
 * An array of nodes (text, element, container, etc), their bindings, and
 * any local variables that need to be stored between invocations.
 */
var data;
/**
 * Points to the next binding index to read or write to.
 */
var bindingIndex;
/**
 * When a view is destroyed, listeners need to be released
 * and onDestroy callbacks need to be called. This cleanup array
 * stores both listener data (in chunks of 4) and onDestroy data
 * (in chunks of 2), as they'll be processed at the same time.
 *
 * If it's a listener being stored:
 * 1st index is: event name to remove
 * 2nd index is: native element
 * 3rd index is: listener function
 * 4th index is: useCapture boolean
 *
 * If it's an onDestroy function:
 * 1st index is: onDestroy function
 * 2nd index is: context for function
 */
var cleanup;
/**
 * Index in the data array at which view hooks begin to be stored.
 */
var viewHookStartIndex;
/**
 * Swap the current state with a new state.
 *
 * For performance reasons we store the state in the top level of the module.
 * This way we minimize the number of properties to read. Whenever a new view
 * is entered we have to store the state for later, and when the view is
 * exited the state has to be restored
 *
 * @param {?} newViewState New state to become active
 * @param {?} host Element to which the View is a child of
 * @return {?} the previous state;
 */
function enterView(newViewState, host) {
    var /** @type {?} */ oldViewState = currentView;
    data = newViewState.data;
    bindingIndex = newViewState.bindingStartIndex || 0;
    ngStaticData = newViewState.ngStaticData;
    creationMode = newViewState.creationMode;
    viewHookStartIndex = newViewState.viewHookStartIndex;
    cleanup = newViewState.cleanup;
    renderer = newViewState.renderer;
    if (host != null) {
        previousOrParentNode = host;
        isParent = true;
    }
    currentView = newViewState;
    return /** @type {?} */ ((oldViewState));
}
/**
 * Used in lieu of enterView to make it clear when we are exiting a child view. This makes
 * the direction of traversal (up or down the view tree) a bit clearer.
 * @param {?} newViewState
 * @return {?}
 */
function leaveView(newViewState) {
    executeViewHooks();
    enterView(newViewState, null);
}
/**
 * @param {?} viewId
 * @param {?} renderer
 * @param {?} ngStaticData
 * @return {?}
 */
function createViewState(viewId, renderer, ngStaticData) {
    var /** @type {?} */ newView = {
        parent: currentView,
        id: viewId,
        // -1 for component views
        node: /** @type {?} */ ((null)),
        // until we initialize it in createNode.
        data: [],
        ngStaticData: ngStaticData,
        cleanup: null,
        renderer: renderer,
        child: null,
        tail: null,
        next: null,
        bindingStartIndex: null,
        creationMode: true,
        viewHookStartIndex: null
    };
    return newView;
}
/**
 * @param {?} index
 * @param {?} type
 * @param {?} native
 * @param {?=} state
 * @return {?}
 */
function createLNode(index, type, native, state) {
    var /** @type {?} */ parent = isParent ? previousOrParentNode :
        previousOrParentNode && /** @type {?} */ (previousOrParentNode.parent);
    var /** @type {?} */ query = (isParent ? currentQuery : previousOrParentNode && previousOrParentNode.query) ||
        parent && parent.query && parent.query.child();
    var /** @type {?} */ isState = state != null;
    var /** @type {?} */ node = {
        flags: type,
        native: /** @type {?} */ (native),
        view: currentView,
        parent: /** @type {?} */ (parent),
        child: null,
        next: null,
        nodeInjector: parent ? parent.nodeInjector : null,
        data: isState ? /** @type {?} */ (state) : null,
        query: query,
        staticData: null
    };
    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {
        // Bit of a hack to bust through the readonly because there is a circular dep between
        // ViewState and LNode.
        ngDevMode && assertEqual((/** @type {?} */ (state)).node, null, 'viewState.node');
        (/** @type {?} */ ((state))).node = node;
    }
    if (index != null) {
        // We are Element or Container
        ngDevMode && assertEqual(data.length, index, 'data.length not in sequence');
        data[index] = node;
        // Every node adds a value to the static data array to avoid a sparse array
        if (index >= ngStaticData.length) {
            ngStaticData[index] = null;
        }
        else {
            node.staticData = /** @type {?} */ (ngStaticData[index]);
        }
        // Now link ourselves into the tree.
        if (isParent) {
            currentQuery = null;
            if (previousOrParentNode.view === currentView ||
                (previousOrParentNode.flags & 3 /* TYPE_MASK */) === 2 /* View */) {
                // We are in the same view, which means we are adding content node to the parent View.
                ngDevMode && assertEqual(previousOrParentNode.child, null, 'previousNode.child');
                previousOrParentNode.child = node;
            }
            else {
                // We are adding component view, so we don't link parent node child to this node.
            }
        }
        else if (previousOrParentNode) {
            ngDevMode && assertEqual(previousOrParentNode.next, null, 'previousNode.next');
            previousOrParentNode.next = node;
        }
    }
    previousOrParentNode = node;
    isParent = true;
    return node;
}
/**
 * Resets the application state.
 * @return {?}
 */
function resetApplicationState() {
    isParent = false;
    previousOrParentNode = /** @type {?} */ ((null));
}
/**
 *
 * @template T
 * @param {?} hostNode
 * @param {?} template Template function with the instructions.
 * @param {?} context to pass into the template.
 * @param {?} providedRendererFactory
 * @param {?} host Existing node to render into.
 * @return {?}
 */

/**
 * @template T
 * @param {?} node
 * @param {?} viewState
 * @param {?} componentOrContext
 * @param {?=} template
 * @return {?}
 */
function renderComponentOrTemplate(node, viewState, componentOrContext, template) {
    var /** @type {?} */ oldView = enterView(viewState, node);
    try {
        if (rendererFactory.begin) {
            rendererFactory.begin();
        }
        if (template) {
            ngStaticData = template.ngStaticData || (template.ngStaticData = /** @type {?} */ ([]));
            template(/** @type {?} */ ((componentOrContext)), creationMode);
        }
        else {
            // Element was stored at 0 and directive was stored at 1 in renderComponent
            // so to refresh the component, r() needs to be called with (1, 0)
            (/** @type {?} */ (componentOrContext.constructor)).ngComponentDef.r(1, 0);
        }
    }
    finally {
        if (rendererFactory.end) {
            rendererFactory.end();
        }
        viewState.creationMode = false;
        leaveView(oldView);
    }
}
/**
 * @return {?}
 */

/**
 * Makes a directive public to the DI system by adding it to an injector's bloom filter.
 *
 * @param {?} def The definition of the directive to be made public
 * @return {?}
 */

/**
 * Searches for an instance of the given directive type up the injector tree and returns
 * that instance if found.
 *
 * If not found, it will propagate up to the next parent injector until the token
 * is found or the top is reached.
 *
 * Usage example (in factory function):
 *
 * class SomeDirective {
 *   constructor(directive: DirectiveA) {}
 *
 *   static ngDirectiveDef = defineDirective({
 *     type: SomeDirective,
 *     factory: () => new SomeDirective(inject(DirectiveA))
 *   });
 * }
 *
 * @template T
 * @param {?} token The directive type to search for
 * @param {?=} flags Injection flags (e.g. CheckParent)
 * @return {?} The instance found
 */

/**
 * Creates an ElementRef and stores it on the injector.
 * Or, if the ElementRef already exists, retrieves the existing ElementRef.
 *
 * @return {?} The ElementRef instance to use
 */

/**
 * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
 * exists, retrieves the existing TemplateRef.
 *
 * @template T
 * @return {?} The TemplateRef instance to use
 */

/**
 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
 * already exists, retrieves the existing ViewContainerRef.
 *
 * @return {?} The ViewContainerRef instance to use
 */

/**
 * Create DOM element. The instruction must later be followed by `elementEnd()` call.
 *
 * @param {?} index Index of the element in the data array
 * @param {?=} nameOrComponentDef Name of the DOM Node or `ComponentDef`.
 * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.
 * @param {?=} localName A name under which a given element is exported.
 *
 * Attributes are passed as an array of strings where elements with an even index hold an attribute
 * name and elements with an odd index hold an attribute value, ex.:
 * ['id', 'warning5', 'class', 'alert']
 * @return {?}
 */
function elementStart(index, nameOrComponentDef, attrs, localName) {
    var /** @type {?} */ node;
    var /** @type {?} */ native;
    if (nameOrComponentDef == null) {
        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)
        var /** @type {?} */ node_1 = /** @type {?} */ ((data[index]));
        native = node_1 && (/** @type {?} */ (node_1)).native;
    }
    else {
        ngDevMode && assertEqual(currentView.bindingStartIndex, null, 'bindingStartIndex');
        var /** @type {?} */ isHostElement = typeof nameOrComponentDef !== 'string';
        var /** @type {?} */ name_1 = isHostElement ? (/** @type {?} */ (nameOrComponentDef)).tag : /** @type {?} */ (nameOrComponentDef);
        if (name_1 === null) {
            // TODO: future support for nameless components.
            throw 'for now name is required';
        }
        else {
            native = renderer.createElement(name_1);
            var /** @type {?} */ componentView = null;
            if (isHostElement) {
                var /** @type {?} */ ngStaticData_1 = getTemplateStatic((/** @type {?} */ (nameOrComponentDef)).template);
                componentView = addToViewTree(createViewState(-1, rendererFactory.createRenderer(native, (/** @type {?} */ (nameOrComponentDef)).rendererType), ngStaticData_1));
            }
            // Only component views should be added to the view tree directly. Embedded views are
            // accessed through their containers because they may be removed / re-added later.
            node = createLNode(index, 3 /* Element */, native, componentView);
            if (node.staticData == null) {
                ngDevMode && assertDataInRange(index - 1);
                node.staticData = ngStaticData[index] =
                    createNodeStatic(name_1, attrs || null, null, localName || null);
            }
            if (attrs)
                setUpAttributes(native, attrs);
            appendChild(/** @type {?} */ ((node.parent)), native, currentView);
        }
    }
    return native;
}
/**
 * Gets static data from a template function or creates a new static
 * data array if it doesn't already exist.
 *
 * @param {?} template The template from which to get static data
 * @return {?} NgStaticData
 */
function getTemplateStatic(template) {
    return template.ngStaticData || (template.ngStaticData = /** @type {?} */ ([]));
}
/**
 * @param {?} native
 * @param {?} attrs
 * @return {?}
 */
function setUpAttributes(native, attrs) {
    ngDevMode && assertEqual(attrs.length % 2, 0, 'attrs.length % 2');
    var /** @type {?} */ isProceduralRenderer = (/** @type {?} */ (renderer)).setAttribute;
    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
        isProceduralRenderer ? /** @type {?} */ (((/** @type {?} */ (renderer)).setAttribute))(native, attrs[i], attrs[i | 1]) :
            native.setAttribute(attrs[i], attrs[i | 1]);
    }
}
/**
 * @param {?} text
 * @param {?} token
 * @return {?}
 */
function createError(text, token) {
    return new Error("Renderer: " + text + " [" + stringify$1(token) + "]");
}
/**
 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
 *
 * @param {?} factory
 * @param {?} elementOrSelector Render element or CSS selector to locate the element.
 * @return {?}
 */
function locateHostElement(factory, elementOrSelector) {
    ngDevMode && assertDataInRange(-1);
    rendererFactory = factory;
    var /** @type {?} */ defaultRenderer = factory.createRenderer(null, null);
    var /** @type {?} */ rNode = typeof elementOrSelector === 'string' ?
        ((/** @type {?} */ (defaultRenderer)).selectRootElement ?
            (/** @type {?} */ (defaultRenderer)).selectRootElement(elementOrSelector) : /** @type {?} */ (((/** @type {?} */ (defaultRenderer)).querySelector))(elementOrSelector)) :
        elementOrSelector;
    if (ngDevMode && !rNode) {
        if (typeof elementOrSelector === 'string') {
            throw createError('Host node with selector not found:', elementOrSelector);
        }
        else {
            throw createError('Host node is required:', elementOrSelector);
        }
    }
    return rNode;
}
/**
 * Creates the host LNode..
 *
 * @param {?} rNode Render host element.
 * @param {?} def
 * @return {?}
 */
function hostElement(rNode, def) {
    resetApplicationState();
    createLNode(0, 3 /* Element */, rNode, createViewState(-1, renderer, getTemplateStatic(def.template)));
}
/**
 * Adds an event listener to the current node.
 *
 * If an output exists on one of the node's directives, it also subscribes to the output
 * and saves the subscription for later cleanup.
 *
 * @param {?} eventName Name of the event
 * @param {?} listener The function to be called when event emits
 * @param {?=} useCapture Whether or not to use capture in event listener.
 * @return {?}
 */

/**
 * Mark the end of the element.
 * @return {?}
 */
function elementEnd() {
    if (isParent) {
        isParent = false;
    }
    else {
        ngDevMode && assertHasParent();
        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));
    }
    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);
    var /** @type {?} */ query = previousOrParentNode.query;
    query && query.addNode(previousOrParentNode);
}
/**
 * Update an attribute on an Element. This is used with a `bind` instruction.
 *
 * @param {?} index The index of the element to update in the data array
 * @param {?} attrName Name of attribute. Because it is going to DOM, this is not subject to
 *        renaming as port of minification.
 * @param {?} value Value to write. This value will go through stringification.
 * @return {?}
 */

/**
 * Update a property on an Element.
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new \@Inputs don't have to be re-compiled.
 *
 * @template T
 * @param {?} index The index of the element to update in the data array
 * @param {?} propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param {?} value New value to write.
 * @return {?}
 */
function elementProperty(index, propName, value) {
    if (value === NO_CHANGE)
        return;
    var /** @type {?} */ node = /** @type {?} */ (data[index]);
    var /** @type {?} */ staticData = /** @type {?} */ ((node.staticData));
    // if staticData.inputs is undefined, a listener has created output staticData, but inputs haven't
    // yet been checked
    if (staticData.inputs === undefined) {
        // mark inputs as checked
        staticData.inputs = null;
        staticData = generatePropertyAliases(node.flags, staticData, true);
    }
    var /** @type {?} */ inputData = staticData.inputs;
    var /** @type {?} */ dataValue;
    if (inputData && (dataValue = inputData[propName])) {
        setInputsForProperty(dataValue, value);
    }
    else {
        var /** @type {?} */ native = node.native;
        (/** @type {?} */ (renderer)).setProperty ?
            (/** @type {?} */ (renderer)).setProperty(native, propName, value) :
            native.setProperty ? native.setProperty(propName, value) :
                (/** @type {?} */ (native))[propName] = value;
    }
}
/**
 * Constructs a LNodeStatic object from the arguments.
 *
 * @param {?} tagName
 * @param {?} attrs
 * @param {?} containerStatic
 * @param {?} localName
 * @return {?} the LNodeStatic object
 */
function createNodeStatic(tagName, attrs, containerStatic, localName) {
    return {
        tagName: tagName,
        attrs: attrs,
        localNames: localName ? [localName, -1] : null,
        initialInputs: undefined,
        inputs: undefined,
        outputs: undefined,
        containerStatic: containerStatic
    };
}
/**
 * Given a list of directive indices and minified input names, sets the
 * input properties on the corresponding directives.
 * @param {?} inputs
 * @param {?} value
 * @return {?}
 */
function setInputsForProperty(inputs, value) {
    for (var /** @type {?} */ i = 0; i < inputs.length; i += 2) {
        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]));
        data[/** @type {?} */ (inputs[i])][inputs[i | 1]] = value;
    }
}
/**
 * This function consolidates all the inputs or outputs defined by directives
 * on this node into one object and stores it in ngStaticData so it can
 * be shared between all templates of this type.
 *
 * @param {?} flags
 * @param {?} data
 * @param {?=} isInputData
 * @return {?}
 */
function generatePropertyAliases(flags, data, isInputData) {
    if (isInputData === void 0) { isInputData = false; }
    var /** @type {?} */ start = flags >> 12;
    var /** @type {?} */ size = (flags & 4092 /* SIZE_MASK */) >> 2;
    for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {
        var /** @type {?} */ directiveDef = /** @type {?} */ (((ngStaticData))[i]);
        var /** @type {?} */ propertyAliasMap = isInputData ? directiveDef.inputs : directiveDef.outputs;
        for (var /** @type {?} */ publicName in propertyAliasMap) {
            if (propertyAliasMap.hasOwnProperty(publicName)) {
                var /** @type {?} */ internalName = propertyAliasMap[publicName];
                var /** @type {?} */ staticDirData = isInputData ? (data.inputs || (data.inputs = {})) :
                    (data.outputs || (data.outputs = {}));
                var /** @type {?} */ hasProperty = staticDirData.hasOwnProperty(publicName);
                hasProperty ? staticDirData[publicName].push(i, internalName) :
                    (staticDirData[publicName] = [i, internalName]);
            }
        }
    }
    return data;
}
/**
 * Add or remove a class in a classList.
 *
 * This instruction is meant to handle the [class.foo]="exp" case
 *
 * @template T
 * @param {?} index The index of the element to update in the data array
 * @param {?} className Name of class to toggle. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param {?} value A value indicating if a given class should be added or removed.
 * @return {?}
 */

/**
 * Update a given style on an Element.
 *
 * @template T
 * @param {?} index Index of the element to change in the data array
 * @param {?} styleName Name of property. Because it is going to DOM this is not subject to
 *        renaming as part of minification.
 * @param {?} value New value to write (null to remove).
 * @param {?=} suffix Suffix to add to style's value (optional).
 * @return {?}
 */
function elementStyle(index, styleName, value, suffix) {
    if (value !== NO_CHANGE) {
        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);
        if (value == null) {
            (/** @type {?} */ (renderer)).removeStyle ?
                (/** @type {?} */ (renderer))
                    .removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :
                lElement.native.style.removeProperty(styleName);
        }
        else {
            (/** @type {?} */ (renderer)).setStyle ?
                (/** @type {?} */ (renderer))
                    .setStyle(lElement.native, styleName, suffix ? stringify$1(value) + suffix : stringify$1(value), RendererStyleFlags3.DashCase) :
                lElement.native.style.setProperty(styleName, suffix ? stringify$1(value) + suffix : stringify$1(value));
        }
    }
}
/**
 * Create static text node
 *
 * @param {?} index Index of the node in the data array.
 * @param {?=} value Value to write. This value will be stringified.
 *   If value is not provided than the actual creation of the text node is delayed.
 * @return {?}
 */
function text(index, value) {
    ngDevMode && assertEqual(currentView.bindingStartIndex, null, 'bindingStartIndex');
    var /** @type {?} */ textNode = value != null ?
        ((/** @type {?} */ (renderer)).createText ?
            (/** @type {?} */ (renderer)).createText(stringify$1(value)) : /** @type {?} */ (((/** @type {?} */ (renderer)).createTextNode))(stringify$1(value))) :
        null;
    var /** @type {?} */ node = createLNode(index, 3 /* Element */, textNode);
    // Text nodes are self closing.
    isParent = false;
    appendChild(/** @type {?} */ ((node.parent)), textNode, currentView);
}
/**
 * Create text node with binding
 * Bindings should be handled externally with the proper bind(1-8) method
 *
 * @template T
 * @param {?} index Index of the node in the data array.
 * @param {?} value Stringified value to write.
 * @return {?}
 */
function textBinding(index, value) {
    // TODO(misko): I don't think index < nodes.length check is needed here.
    var /** @type {?} */ existingNode = index < data.length && /** @type {?} */ (data[index]);
    if (existingNode && existingNode.native) {
        // If DOM node exists and value changed, update textContent
        value !== NO_CHANGE &&
            ((/** @type {?} */ (renderer)).setValue ?
                (/** @type {?} */ (renderer)).setValue(existingNode.native, stringify$1(value)) :
                existingNode.native.textContent = stringify$1(value));
    }
    else if (existingNode) {
        // Node was created but DOM node creation was delayed. Create and append now.
        existingNode.native =
            ((/** @type {?} */ (renderer)).createText ?
                (/** @type {?} */ (renderer)).createText(stringify$1(value)) : /** @type {?} */ (((/** @type {?} */ (renderer)).createTextNode))(stringify$1(value)));
        insertChild(existingNode, currentView);
    }
    else {
        text(index, value);
    }
}
/**
 * @template T
 * @param {?} index
 * @param {?=} directive
 * @param {?=} directiveDef
 * @param {?=} localName
 * @return {?}
 */
function directive(index, directive, directiveDef, localName) {
    var /** @type {?} */ instance;
    if (directive == null) {
        // return existing
        ngDevMode && assertDataInRange(index);
        instance = data[index];
    }
    else {
        ngDevMode && assertEqual(currentView.bindingStartIndex, null, 'bindingStartIndex');
        ngDevMode && assertPreviousIsParent();
        var /** @type {?} */ flags = /** @type {?} */ ((previousOrParentNode)).flags;
        var /** @type {?} */ size = flags & 4092;
        if (size === 0) {
            flags =
                (index << 12 /* INDX_SHIFT */) | 4 /* SIZE_SKIP */ | flags & 3 /* TYPE_MASK */;
        }
        else {
            flags += 4 /* SIZE_SKIP */;
        } /** @type {?} */
        ((previousOrParentNode)).flags = flags;
        ngDevMode && assertDataInRange(index - 1);
        Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });
        data[index] = instance = directive;
        if (index >= ngStaticData.length) {
            ngStaticData[index] = /** @type {?} */ ((directiveDef));
            if (localName) {
                ngDevMode &&
                    assertNotNull(previousOrParentNode.staticData, 'previousOrParentNode.staticData');
                var /** @type {?} */ nodeStaticData = /** @type {?} */ ((/** @type {?} */ ((previousOrParentNode)).staticData));
                (nodeStaticData.localNames || (nodeStaticData.localNames = [])).push(localName, index);
            }
        }
        var /** @type {?} */ diPublic_1 = /** @type {?} */ ((directiveDef)).diPublic;
        if (diPublic_1) {
            diPublic_1(/** @type {?} */ ((directiveDef)));
        }
        var /** @type {?} */ staticData = /** @type {?} */ ((previousOrParentNode.staticData));
        if (staticData && staticData.attrs) {
            setInputsFromAttrs(instance, /** @type {?} */ ((directiveDef)).inputs, staticData);
        }
    }
    return instance;
}
/**
 * Sets initial input properties on directive instances from attribute data
 *
 * @template T
 * @param {?} instance Instance of the directive on which to set the initial inputs
 * @param {?} inputs The list of inputs from the directive def
 * @param {?} staticData The static data for this node
 * @return {?}
 */
function setInputsFromAttrs(instance, inputs, staticData) {
    var /** @type {?} */ directiveIndex = ((previousOrParentNode.flags & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */) - 1;
    var /** @type {?} */ initialInputData = /** @type {?} */ (staticData.initialInputs);
    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {
        initialInputData = generateInitialInputs(directiveIndex, inputs, staticData);
    }
    var /** @type {?} */ initialInputs = initialInputData[directiveIndex];
    if (initialInputs) {
        for (var /** @type {?} */ i = 0; i < initialInputs.length; i += 2) {
            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i | 1];
        }
    }
}
/**
 * Generates initialInputData for a node and stores it in the template's static storage
 * so subsequent template invocations don't have to recalculate it.
 *
 * initialInputData is an array containing values that need to be set as input properties
 * for directives on this node, but only once on creation. We need this array to support
 * the case where you set an \@Input property of a directive using attribute-like syntax.
 * e.g. if you have a `name` \@Input, you can set it once like this:
 *
 * <my-component name="Bess"></my-component>
 *
 * @param {?} directiveIndex Index to store the initial input data
 * @param {?} inputs The list of inputs from the directive def
 * @param {?} staticData The static data on this node
 * @return {?}
 */
function generateInitialInputs(directiveIndex, inputs, staticData) {
    var /** @type {?} */ initialInputData = staticData.initialInputs || (staticData.initialInputs = []);
    initialInputData[directiveIndex] = null;
    var /** @type {?} */ attrs = /** @type {?} */ ((staticData.attrs));
    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
        var /** @type {?} */ attrName = attrs[i];
        var /** @type {?} */ minifiedInputName = inputs[attrName];
        if (minifiedInputName !== undefined) {
            var /** @type {?} */ inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);
            inputsToStore.push(minifiedInputName, attrs[i | 1]);
        }
    }
    return initialInputData;
}
/**
 * @param {?} lifecycle
 * @param {?=} self
 * @param {?=} method
 * @return {?}
 */

/**
 * Iterates over view hook functions and calls them.
 * @return {?}
 */
function executeViewHooks() {
    if (viewHookStartIndex == null)
        return;
    // Instead of using splice to remove init hooks after their first run (expensive), we
    // shift over the AFTER_CHECKED hooks as we call them and truncate once at the end.
    var /** @type {?} */ checkIndex = /** @type {?} */ (viewHookStartIndex);
    var /** @type {?} */ writeIndex = checkIndex;
    while (checkIndex < data.length) {
        // Call lifecycle hook with its context
        data[checkIndex + 1].call(data[checkIndex + 2]);
        if (data[checkIndex] === 16 /* AFTER_VIEW_CHECKED */) {
            // We know if the writeIndex falls behind that there is an init that needs to
            // be overwritten.
            if (writeIndex < checkIndex) {
                data[writeIndex] = data[checkIndex];
                data[writeIndex + 1] = data[checkIndex + 1];
                data[writeIndex + 2] = data[checkIndex + 2];
            }
            writeIndex += 3;
        }
        checkIndex += 3;
    }
    // Truncate once at the writeIndex
    data.length = writeIndex;
}
/**
 * Creates an LContainer.
 *
 * Only `LView`s can go into `LContainer`.
 *
 * @param {?} index The index of the container in the data array
 * @param {?=} template Optional inline template
 * @param {?=} tagName The name of the container element, if applicable
 * @param {?=} attrs The attrs attached to the container, if applicable
 * @param {?=} localName
 * @return {?}
 */
function containerStart(index, template, tagName, attrs, localName) {
    ngDevMode && assertEqual(currentView.bindingStartIndex, null, 'bindingStartIndex');
    // If the direct parent of the container is a view, its views (including its comment)
    // will need to be added through insertView() when its parent view is being inserted.
    // For now, it is marked "headless" so we know to append its views later.
    var /** @type {?} */ comment = renderer.createComment(ngDevMode ? 'container' : '');
    var /** @type {?} */ renderParent = null;
    var /** @type {?} */ currentParent = isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent));
    ngDevMode && assertNotEqual(currentParent, null, 'currentParent');
    if (appendChild(currentParent, comment, currentView)) {
        // we are adding to an Element which is either:
        // - Not a component (will not be re-projected, just added)
        // - View of the Component
        renderParent = /** @type {?} */ (currentParent);
    }
    var /** @type {?} */ node = createLNode(index, 0 /* Container */, comment, /** @type {?} */ ({
        views: [],
        nextIndex: 0, renderParent: renderParent,
        template: template == null ? null : template,
        next: null,
        parent: currentView
    }));
    if (node.staticData == null) {
        node.staticData = ngStaticData[index] =
            createNodeStatic(tagName || null, attrs || null, [], localName || null);
    }
    // Containers are added to the current view tree instead of their embedded views
    // because views can be removed and re-inserted.
    addToViewTree(node.data);
}
/**
 * @return {?}
 */
function containerEnd() {
    if (isParent) {
        isParent = false;
    }
    else {
        ngDevMode && assertHasParent();
        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));
    }
    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
    var /** @type {?} */ query = previousOrParentNode.query;
    query && query.addNode(previousOrParentNode);
}
/**
 * Sets a container up to receive views.
 *
 * @param {?} index The index of the container in the data array
 * @return {?}
 */
function containerRefreshStart(index) {
    ngDevMode && assertDataInRange(index);
    previousOrParentNode = /** @type {?} */ (data[index]);
    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
    isParent = true;
    (/** @type {?} */ (previousOrParentNode)).data.nextIndex = 0;
}
/**
 * Marks the end of the LContainer.
 *
 * Marking the end of ViewContainer is the time when to child Views get inserted or removed.
 * @return {?}
 */
function containerRefreshEnd() {
    if (isParent) {
        isParent = false;
    }
    else {
        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
        ngDevMode && assertHasParent();
        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));
    }
    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode);
    ngDevMode && assertNodeType(container, 0 /* Container */);
    var /** @type {?} */ nextIndex = container.data.nextIndex;
    while (nextIndex < container.data.views.length) {
        // remove extra view.
        removeView(container, nextIndex);
    }
}
/**
 * Creates an LView.
 *
 * @param {?} viewBlockId The ID of this view
 * @return {?} Whether or not this view is in creation mode
 */
function viewStart(viewBlockId) {
    var /** @type {?} */ container = /** @type {?} */ ((isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent))));
    ngDevMode && assertNodeType(container, 0 /* Container */);
    var /** @type {?} */ containerState = container.data;
    var /** @type {?} */ views = containerState.views;
    var /** @type {?} */ existingView = !creationMode && containerState.nextIndex < views.length && views[containerState.nextIndex];
    var /** @type {?} */ viewUpdateMode = existingView && viewBlockId === (/** @type {?} */ (existingView)).data.id;
    if (viewUpdateMode) {
        previousOrParentNode = views[containerState.nextIndex++];
        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
        isParent = true;
        enterView((/** @type {?} */ (existingView)).data, /** @type {?} */ (previousOrParentNode));
    }
    else {
        // When we create a new View, we always reset the state of the instructions.
        var /** @type {?} */ newViewState = createViewState(viewBlockId, renderer, initViewStaticData(viewBlockId, container));
        enterView(newViewState, createLNode(null, 2 /* View */, null, newViewState));
        containerState.nextIndex++;
    }
    return !viewUpdateMode;
}
/**
 * Initialize the static data for the active view.
 *
 * Each embedded view needs to set the global ngStaticData variable to the static data for
 * that view. Otherwise, the view's static data for a particular node would overwrite
 * the staticdata for a node in the view above it with the same index (since it's in the
 * same template).
 *
 * @param {?} viewIndex The index of the view's static data in containerStatic
 * @param {?} parent The parent container in which to look for the view's static data
 * @return {?} NgStaticData
 */
function initViewStaticData(viewIndex, parent) {
    ngDevMode && assertNodeType(parent, 0 /* Container */);
    var /** @type {?} */ containerStatic = (/** @type {?} */ (((parent)).staticData)).containerStatic;
    if (viewIndex >= containerStatic.length || containerStatic[viewIndex] == null) {
        containerStatic[viewIndex] = [];
    }
    return containerStatic[viewIndex];
}
/**
 * Marks the end of the LView.
 * @return {?}
 */
function viewEnd() {
    isParent = false;
    var /** @type {?} */ viewNode = previousOrParentNode = /** @type {?} */ (currentView.node);
    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode.parent);
    ngDevMode && assertNodeType(viewNode, 2 /* View */);
    ngDevMode && assertNodeType(container, 0 /* Container */);
    var /** @type {?} */ containerState = container.data;
    var /** @type {?} */ previousView = containerState.nextIndex <= containerState.views.length ? /** @type {?} */ (containerState.views[containerState.nextIndex - 1]) :
        null;
    var /** @type {?} */ viewIdChanged = previousView == null ? true : previousView.data.id !== viewNode.data.id;
    if (viewIdChanged) {
        insertView(container, viewNode, containerState.nextIndex - 1);
        currentView.creationMode = false;
    }
    leaveView(/** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));
    ngDevMode && assertEqual(isParent, false, 'isParent');
    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
}
/**
 * Refreshes the component view.
 *
 * In other words, enters the component's view and processes it to update bindings, queries, etc.
 *
 * @param directiveIndex
 * @param elementIndex
 * @param template
 */
var componentRefresh = function (directiveIndex, elementIndex, template) {
    ngDevMode && assertDataInRange(elementIndex);
    var /** @type {?} */ element = /** @type {?} */ (((data))[elementIndex]);
    ngDevMode && assertNodeType(element, 3 /* Element */);
    ngDevMode && assertNotEqual(element.data, null, 'isComponent');
    ngDevMode && assertDataInRange(directiveIndex);
    var /** @type {?} */ hostView = /** @type {?} */ ((element.data));
    ngDevMode && assertNotEqual(hostView, null, 'hostView');
    var /** @type {?} */ directive = data[directiveIndex];
    var /** @type {?} */ oldView = enterView(hostView, element);
    try {
        template(directive, creationMode);
    }
    finally {
        hostView.creationMode = false;
        leaveView(oldView);
    }
};
/**
 * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
 * It takes all the selectors from the entire component's template and decides where
 * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
 * backed by a selector).
 *
 * @param {?=} selectors
 * @return {?}
 */

/**
 * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
 * to the projectionDef instruction.
 *
 * @param {?} nodeIndex
 * @param {?} localIndex - index under which distribution of projected nodes was memorized
 * @param {?=} selectorIndex - 0 means <ng-content> without any selector
 * @return {?}
 */

/**
 * Adds a ViewState or a ContainerState to the end of the current view tree.
 *
 * This structure will be used to traverse through nested views to remove listeners
 * and call onDestroy callbacks.
 *
 * @template T
 * @param {?} state The ViewState or ContainerState to add to the view tree
 * @return {?} The state passed in
 */
function addToViewTree(state) {
    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);
    currentView.tail = state;
    return state;
}
/**
 * A special value which designates that a value has not changed.
 */
var NO_CHANGE = /** @type {?} */ ({});
/**
 * Create interpolation bindings with variable number of arguments.
 *
 * If any of the arguments change, then the interpolation is concatenated
 * and causes an update.
 *
 * @param {?} values an array of values to diff.
 * @return {?}
 */

/**
 * Create a single value binding without interpolation.
 *
 * @template T
 * @param {?} value Value to diff
 * @return {?}
 */
function bind(value) {
    var /** @type {?} */ different;
    if (different = creationMode) {
        if (typeof currentView.bindingStartIndex !== 'number') {
            bindingIndex = currentView.bindingStartIndex = data.length;
        }
        data[bindingIndex++] = value;
    }
    else {
        if (different = value !== NO_CHANGE && isDifferent(data[bindingIndex], value)) {
            data[bindingIndex] = value;
        }
        bindingIndex++;
    }
    return different ? value : NO_CHANGE;
}
/**
 * Create an interpolation bindings with 1 arguments.
 *
 * @param {?} prefix static value used for concatenation only.
 * @param {?} value value checked for change.
 * @param {?} suffix static value used for concatenation only.
 * @return {?}
 */
function bind1(prefix, value, suffix) {
    return bind(value) === NO_CHANGE ? NO_CHANGE : prefix + stringify$1(value) + suffix;
}
/**
 * Create an interpolation bindings with 2 arguments.
 *
 * @param {?} prefix
 * @param {?} v0 value checked for change
 * @param {?} i0
 * @param {?} v1 value checked for change
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation bindings with 3 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation binding with 4 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation binding with 5 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation binding with 6 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation binding with 7 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} suffix
 * @return {?}
 */

/**
 * Create an interpolation binding with 8 arguments.
 *
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} i6
 * @param {?} v7
 * @param {?} suffix
 * @return {?}
 */

/**
 * @template T
 * @param {?} index
 * @param {?=} value
 * @return {?}
 */

/**
 * @template T
 * @param {?} predicate
 * @param {?=} descend
 * @param {?=} read
 * @return {?}
 */

/**
 * @return {?}
 */
function assertPreviousIsParent() {
    assertEqual(isParent, true, 'isParent');
}
/**
 * @return {?}
 */
function assertHasParent() {
    assertNotEqual(previousOrParentNode.parent, null, 'isParent');
}
/**
 * @param {?} index
 * @param {?=} arr
 * @return {?}
 */
function assertDataInRange(index, arr) {
    if (arr == null)
        arr = data;
    assertLessThan(arr ? arr.length : 0, index, 'data.length');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Options that control how the component should be bootstrapped.
 * @record
 */

/**
 * Bootstraps a component, then creates and returns a `ComponentRef` for that component.
 *
 * @template T
 * @param {?} componentType Component to bootstrap
 * @param {?} opts
 * @return {?}
 */

// TODO: A hack to not pull in the NullInjector from @angular/core.

/**
 * Bootstraps a Component into an existing host element and returns an instance
 * of the component.
 *
 * @template T
 * @param {?} componentType Component to bootstrap
 * @param {?=} opts
 * @return {?}
 */
function renderComponent(componentType, opts) {
    if (opts === void 0) { opts = {}; }
    var /** @type {?} */ rendererFactory = opts.rendererFactory || domRendererFactory3;
    var /** @type {?} */ componentDef = componentType.ngComponentDef;
    var /** @type {?} */ component;
    var /** @type {?} */ hostNode = locateHostElement(rendererFactory, opts.host || componentDef.tag);
    var /** @type {?} */ oldView = enterView(createViewState(-1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), []), /** @type {?} */ ((null)));
    try {
        // Create element node at index 0 in data array
        hostElement(hostNode, componentDef);
        // Create directive instance with n() and store at index 1 in data array (el is 0)
        component = directive(1, componentDef.n(), componentDef);
    }
    finally {
        leaveView(oldView);
    }
    opts.features && opts.features.forEach(function (feature) { return feature(component, componentDef); });
    detectChanges(component);
    return component;
}
/**
 * @template T
 * @param {?} component
 * @return {?}
 */
function detectChanges(component) {
    ngDevMode && assertNotNull(component, 'component');
    var /** @type {?} */ hostNode = /** @type {?} */ ((/** @type {?} */ (component))[NG_HOST_SYMBOL]);
    if (ngDevMode && !hostNode) {
        createError('Not a directive instance', component);
    }
    ngDevMode && assertNotNull(hostNode.data, 'hostNode.data');
    renderComponentOrTemplate(hostNode, hostNode.view, component);
    isDirty = false;
}
var isDirty = false;
/**
 * @template T
 * @param {?} component
 * @param {?=} scheduler
 * @return {?}
 */

/**
 * @template T
 * @param {?} component
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Create a component definition object.
 *
 *
 * # Example
 * ```
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static [COMPONENT_DEF_SYMBOL] = defineComponent({
 *     ...
 *   });
 * }
 * ```
 * @template T
 * @param {?} componentDefinition
 * @return {?}
 */
function defineComponent(componentDefinition) {
    var /** @type {?} */ def = /** @type {?} */ ({
        type: componentDefinition.type,
        diPublic: null,
        n: componentDefinition.factory,
        tag: (/** @type {?} */ (componentDefinition)).tag || /** @type {?} */ ((null)),
        template: (/** @type {?} */ (componentDefinition)).template || /** @type {?} */ ((null)),
        r: componentDefinition.refresh ||
            function (d, e) { componentRefresh(d, e, componentDefinition.template); },
        h: componentDefinition.hostBindings || noop$1,
        inputs: invertObject(componentDefinition.inputs),
        outputs: invertObject(componentDefinition.outputs),
        methods: invertObject(componentDefinition.methods),
        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,
    });
    var /** @type {?} */ feature = componentDefinition.features;
    feature && feature.forEach(function (fn) { return fn(def); });
    return def;
}
/**
 * @template T
 * @param {?} definition
 * @return {?}
 */

/**
 * @template T
 * @param {?} definition
 * @return {?}
 */

var EMPTY$1 = {};
/**
 * @return {?}
 */
function noop$1() { }
/**
 * Swaps the keys and values of an object.
 * @param {?} obj
 * @return {?}
 */
function invertObject(obj) {
    if (obj == null)
        return EMPTY$1;
    var /** @type {?} */ newObj = {};
    for (var /** @type {?} */ minifiedKey in obj) {
        newObj[obj[minifiedKey]] = minifiedKey;
    }
    return newObj;
}
/**
 * Create a directive definition object.
 *
 * # Example
 * ```
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static [DIRECTIVE_DEF_SYMBOL] = defineDirective({
 *     ...
 *   });
 * }
 * ```
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

// clang-format on

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @record
 */

/**
 * \@experimental Animation support is experimental.
 */

/**
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link trigger trigger animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link state state animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link transition transition animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link keyframes keyframes animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link style style animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link animate animate animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link animateChild animateChild animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link useAnimation useAnimation animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link sequence sequence animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link group group animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * Metadata representing the entry of animations. Instances of this interface are provided via the
 * animation DSL when the {\@link stagger stagger animation function} is called.
 *
 * \@experimental Animation support is experimental.
 * @record
 */

/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the
 * {\@link Component#animations component animations metadata page} to gain a better
 * understanding of how animations in Angular are used.
 *
 * `trigger` Creates an animation trigger which will a list of {\@link state state} and
 * {\@link transition transition} entries that will be evaluated when the expression
 * bound to the trigger changes.
 *
 * Triggers are registered within the component annotation data under the
 * {\@link Component#animations animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that
 * the
 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
 *
 * Animation trigger bindings strigify values and then match the previous and current values against
 * any linked transitions. If a boolean value is provided into the trigger binding then it will both
 * be represented as `1` or `true` and `0` or `false` for a true and false boolean values
 * respectively.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {\@link state state} and
 * {\@link transition transition} declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ## Disable Animations
 * A special animation control binding called `\@.disabled` can be placed on an element which will
 * then disable animations for any inner animation triggers situated within the element as well as
 * any animations on the element itself.
 *
 * When true, the `\@.disabled` binding will prevent all animations from rendering. The example
 * below shows how to use this feature:
 *
 * ```ts
 * \@Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [\@.disabled]="isDisabled">
 *       <div [\@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * The `\@childAnimation` trigger will not animate because `\@.disabled` prevents it from happening
 * (when true).
 *
 * Note that `\@.disabled` will only disable all animations (this means any animations running on
 * the same element will also be disabled).
 *
 * ### Disabling Animations Application-wide
 * When an area of the template is set to have animations disabled, **all** inner components will
 * also have their animations disabled as well. This means that all animations for an angular
 * application can be disabled by placing a host binding set on `\@.disabled` on the topmost Angular
 * component.
 *
 * ```ts
 * import {Component, HostBinding} from '\@angular/core';
 *
 * \@Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   \@HostBinding('\@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### What about animations that us `query()` and `animateChild()`?
 * Despite inner animations being disabled, a parent animation can {\@link query query} for inner
 * elements located in disabled areas of the template and still animate them as it sees fit. This is
 * also the case for when a sub animation is queried by a parent and then later animated using {\@link
 * animateChild animateChild}.
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger$1(name, definitions) {
    return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };
}
/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {\@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate$1(timings, styles) {
    if (styles === void 0) { styles = null; }
    return { type: 4 /* Animate */, styles: styles, timings: timings };
}
/**
 * `group` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
 * useful when a series of styles must be animated/closed off at different starting/ending times.
 *
 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
 * transition} and it will only continue to the next instruction once all of the inner animation
 * steps have completed.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
 *
 * ```typescript
 * group([
 *   animate("1s", { background: "black" }))
 *   animate("2s", { color: "white" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function group$1(steps, options) {
    if (options === void 0) { options = null; }
    return { type: 3 /* Group */, steps: steps, options: options };
}
/**
 * `sequence` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
 * default when an array is passed as animation data into {\@link transition transition}.)
 *
 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
 * transition} and it will only continue to the next instruction once each of the inner animation
 * steps have completed.
 *
 * To perform animation styling in parallel with other animation steps then have a look at the
 * {\@link group group} animation function.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `sequence` animation function can either consist of
 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
 * provided styling data immediately while a call to `animate()` will apply its styling data over a
 * given time depending on its timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 })),
 *   animate("1s", { opacity: 1 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function sequence$1(steps, options) {
    if (options === void 0) { options = null; }
    return { type: 2 /* Sequence */, steps: steps, options: options };
}
/**
 * `style` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
 * for both {\@link animate animate} and {\@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} tokens
 * @return {?}
 */
function style$1(tokens) {
    return { type: 6 /* Style */, styles: tokens, offset: null };
}
/**
 * `state` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {\@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {\@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} styles
 * @param {?=} options
 * @return {?}
 */
function state$1(name, styles, options) {
    return { type: 0 /* State */, name: name, styles: styles, options: options };
}
/**
 * `keyframes` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
 * by an `offset` value.
 *
 * ### Usage
 *
 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
 * animation function. Instead of applying animations from where they are currently to their
 * destination, keyframes can describe how each style entry is applied and at what point within the
 * animation arc (much like CSS Keyframe Animations do).
 *
 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
 * percentage of the animate time the styles will be applied.
 *
 * ```typescript
 * // the provided offset values describe when each backgroundColor value is applied.
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * Alternatively, if there are no `offset` values used within the style entries then the offsets
 * will be calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function keyframes$1(steps) {
    return { type: 5 /* Keyframes */, steps: steps };
}
/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {\@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Using :enter and :leave
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ]),
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * ### Boolean values
 * if a trigger binding value is a boolean value then it can be matched using a transition
 * expression that compares `true` and `false` or `1` and `0`.
 *
 * ```
 * // in the template
 * <div [\@openClose]="open ? true : false">...</div>
 *
 * // in the component metadata
 * trigger('openClose', [
 *   state('true', style({ height: '*' })),
 *   state('false', style({ height: '0px' })),
 *   transition('false <=> true', animate(500))
 * ])
 * ```
 *
 * ### Using :increment and :decrement
 * In addition to the :enter and :leave transition aliases, the :increment and :decrement aliases
 * can be used to kick off a transition when a numeric value has increased or decreased in value.
 *
 * ```
 * import {group, animate, query, transition, style, trigger} from '\@angular/animations';
 * import {Component} from '\@angular/core';
 *
 * \@Component({
 *   selector: 'banner-carousel-component',
 *   styles: [`
 *     .banner-container {
 *        position:relative;
 *        height:500px;
 *        overflow:hidden;
 *      }
 *     .banner-container > .banner {
 *        position:absolute;
 *        left:0;
 *        top:0;
 *        font-size:200px;
 *        line-height:500px;
 *        font-weight:bold;
 *        text-align:center;
 *        width:100%;
 *      }
 *   `],
 *   template: `
 *     <button (click)="previous()">Previous</button>
 *     <button (click)="next()">Next</button>
 *     <hr>
 *     <div [\@bannerAnimation]="selectedIndex" class="banner-container">
 *       <div class="banner" *ngFor="let banner of banners"> {{ banner }} </div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger('bannerAnimation', [
 *       transition(":increment", group([
 *         query(':enter', [
 *           style({ left: '100%' }),
 *           animate('0.5s ease-out', style('*'))
 *         ]),
 *         query(':leave', [
 *           animate('0.5s ease-out', style({ left: '-100%' }))
 *         ])
 *       ])),
 *       transition(":decrement", group([
 *         query(':enter', [
 *           style({ left: '-100%' }),
 *           animate('0.5s ease-out', style('*'))
 *         ]),
 *         query(':leave', [
 *           animate('0.5s ease-out', style({ left: '100%' }))
 *         ])
 *       ]))
 *     ])
 *   ]
 * })
 * class BannerCarouselComponent {
 *   allBanners: string[] = ['1', '2', '3', '4'];
 *   selectedIndex: number = 0;
 *
 *   get banners() {
 *      return [this.allBanners[this.selectedIndex]];
 *   }
 *
 *   previous() {
 *     this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
 *   }
 *
 *   next() {
 *     this.selectedIndex = Math.min(this.selectedIndex + 1, this.allBanners.length - 1);
 *   }
 * }
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function transition$1(stateChangeExpr, steps, options) {
    if (options === void 0) { options = null; }
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };
}
/**
 * `animation` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language.
 *
 * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later
 * invoked in another animation or sequence. Reusable animations are designed to make use of
 * animation parameters and the produced animation can be used via the `useAnimation` method.
 *
 * ```
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *     style({ opacity: '{{ end }}'}))
 * ], { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * If parameters are attached to an animation then they act as **default parameter values**. When an
 * animation is invoked via `useAnimation` then parameter values are allowed to be passed in
 * directly. If any of the passed in parameter values are missing then the default values will be
 * used.
 *
 * ```
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If one or more parameter values are missing before animated then an error will be thrown.
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */

/**
 * `animateChild` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It works by allowing a queried element to execute its own
 * animation within the animation sequence.
 *
 * Each time an animation is triggered in angular, the parent animation
 * will always get priority and any child animations will be blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations and then allow the animations to run using `animateChild`.
 *
 * The example HTML code below shows both parent and child elements that have animation
 * triggers that will execute at the same time.
 *
 * ```html
 * <!-- parent-child.component.html -->
 * <button (click)="exp =! exp">Toggle</button>
 * <hr>
 *
 * <div [\@parentAnimation]="exp">
 *   <header>Hello</header>
 *   <div [\@childAnimation]="exp">
 *       one
 *   </div>
 *   <div [\@childAnimation]="exp">
 *       two
 *   </div>
 *   <div [\@childAnimation]="exp">
 *       three
 *   </div>
 * </div>
 * ```
 *
 * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate
 * because it has priority. However, using `query` and `animateChild` each of the inner animations
 * can also fire:
 *
 * ```ts
 * // parent-child.component.ts
 * import {trigger, transition, animate, style, query, animateChild} from '\@angular/animations';
 * \@Component({
 *   selector: 'parent-child-component',
 *   animations: [
 *     trigger('parentAnimation', [
 *       transition('false => true', [
 *         query('header', [
 *           style({ opacity: 0 }),
 *           animate(500, style({ opacity: 1 }))
 *         ]),
 *         query('\@childAnimation', [
 *           animateChild()
 *         ])
 *       ])
 *     ]),
 *     trigger('childAnimation', [
 *       transition('false => true', [
 *         style({ opacity: 0 }),
 *         animate(500, style({ opacity: 1 }))
 *       ])
 *     ])
 *   ]
 * })
 * class ParentChildCmp {
 *   exp: boolean = false;
 * }
 * ```
 *
 * In the animation code above, when the `parentAnimation` transition kicks off it first queries to
 * find the header element and fades it in. It then finds each of the sub elements that contain the
 * `\@childAnimation` trigger and then allows for their animations to fire.
 *
 * This example can be further extended by using stagger:
 *
 * ```ts
 * query('\@childAnimation', stagger(100, [
 *   animateChild()
 * ]))
 * ```
 *
 * Now each of the sub animations start off with respect to the `100ms` staggering step.
 *
 * ## The first frame of child animations
 * When sub animations are executed using `animateChild` the animation engine will always apply the
 * first frame of every sub animation immediately at the start of the animation sequence. This way
 * the parent animation does not need to set any initial styling data on the sub elements before the
 * sub animations kick off.
 *
 * In the example above the first frame of the `childAnimation`'s `false => true` transition
 * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`
 * animation transition sequence starts. Only then when the `\@childAnimation` is queried and called
 * with `animateChild` will it then animate to its destination of `opacity: 1`.
 *
 * Note that this feature designed to be used alongside {\@link query query()} and it will only work
 * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes
 * and transitions are not handled by this API).
 *
 * \@experimental Animation support is experimental.
 * @param {?=} options
 * @return {?}
 */

/**
 * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It is used to kick off a reusable animation that is created using {\@link
 * animation animation()}.
 *
 * \@experimental Animation support is experimental.
 * @param {?} animation
 * @param {?=} options
 * @return {?}
 */

/**
 * `query` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language.
 *
 * query() is used to find one or more inner elements within the current element that is
 * being animated within the sequence. The provided animation steps are applied
 * to the queried element (by default, an array is provided, then this will be
 * treated as an animation sequence).
 *
 * ### Usage
 *
 * query() is designed to collect mutiple elements and works internally by using
 * `element.querySelectorAll`. An additional options object can be provided which
 * can be used to limit the total amount of items to be collected.
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * query(), by default, will throw an error when zero items are found. If a query
 * has the `optional` flag set to true then this error will be ignored.
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Special Selector Values
 *
 * The selector value within a query can collect elements that contain angular-specific
 * characteristics
 * using special pseudo-selectors tokens.
 *
 * These include:
 *
 *  - Querying for newly inserted/removed elements using `query(":enter")`/`query(":leave")`
 *  - Querying all currently animating elements using `query(":animating")`
 *  - Querying elements that contain an animation trigger using `query("\@triggerName")`
 *  - Querying all elements that contain an animation triggers using `query("\@*")`
 *  - Including the current element into the animation sequence using `query(":self")`
 *
 *
 *  Each of these pseudo-selector tokens can be merged together into a combined query selector
 * string:
 *
 *  ```
 *  query(':self, .record:enter, .record:leave, \@subTrigger', [...])
 *  ```
 *
 * ### Demo
 *
 * ```
 * \@Component({
 *   selector: 'inner',
 *   template: `
 *     <div [\@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 })),
 *        query('.content', animate(1000, style({ opacity: 1 })),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * \@experimental Animation support is experimental.
 * @param {?} selector
 * @param {?} animation
 * @param {?=} options
 * @return {?}
 */

/**
 * `stagger` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It is designed to be used inside of an animation {\@link query query()}
 * and works by issuing a timing gap between after each queried item is animated.
 *
 * ### Usage
 *
 * In the example below there is a container element that wraps a list of items stamped out
 * by an ngFor. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [\@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * The component code for this looks as such:
 *
 * ```ts
 * import {trigger, transition, style, animate, query, stagger} from '\@angular/animations';
 * \@Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *        //...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *   }
 * }
 * ```
 *
 * And now for the animation trigger code:
 *
 * ```ts
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * Now each time the items are added/removed then either the opacity
 * fade-in animation will run or each removed item will be faded out.
 * When either of these animations occur then a stagger effect will be
 * applied after each item's animation is started.
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?} animation
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 */
var AUTO_STYLE = '*';
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @record
 */

/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger$$1(name, definitions) {
    return trigger$1(name, definitions);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate$$1(timings, styles) {
    return animate$1(timings, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function group$$1(steps) {
    return group$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function sequence$$1(steps) {
    return sequence$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} tokens
 * @return {?}
 */
function style$$1(tokens) {
    return style$1(tokens);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state$$1(name, styles) {
    return state$1(name, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function keyframes$$1(steps) {
    return keyframes$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */
function transition$$1(stateChangeExpr, steps) {
    return transition$1(stateChangeExpr, steps);
}
/**
 * @deprecated This has been renamed to `AnimationEvent`. Please import it from \@angular/animations.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point from which you should import all public core APIs.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=core.js.map

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(13)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(7);
var toSubscriber_1 = __webpack_require__(62);
var observable_1 = __webpack_require__(21);
var pipe_1 = __webpack_require__(65);
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i - 0] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterLocaleData", function() { return registerLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocaleLocalization", function() { return NgLocaleLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocalization", function() { return NgLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLocaleData", function() { return registerLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plural", function() { return Plural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberFormatStyle", function() { return NumberFormatStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormStyle", function() { return FormStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationWidth", function() { return TranslationWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormatWidth", function() { return FormatWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberSymbol", function() { return NumberSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WeekDay", function() { return WeekDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrencySymbol", function() { return getCurrencySymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDayPeriods", function() { return getLocaleDayPeriods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDayNames", function() { return getLocaleDayNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleMonthNames", function() { return getLocaleMonthNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleId", function() { return getLocaleId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleEraNames", function() { return getLocaleEraNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleWeekEndRange", function() { return getLocaleWeekEndRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleFirstDayOfWeek", function() { return getLocaleFirstDayOfWeek; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDateFormat", function() { return getLocaleDateFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDateTimeFormat", function() { return getLocaleDateTimeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriodRules", function() { return getLocaleExtraDayPeriodRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriods", function() { return getLocaleExtraDayPeriods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocalePluralCase", function() { return getLocalePluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleTimeFormat", function() { return getLocaleTimeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleNumberSymbol", function() { return getLocaleNumberSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleNumberFormat", function() { return getLocaleNumberFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyName", function() { return getLocaleCurrencyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleCurrencySymbol", function() { return getLocaleCurrencySymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵparseCookieValue", function() { return parseCookieValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonModule", function() { return CommonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedI18NPipesModule", function() { return DeprecatedI18NPipesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgClass", function() { return NgClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForOf", function() { return NgForOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForOfContext", function() { return NgForOfContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgIf", function() { return NgIf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgIfContext", function() { return NgIfContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPlural", function() { return NgPlural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPluralCase", function() { return NgPluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgStyle", function() { return NgStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitch", function() { return NgSwitch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchCase", function() { return NgSwitchCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchDefault", function() { return NgSwitchDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgTemplateOutlet", function() { return NgTemplateOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgComponentOutlet", function() { return NgComponentOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOCUMENT", function() { return DOCUMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncPipe", function() { return AsyncPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatePipe", function() { return DatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nPluralPipe", function() { return I18nPluralPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nSelectPipe", function() { return I18nSelectPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonPipe", function() { return JsonPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LowerCasePipe", function() { return LowerCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyPipe", function() { return CurrencyPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecimalPipe", function() { return DecimalPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PercentPipe", function() { return PercentPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SlicePipe", function() { return SlicePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpperCasePipe", function() { return UpperCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TitleCasePipe", function() { return TitleCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedDatePipe", function() { return DeprecatedDatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedCurrencyPipe", function() { return DeprecatedCurrencyPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedDecimalPipe", function() { return DeprecatedDecimalPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedPercentPipe", function() { return DeprecatedPercentPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_BROWSER_ID", function() { return PLATFORM_BROWSER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_SERVER_ID", function() { return PLATFORM_SERVER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_APP_ID", function() { return PLATFORM_WORKER_APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_UI_ID", function() { return PLATFORM_WORKER_UI_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformBrowser", function() { return isPlatformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformServer", function() { return isPlatformServer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerApp", function() { return isPlatformWorkerApp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerUi", function() { return isPlatformWorkerUi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformLocation", function() { return PlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCATION_INITIALIZED", function() { return LOCATION_INITIALIZED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationStrategy", function() { return LocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BASE_HREF", function() { return APP_BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashLocationStrategy", function() { return HashLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathLocationStrategy", function() { return PathLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Location", function() { return Location; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return COMMON_DIRECTIVES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return findLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return DEPRECATED_PLURAL_FN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return getPluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return COMMON_DEPRECATED_I18N_PIPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return COMMON_PIPES; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tslib__ = __webpack_require__(19);
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */



/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
 * agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms that angular supports. For example, `\@angular/platform-browser` provides an
 * implementation specific to the browser environment, while `\@angular/platform-webworker` provides
 * one suitable for use with web workers.
 *
 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
 * when they need to interact with the DOM apis like pushState, popState, etc...
 *
 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
 * by the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
 * Router} /
 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
 * class they are all platform independent.
 *
 * \@stable
 * @abstract
 */
var PlatformLocation = /** @class */ (function () {
    function PlatformLocation() {
    }
    return PlatformLocation;
}());
/**
 * \@whatItDoes indicates when a location is initialized
 * \@experimental
 */
var LOCATION_INITIALIZED = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('Location Initialized');
/**
 * A serializable version of the event from onPopState or onHashChange
 *
 * \@experimental
 * @record
 */

/**
 * \@experimental
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `LocationStrategy` is responsible for representing and reading route state
 * from the browser's URL. Angular provides two strategies:
 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
 *
 * This is used under the hood of the {\@link Location} service.
 *
 * Applications should use the {\@link Router} or {\@link Location} services to
 * interact with application route state.
 *
 * For instance, {\@link HashLocationStrategy} produces URLs like
 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
 * `http://example.com/foo` as an equivalent URL.
 *
 * See these two classes for more.
 *
 * \@stable
 * @abstract
 */
var LocationStrategy = /** @class */ (function () {
    function LocationStrategy() {
    }
    return LocationStrategy;
}());
/**
 * The `APP_BASE_HREF` token represents the base href to be used with the
 * {\@link PathLocationStrategy}.
 *
 * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
 * representing the URL prefix that should be preserved when generating and recognizing
 * URLs.
 *
 * ### Example
 *
 * ```typescript
 * import {Component, NgModule} from '\@angular/core';
 * import {APP_BASE_HREF} from '\@angular/common';
 *
 * \@NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * \@stable
 */
var APP_BASE_HREF = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('appBaseHref');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental
 * @record
 */

/**
 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
 * \@description
 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
 * to the URL's path or the URL's hash segment.
 *
 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 * \@stable
 */
var Location = /** @class */ (function () {
    function Location(platformStrategy) {
        var _this = this;
        /**
         * \@internal
         */
        this._subject = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._platformStrategy = platformStrategy;
        var /** @type {?} */ browserBaseHref = this._platformStrategy.getBaseHref();
        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState(function (ev) {
            _this._subject.emit({
                'url': _this.path(true),
                'pop': true,
                'type': ev.type,
            });
        });
    }
    /**
     * Returns the normalized URL path.
     */
    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
    // removed.
    /**
     * Returns the normalized URL path.
     * @param {?=} includeHash
     * @return {?}
     */
    Location.prototype.path = /**
     * Returns the normalized URL path.
     * @param {?=} includeHash
     * @return {?}
     */
    function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        return this.normalize(this._platformStrategy.path(includeHash));
    };
    /**
     * Normalizes the given path and compares to the current normalized path.
     */
    /**
     * Normalizes the given path and compares to the current normalized path.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.isCurrentPathEqualTo = /**
     * Normalizes the given path and compares to the current normalized path.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    function (path, query) {
        if (query === void 0) { query = ''; }
        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    /**
     * Given a string representing a URL, returns the normalized URL path without leading or
     * trailing slashes.
     */
    /**
     * Given a string representing a URL, returns the normalized URL path without leading or
     * trailing slashes.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.normalize = /**
     * Given a string representing a URL, returns the normalized URL path without leading or
     * trailing slashes.
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    /**
     * Given a string representing a URL, returns the platform-specific external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     */
    /**
     * Given a string representing a URL, returns the platform-specific external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.prepareExternalUrl = /**
     * Given a string representing a URL, returns the platform-specific external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url && url[0] !== '/') {
            url = '/' + url;
        }
        return this._platformStrategy.prepareExternalUrl(url);
    };
    // TODO: rename this method to pushState
    /**
     * Changes the browsers URL to the normalized version of the given URL, and pushes a
     * new item onto the platform's history.
     */
    /**
     * Changes the browsers URL to the normalized version of the given URL, and pushes a
     * new item onto the platform's history.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.go = /**
     * Changes the browsers URL to the normalized version of the given URL, and pushes a
     * new item onto the platform's history.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.pushState(null, '', path, query);
    };
    /**
     * Changes the browsers URL to the normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     */
    /**
     * Changes the browsers URL to the normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.replaceState = /**
     * Changes the browsers URL to the normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.replaceState(null, '', path, query);
    };
    /**
     * Navigates forward in the platform's history.
     */
    /**
     * Navigates forward in the platform's history.
     * @return {?}
     */
    Location.prototype.forward = /**
     * Navigates forward in the platform's history.
     * @return {?}
     */
    function () { this._platformStrategy.forward(); };
    /**
     * Navigates back in the platform's history.
     */
    /**
     * Navigates back in the platform's history.
     * @return {?}
     */
    Location.prototype.back = /**
     * Navigates back in the platform's history.
     * @return {?}
     */
    function () { this._platformStrategy.back(); };
    /**
     * Subscribe to the platform's `popState` events.
     */
    /**
     * Subscribe to the platform's `popState` events.
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?}
     */
    Location.prototype.subscribe = /**
     * Subscribe to the platform's `popState` events.
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?}
     */
    function (onNext, onThrow, onReturn) {
        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    };
    /**
     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
     * is.
     * @param {?} params
     * @return {?}
     */
    Location.normalizeQueryParams = /**
     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
     * is.
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return params && params[0] !== '?' ? '?' + params : params;
    };
    /**
     * Given 2 parts of a url, join them with a slash if needed.
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    Location.joinWithSlash = /**
     * Given 2 parts of a url, join them with a slash if needed.
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (start, end) {
        if (start.length == 0) {
            return end;
        }
        if (end.length == 0) {
            return start;
        }
        var /** @type {?} */ slashes = 0;
        if (start.endsWith('/')) {
            slashes++;
        }
        if (end.startsWith('/')) {
            slashes++;
        }
        if (slashes == 2) {
            return start + end.substring(1);
        }
        if (slashes == 1) {
            return start + end;
        }
        return start + '/' + end;
    };
    /**
     * If url has a trailing slash, remove it, otherwise return url as is. This
     * method looks for the first occurence of either #, ?, or the end of the
     * line as `/` characters after any of these should not be replaced.
     * @param {?} url
     * @return {?}
     */
    Location.stripTrailingSlash = /**
     * If url has a trailing slash, remove it, otherwise return url as is. This
     * method looks for the first occurence of either #, ?, or the end of the
     * line as `/` characters after any of these should not be replaced.
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ match = url.match(/#|\?|$/);
        var /** @type {?} */ pathEndIdx = match && match.index || url.length;
        var /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
    };
    Location.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Location.ctorParameters = function () { return [
        { type: LocationStrategy, },
    ]; };
    return Location;
}());
/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
/**
 * @param {?} url
 * @return {?}
 */
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Use URL hash for storing application location data.
 * \@description
 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */
var HashLocationStrategy = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__["b" /* __extends */])(HashLocationStrategy, _super);
    function HashLocationStrategy(_platformLocation, _baseHref) {
        var _this = _super.call(this) || this;
        _this._platformLocation = _platformLocation;
        _this._baseHref = '';
        if (_baseHref != null) {
            _this._baseHref = _baseHref;
        }
        return _this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    HashLocationStrategy.prototype.onPopState = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.getBaseHref = /**
     * @return {?}
     */
    function () { return this._baseHref; };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    HashLocationStrategy.prototype.path = /**
     * @param {?=} includeHash
     * @return {?}
     */
    function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        // the hash value is always prefixed with a `#`
        // and if it is empty then it will stay empty
        var /** @type {?} */ path = this._platformLocation.hash;
        if (path == null)
            path = '#';
        return path.length > 0 ? path.substring(1) : path;
    };
    /**
     * @param {?} internal
     * @return {?}
     */
    HashLocationStrategy.prototype.prepareExternalUrl = /**
     * @param {?} internal
     * @return {?}
     */
    function (internal) {
        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? ('#' + url) : url;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.pushState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.pushState(state, title, url);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.replaceState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.replaceState(state, title, url);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.forward = /**
     * @return {?}
     */
    function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.back = /**
     * @return {?}
     */
    function () { this._platformLocation.back(); };
    HashLocationStrategy.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    HashLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [APP_BASE_HREF,] },] },
    ]; };
    return HashLocationStrategy;
}(LocationStrategy));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Use URL for storing application location data.
 * \@description
 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
 * or add a base element to the document. This URL prefix that will be preserved
 * when generating and recognizing URLs.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Similarly, if you add `<base href='/my/app'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */
var PathLocationStrategy = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__["b" /* __extends */])(PathLocationStrategy, _super);
    function PathLocationStrategy(_platformLocation, href) {
        var _this = _super.call(this) || this;
        _this._platformLocation = _platformLocation;
        if (href == null) {
            href = _this._platformLocation.getBaseHrefFromDOM();
        }
        if (href == null) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
        }
        _this._baseHref = href;
        return _this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    PathLocationStrategy.prototype.onPopState = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.getBaseHref = /**
     * @return {?}
     */
    function () { return this._baseHref; };
    /**
     * @param {?} internal
     * @return {?}
     */
    PathLocationStrategy.prototype.prepareExternalUrl = /**
     * @param {?} internal
     * @return {?}
     */
    function (internal) {
        return Location.joinWithSlash(this._baseHref, internal);
    };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    PathLocationStrategy.prototype.path = /**
     * @param {?=} includeHash
     * @return {?}
     */
    function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        var /** @type {?} */ pathname = this._platformLocation.pathname +
            Location.normalizeQueryParams(this._platformLocation.search);
        var /** @type {?} */ hash = this._platformLocation.hash;
        return hash && includeHash ? "" + pathname + hash : pathname;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.pushState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state, title, externalUrl);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.replaceState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state, title, externalUrl);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.forward = /**
     * @return {?}
     */
    function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.back = /**
     * @return {?}
     */
    function () { this._platformLocation.back(); };
    PathLocationStrategy.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    PathLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [APP_BASE_HREF,] },] },
    ]; };
    return PathLocationStrategy;
}(LocationStrategy));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY
// See angular/tools/gulp-tasks/cldr/extract.js
/**
 * \@internal
 */
var CURRENCIES = {
    'AOA': [, 'Kz'],
    'ARS': [, '$'],
    'AUD': ['A$', '$'],
    'BAM': [, 'KM'],
    'BBD': [, '$'],
    'BDT': [, '৳'],
    'BMD': [, '$'],
    'BND': [, '$'],
    'BOB': [, 'Bs'],
    'BRL': ['R$'],
    'BSD': [, '$'],
    'BWP': [, 'P'],
    'BYN': [, 'р.'],
    'BZD': [, '$'],
    'CAD': ['CA$', '$'],
    'CLP': [, '$'],
    'CNY': ['CN¥', '¥'],
    'COP': [, '$'],
    'CRC': [, '₡'],
    'CUC': [, '$'],
    'CUP': [, '$'],
    'CZK': [, 'Kč'],
    'DKK': [, 'kr'],
    'DOP': [, '$'],
    'EGP': [, 'E£'],
    'ESP': [, '₧'],
    'EUR': ['€'],
    'FJD': [, '$'],
    'FKP': [, '£'],
    'GBP': ['£'],
    'GEL': [, '₾'],
    'GIP': [, '£'],
    'GNF': [, 'FG'],
    'GTQ': [, 'Q'],
    'GYD': [, '$'],
    'HKD': ['HK$', '$'],
    'HNL': [, 'L'],
    'HRK': [, 'kn'],
    'HUF': [, 'Ft'],
    'IDR': [, 'Rp'],
    'ILS': ['₪'],
    'INR': ['₹'],
    'ISK': [, 'kr'],
    'JMD': [, '$'],
    'JPY': ['¥'],
    'KHR': [, '៛'],
    'KMF': [, 'CF'],
    'KPW': [, '₩'],
    'KRW': ['₩'],
    'KYD': [, '$'],
    'KZT': [, '₸'],
    'LAK': [, '₭'],
    'LBP': [, 'L£'],
    'LKR': [, 'Rs'],
    'LRD': [, '$'],
    'LTL': [, 'Lt'],
    'LVL': [, 'Ls'],
    'MGA': [, 'Ar'],
    'MMK': [, 'K'],
    'MNT': [, '₮'],
    'MUR': [, 'Rs'],
    'MXN': ['MX$', '$'],
    'MYR': [, 'RM'],
    'NAD': [, '$'],
    'NGN': [, '₦'],
    'NIO': [, 'C$'],
    'NOK': [, 'kr'],
    'NPR': [, 'Rs'],
    'NZD': ['NZ$', '$'],
    'PHP': [, '₱'],
    'PKR': [, 'Rs'],
    'PLN': [, 'zł'],
    'PYG': [, '₲'],
    'RON': [, 'lei'],
    'RUB': [, '₽'],
    'RUR': [, 'р.'],
    'RWF': [, 'RF'],
    'SBD': [, '$'],
    'SEK': [, 'kr'],
    'SGD': [, '$'],
    'SHP': [, '£'],
    'SRD': [, '$'],
    'SSP': [, '£'],
    'STD': [, 'Db'],
    'SYP': [, '£'],
    'THB': [, '฿'],
    'TOP': [, 'T$'],
    'TRY': [, '₺'],
    'TTD': [, '$'],
    'TWD': ['NT$', '$'],
    'UAH': [, '₴'],
    'USD': ['$'],
    'UYU': [, '$'],
    'VEF': [, 'Bs'],
    'VND': ['₫'],
    'XAF': ['FCFA'],
    'XCD': ['EC$', '$'],
    'XOF': ['CFA'],
    'XPF': ['CFPF'],
    'ZAR': [, 'R'],
    'ZMW': [, 'ZK'],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY
// See angular/tools/gulp-tasks/cldr/extract.js
/**
 * @param {?} n
 * @return {?}
 */
function plural(n) {
    var /** @type {?} */ i = Math.floor(Math.abs(n)), /** @type {?} */ v = n.toString().replace(/^[^.]*\.?/, '').length;
    if (i === 1 && v === 0)
        return 1;
    return 5;
}
var localeEn = [
    'en',
    [
        ['a', 'p'],
        ['AM', 'PM'],
    ],
    [
        ['AM', 'PM'],
        ,
    ],
    [
        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
    ],
    ,
    [
        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        [
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
            'October', 'November', 'December'
        ]
    ],
    ,
    [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],
    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],
    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],
    [
        '{1}, {0}',
        ,
        '{1} \'at\' {0}',
    ],
    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],
    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', plural
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental i18n support is experimental.
 */
var LOCALE_DATA = {};
/**
 * Register global data to be used internally by Angular. See the
 * {\@linkDocs guide/i18n#i18n-pipes "I18n guide"} to know how to import additional locale data.
 *
 * \@experimental i18n support is experimental.
 * @param {?} data
 * @param {?=} localeId
 * @param {?=} extraData
 * @return {?}
 */
function registerLocaleData(data, localeId, extraData) {
    if (typeof localeId !== 'string') {
        extraData = localeId;
        localeId = data[0 /* LocaleId */];
    }
    localeId = localeId.toLowerCase().replace(/_/g, '-');
    LOCALE_DATA[localeId] = data;
    if (extraData) {
        LOCALE_DATA[localeId][18 /* ExtraData */] = extraData;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var NumberFormatStyle = {
    Decimal: 0,
    Percent: 1,
    Currency: 2,
    Scientific: 3,
};
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
NumberFormatStyle[NumberFormatStyle.Scientific] = "Scientific";
/** @enum {number} */
var Plural = {
    Zero: 0,
    One: 1,
    Two: 2,
    Few: 3,
    Many: 4,
    Other: 5,
};
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
/** @enum {number} */
var FormStyle = {
    Format: 0,
    Standalone: 1,
};
FormStyle[FormStyle.Format] = "Format";
FormStyle[FormStyle.Standalone] = "Standalone";
/** @enum {number} */
var TranslationWidth = {
    Narrow: 0,
    Abbreviated: 1,
    Wide: 2,
    Short: 3,
};
TranslationWidth[TranslationWidth.Narrow] = "Narrow";
TranslationWidth[TranslationWidth.Abbreviated] = "Abbreviated";
TranslationWidth[TranslationWidth.Wide] = "Wide";
TranslationWidth[TranslationWidth.Short] = "Short";
/** @enum {number} */
var FormatWidth = {
    Short: 0,
    Medium: 1,
    Long: 2,
    Full: 3,
};
FormatWidth[FormatWidth.Short] = "Short";
FormatWidth[FormatWidth.Medium] = "Medium";
FormatWidth[FormatWidth.Long] = "Long";
FormatWidth[FormatWidth.Full] = "Full";
/** @enum {number} */
var NumberSymbol = {
    Decimal: 0,
    Group: 1,
    List: 2,
    PercentSign: 3,
    PlusSign: 4,
    MinusSign: 5,
    Exponential: 6,
    SuperscriptingExponent: 7,
    PerMille: 8,
    Infinity: 9,
    NaN: 10,
    TimeSeparator: 11,
    CurrencyDecimal: 12,
    CurrencyGroup: 13,
};
NumberSymbol[NumberSymbol.Decimal] = "Decimal";
NumberSymbol[NumberSymbol.Group] = "Group";
NumberSymbol[NumberSymbol.List] = "List";
NumberSymbol[NumberSymbol.PercentSign] = "PercentSign";
NumberSymbol[NumberSymbol.PlusSign] = "PlusSign";
NumberSymbol[NumberSymbol.MinusSign] = "MinusSign";
NumberSymbol[NumberSymbol.Exponential] = "Exponential";
NumberSymbol[NumberSymbol.SuperscriptingExponent] = "SuperscriptingExponent";
NumberSymbol[NumberSymbol.PerMille] = "PerMille";
NumberSymbol[NumberSymbol.Infinity] = "Infinity";
NumberSymbol[NumberSymbol.NaN] = "NaN";
NumberSymbol[NumberSymbol.TimeSeparator] = "TimeSeparator";
NumberSymbol[NumberSymbol.CurrencyDecimal] = "CurrencyDecimal";
NumberSymbol[NumberSymbol.CurrencyGroup] = "CurrencyGroup";
/** @enum {number} */
var WeekDay = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
WeekDay[WeekDay.Sunday] = "Sunday";
WeekDay[WeekDay.Monday] = "Monday";
WeekDay[WeekDay.Tuesday] = "Tuesday";
WeekDay[WeekDay.Wednesday] = "Wednesday";
WeekDay[WeekDay.Thursday] = "Thursday";
WeekDay[WeekDay.Friday] = "Friday";
WeekDay[WeekDay.Saturday] = "Saturday";
/**
 * The locale id for the chosen locale (e.g `en-GB`).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleId(locale) {
    return findLocaleData(locale)[0 /* LocaleId */];
}
/**
 * Periods of the day (e.g. `[AM, PM]` for en-US).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} formStyle
 * @param {?} width
 * @return {?}
 */
function getLocaleDayPeriods(locale, formStyle, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ amPmData = /** @type {?} */ ([data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]]);
    var /** @type {?} */ amPm = getLastDefinedValue(amPmData, formStyle);
    return getLastDefinedValue(amPm, width);
}
/**
 * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} formStyle
 * @param {?} width
 * @return {?}
 */
function getLocaleDayNames(locale, formStyle, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ daysData = /** @type {?} */ ([data[3 /* DaysFormat */], data[4 /* DaysStandalone */]]);
    var /** @type {?} */ days = getLastDefinedValue(daysData, formStyle);
    return getLastDefinedValue(days, width);
}
/**
 * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} formStyle
 * @param {?} width
 * @return {?}
 */
function getLocaleMonthNames(locale, formStyle, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ monthsData = /** @type {?} */ ([data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]]);
    var /** @type {?} */ months = getLastDefinedValue(monthsData, formStyle);
    return getLastDefinedValue(months, width);
}
/**
 * Eras for the Gregorian calendar (e.g. AD/BC).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} width
 * @return {?}
 */
function getLocaleEraNames(locale, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ erasData = /** @type {?} */ (data[7 /* Eras */]);
    return getLastDefinedValue(erasData, width);
}
/**
 * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).
 * For example in french the value would be 1 because the first day of the week is Monday.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleFirstDayOfWeek(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[8 /* FirstDayOfWeek */];
}
/**
 * Range of days in the week that represent the week-end for this locale, based on english days
 * (Sunday = 0, Monday = 1, ...).
 * For example in english the value would be [6,0] for Saturday to Sunday.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleWeekEndRange(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[9 /* WeekendRange */];
}
/**
 * Date format that depends on the locale.
 *
 * There are four basic date formats:
 * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).
 *
 *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like
 *  "Tuesday, September 14, 1999".
 *
 * - `long` should contain year, long-month, day.
 *
 *  For example, `MMMM d, y`, corresponding to a date like "September 14, 1999".
 *
 * - `medium` should contain year, abbreviated-month (MMM), day.
 *
 *  For example, `MMM d, y`, corresponding to a date like "Sep 14, 1999".
 *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,
 *  `y/MM/dd`, corresponding to a date like "1999/09/14".
 *
 * - `short` should contain year, numeric-month (MM/M), and day.
 *
 *  For example, `M/d/yy`, corresponding to a date like "9/14/99".
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} width
 * @return {?}
 */
function getLocaleDateFormat(locale, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    return getLastDefinedValue(data[10 /* DateFormat */], width);
}
/**
 * Time format that depends on the locale.
 *
 * The standard formats include four basic time formats:
 * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).
 * - `long` should contain hour, minute, second, and zone (z)
 * - `medium` should contain hour, minute, second.
 * - `short` should contain hour, minute.
 *
 * Note: The patterns depend on whether the main country using your language uses 12-hour time or
 * not:
 * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running
 * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle
 * running 0 through 11 (midnight plus 1 minute is 0:01).
 * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0
 * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running
 * 1 through 24 (midnight plus 1 minute is 24:01).
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} width
 * @return {?}
 */
function getLocaleTimeFormat(locale, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    return getLastDefinedValue(data[11 /* TimeFormat */], width);
}
/**
 * Date-time format that depends on the locale.
 *
 * The date-time pattern shows how to combine separate patterns for date (represented by {1})
 * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.
 * What you want to pay attention to are:
 * - possibly removing a space for languages that don't use it, such as many East Asian languages
 * - possibly adding a comma, other punctuation, or a combining word
 *
 * For example:
 * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses
 *  `{1}{0}`.
 * - An English formatted date-time using the combining pattern `{1}, {0}` could be
 *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time
 *  portion.
 *
 * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use
 * is normally based on the date style. For example, if the date has a full month and weekday
 * name, the full combining pattern will be used to combine that with a time. If the date has
 * numeric month, the short version of the combining pattern will be used to combine that with a
 * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short
 * styles.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} width
 * @return {?}
 */
function getLocaleDateTimeFormat(locale, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ dateTimeFormatData = /** @type {?} */ (data[12 /* DateTimeFormat */]);
    return getLastDefinedValue(dateTimeFormatData, width);
}
/**
 * Number symbol that can be used to replace placeholders in number formats.
 * See {\@link NumberSymbol} for more information.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} symbol
 * @return {?}
 */
function getLocaleNumberSymbol(locale, symbol) {
    var /** @type {?} */ data = findLocaleData(locale);
    var /** @type {?} */ res = data[13 /* NumberSymbols */][symbol];
    if (typeof res === 'undefined') {
        if (symbol === NumberSymbol.CurrencyDecimal) {
            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];
        }
        else if (symbol === NumberSymbol.CurrencyGroup) {
            return data[13 /* NumberSymbols */][NumberSymbol.Group];
        }
    }
    return res;
}
/**
 * Number format that depends on the locale.
 *
 * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
 * when used to format the number 12345.678 could result in "12'345,67". That would happen if the
 * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
 *
 * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;
 * they stand for the decimal separator, and so on, and are NOT real characters.
 * You must NOT "translate" the placeholders; for example, don't change `.` to `,` even though in
 * your language the decimal point is written with a comma. The symbols should be replaced by the
 * local equivalents, using the Number Symbols for your language.
 *
 * Here are the special characters used in number patterns:
 *
 * | Symbol | Meaning |
 * |--------|---------|
 * | . | Replaced automatically by the character used for the decimal point. |
 * | , | Replaced by the "grouping" (thousands) separator. |
 * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
 * | # | Replaced by a digit (or nothing if there aren't enough). |
 * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |
 * | % | This marks a percent format. The % symbol may change position, but must be retained. |
 * | E | This marks a scientific format. The E symbol may change position, but must be retained. |
 * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
 *
 * You can find more information
 * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} type
 * @return {?}
 */
function getLocaleNumberFormat(locale, type) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[14 /* NumberFormats */][type];
}
/**
 * The symbol used to represent the currency for the main country using this locale (e.g. $ for
 * the locale en-US).
 * The symbol will be `null` if the main country cannot be determined.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleCurrencySymbol(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[15 /* CurrencySymbol */] || null;
}
/**
 * The name of the currency for the main country using this locale (e.g. USD for the locale
 * en-US).
 * The name will be `null` if the main country cannot be determined.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleCurrencyName(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[16 /* CurrencyName */] || null;
}
/**
 * The locale plural function used by ICU expressions to determine the plural case to use.
 * See {\@link NgPlural} for more information.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocalePluralCase(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    return data[17 /* PluralCase */];
}
/**
 * @param {?} data
 * @return {?}
 */
function checkFullData(data) {
    if (!data[18 /* ExtraData */]) {
        throw new Error("Missing extra locale data for the locale \"" + data[0 /* LocaleId */] + "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.");
    }
}
/**
 * Rules used to determine which day period to use (See `dayPeriods` below).
 * The rules can either be an array or a single value. If it's an array, consider it as "from"
 * and "to". If it's a single value then it means that the period is only valid at this exact
 * value.
 * There is always the same number of rules as the number of day periods, which means that the
 * first rule is applied to the first day period and so on.
 * You should fallback to AM/PM when there are no rules available.
 *
 * Note: this is only available if you load the full locale data.
 * See the {\@linkDocs guide/i18n#i18n-pipes "I18n guide"} to know how to import additional locale
 * data.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function getLocaleExtraDayPeriodRules(locale) {
    var /** @type {?} */ data = findLocaleData(locale);
    checkFullData(data);
    var /** @type {?} */ rules = data[18 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];
    return rules.map(function (rule) {
        if (typeof rule === 'string') {
            return extractTime(rule);
        }
        return [extractTime(rule[0]), extractTime(rule[1])];
    });
}
/**
 * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,
 * noon, afternoon, midnight, ...).
 * You should use the function {\@link getLocaleExtraDayPeriodRules} to determine which period to
 * use.
 * You should fallback to AM/PM when there are no day periods available.
 *
 * Note: this is only available if you load the full locale data.
 * See the {\@linkDocs guide/i18n#i18n-pipes "I18n guide"} to know how to import additional locale
 * data.
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @param {?} formStyle
 * @param {?} width
 * @return {?}
 */
function getLocaleExtraDayPeriods(locale, formStyle, width) {
    var /** @type {?} */ data = findLocaleData(locale);
    checkFullData(data);
    var /** @type {?} */ dayPeriodsData = /** @type {?} */ ([
        data[18 /* ExtraData */][0 /* ExtraDayPeriodFormats */],
        data[18 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]
    ]);
    var /** @type {?} */ dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
    return getLastDefinedValue(dayPeriods, width) || [];
}
/**
 * Returns the first value that is defined in an array, going backwards.
 *
 * To avoid repeating the same data (e.g. when "format" and "standalone" are the same) we only
 * add the first one to the locale data arrays, the other ones are only defined when different.
 * We use this function to retrieve the first defined value.
 *
 * \@experimental i18n support is experimental.
 * @template T
 * @param {?} data
 * @param {?} index
 * @return {?}
 */
function getLastDefinedValue(data, index) {
    for (var /** @type {?} */ i = index; i > -1; i--) {
        if (typeof data[i] !== 'undefined') {
            return data[i];
        }
    }
    throw new Error('Locale data API: locale data undefined');
}
/**
 * Extract the hours and minutes from a string like "15:45"
 * @param {?} time
 * @return {?}
 */
function extractTime(time) {
    var _a = time.split(':'), h = _a[0], m = _a[1];
    return { hours: +h, minutes: +m };
}
/**
 * Finds the locale data for a locale id
 *
 * \@experimental i18n support is experimental.
 * @param {?} locale
 * @return {?}
 */
function findLocaleData(locale) {
    var /** @type {?} */ normalizedLocale = locale.toLowerCase().replace(/_/g, '-');
    var /** @type {?} */ match = LOCALE_DATA[normalizedLocale];
    if (match) {
        return match;
    }
    // let's try to find a parent locale
    var /** @type {?} */ parentLocale = normalizedLocale.split('-')[0];
    match = LOCALE_DATA[parentLocale];
    if (match) {
        return match;
    }
    if (parentLocale === 'en') {
        return localeEn;
    }
    throw new Error("Missing locale data for the locale \"" + locale + "\".");
}
/**
 * Return the currency symbol for a given currency code, or the code if no symbol available
 * (e.g.: format narrow = $, format wide = US$, code = USD)
 *
 * \@experimental i18n support is experimental.
 * @param {?} code
 * @param {?} format
 * @return {?}
 */
function getCurrencySymbol(code, format) {
    var /** @type {?} */ currency = CURRENCIES[code] || [];
    var /** @type {?} */ symbolNarrow = currency[1];
    if (format === 'narrow' && typeof symbolNarrow === 'string') {
        return symbolNarrow;
    }
    return currency[0] || code;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @deprecated from v5
 */
var DEPRECATED_PLURAL_FN = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('UseV4Plurals');
/**
 * \@experimental
 * @abstract
 */
var NgLocalization = /** @class */ (function () {
    function NgLocalization() {
    }
    return NgLocalization;
}());
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @param {?=} locale
 * @return {?}
 */
function getPluralCategory(value, cases, ngLocalization, locale) {
    var /** @type {?} */ key = "=" + value;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value, locale);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error("No plural message found for value \"" + value + "\"");
}
/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 */
var NgLocaleLocalization = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__["b" /* __extends */])(NgLocaleLocalization, _super);
    function NgLocaleLocalization(locale, /** @deprecated from v5 */
        deprecatedPluralFn) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.deprecatedPluralFn = deprecatedPluralFn;
        return _this;
    }
    /**
     * @param {?} value
     * @param {?=} locale
     * @return {?}
     */
    NgLocaleLocalization.prototype.getPluralCategory = /**
     * @param {?} value
     * @param {?=} locale
     * @return {?}
     */
    function (value, locale) {
        var /** @type {?} */ plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :
            getLocalePluralCase(locale || this.locale)(value);
        switch (plural) {
            case Plural.Zero:
                return 'zero';
            case Plural.One:
                return 'one';
            case Plural.Two:
                return 'two';
            case Plural.Few:
                return 'few';
            case Plural.Many:
                return 'many';
            default:
                return 'other';
        }
    };
    NgLocaleLocalization.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    NgLocaleLocalization.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [DEPRECATED_PLURAL_FN,] },] },
    ]; };
    return NgLocaleLocalization;
}(NgLocalization));
/**
 * Returns the plural case based on the locale
 *
 * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts
 * \@experimental
 * @param {?} locale
 * @param {?} nLike
 * @return {?}
 */
function getPluralCase(locale, nLike) {
    // TODO(vicb): lazy compute
    if (typeof nLike === 'string') {
        nLike = parseInt(/** @type {?} */ (nLike), 10);
    }
    var /** @type {?} */ n = /** @type {?} */ (nLike);
    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var /** @type {?} */ i = Math.floor(Math.abs(n));
    var /** @type {?} */ v = nDecimal.length;
    var /** @type {?} */ f = parseInt(nDecimal, 10);
    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
        case 'af':
        case 'asa':
        case 'az':
        case 'bem':
        case 'bez':
        case 'bg':
        case 'brx':
        case 'ce':
        case 'cgg':
        case 'chr':
        case 'ckb':
        case 'ee':
        case 'el':
        case 'eo':
        case 'es':
        case 'eu':
        case 'fo':
        case 'fur':
        case 'gsw':
        case 'ha':
        case 'haw':
        case 'hu':
        case 'jgo':
        case 'jmc':
        case 'ka':
        case 'kk':
        case 'kkj':
        case 'kl':
        case 'ks':
        case 'ksb':
        case 'ky':
        case 'lb':
        case 'lg':
        case 'mas':
        case 'mgo':
        case 'ml':
        case 'mn':
        case 'nb':
        case 'nd':
        case 'ne':
        case 'nn':
        case 'nnh':
        case 'nyn':
        case 'om':
        case 'or':
        case 'os':
        case 'ps':
        case 'rm':
        case 'rof':
        case 'rwk':
        case 'saq':
        case 'seh':
        case 'sn':
        case 'so':
        case 'sq':
        case 'ta':
        case 'te':
        case 'teo':
        case 'tk':
        case 'tr':
        case 'ug':
        case 'uz':
        case 'vo':
        case 'vun':
        case 'wae':
        case 'xog':
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ak':
        case 'ln':
        case 'mg':
        case 'pa':
        case 'ti':
            if (n === Math.floor(n) && n >= 0 && n <= 1)
                return Plural.One;
            return Plural.Other;
        case 'am':
        case 'as':
        case 'bn':
        case 'fa':
        case 'gu':
        case 'hi':
        case 'kn':
        case 'mr':
        case 'zu':
            if (i === 0 || n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ar':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                return Plural.Many;
            return Plural.Other;
        case 'ast':
        case 'ca':
        case 'de':
        case 'en':
        case 'et':
        case 'fi':
        case 'fy':
        case 'gl':
        case 'it':
        case 'nl':
        case 'sv':
        case 'sw':
        case 'ur':
        case 'yi':
            if (i === 1 && v === 0)
                return Plural.One;
            return Plural.Other;
        case 'be':
            if (n % 10 === 1 && !(n % 100 === 11))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                !(n % 100 >= 12 && n % 100 <= 14))
                return Plural.Few;
            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'br':
            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                return Plural.One;
            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                return Plural.Two;
            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                    n % 100 >= 90 && n % 100 <= 99))
                return Plural.Few;
            if (!(n === 0) && n % 1e6 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'bs':
        case 'hr':
        case 'sr':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14) ||
                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                    !(f % 100 >= 12 && f % 100 <= 14))
                return Plural.Few;
            return Plural.Other;
        case 'cs':
        case 'sk':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'cy':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === 3)
                return Plural.Few;
            if (n === 6)
                return Plural.Many;
            return Plural.Other;
        case 'da':
            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                return Plural.One;
            return Plural.Other;
        case 'dsb':
        case 'hsb':
            if (v === 0 && i % 100 === 1 || f % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2 || f % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                return Plural.Few;
            return Plural.Other;
        case 'ff':
        case 'fr':
        case 'hy':
        case 'kab':
            if (i === 0 || i === 1)
                return Plural.One;
            return Plural.Other;
        case 'fil':
            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                return Plural.One;
            return Plural.Other;
        case 'ga':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === Math.floor(n) && n >= 3 && n <= 6)
                return Plural.Few;
            if (n === Math.floor(n) && n >= 7 && n <= 10)
                return Plural.Many;
            return Plural.Other;
        case 'gd':
            if (n === 1 || n === 11)
                return Plural.One;
            if (n === 2 || n === 12)
                return Plural.Two;
            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                return Plural.Few;
            return Plural.Other;
        case 'gv':
            if (v === 0 && i % 10 === 1)
                return Plural.One;
            if (v === 0 && i % 10 === 2)
                return Plural.Two;
            if (v === 0 &&
                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'he':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === 2 && v === 0)
                return Plural.Two;
            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'is':
            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                return Plural.One;
            return Plural.Other;
        case 'ksh':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'kw':
        case 'naq':
        case 'se':
        case 'smn':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            return Plural.Other;
        case 'lag':
            if (n === 0)
                return Plural.Zero;
            if ((i === 0 || i === 1) && !(n === 0))
                return Plural.One;
            return Plural.Other;
        case 'lt':
            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.Few;
            if (!(f === 0))
                return Plural.Many;
            return Plural.Other;
        case 'lv':
        case 'prg':
            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                return Plural.Zero;
            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                !(v === 2) && f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mk':
            if (v === 0 && i % 10 === 1 || f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mt':
            if (n === 1)
                return Plural.One;
            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                return Plural.Many;
            return Plural.Other;
        case 'pl':
            if (i === 1 && v === 0)
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'pt':
            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                return Plural.One;
            return Plural.Other;
        case 'ro':
            if (i === 1 && v === 0)
                return Plural.One;
            if (!(v === 0) || n === 0 ||
                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                return Plural.Few;
            return Plural.Other;
        case 'ru':
        case 'uk':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && i % 10 === 0 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'shi':
            if (i === 0 || n === 1)
                return Plural.One;
            if (n === Math.floor(n) && n >= 2 && n <= 10)
                return Plural.Few;
            return Plural.Other;
        case 'si':
            if (n === 0 || n === 1 || i === 0 && f === 1)
                return Plural.One;
            return Plural.Other;
        case 'sl':
            if (v === 0 && i % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                return Plural.Few;
            return Plural.Other;
        case 'tzm':
            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                return Plural.One;
            return Plural.Other;
        // When there is no specification, the default is always "other"
        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules
        // > other (required—general plural form — also used if the language only has a single form)
        default:
            return Plural.Other;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */
function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
        var cookie = _a[_i];
        var /** @type {?} */ eqIndex = cookie.indexOf('=');
        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
        if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds and removes CSS classes on an HTML element.
 *
 * \@howToUse
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * \@description
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * \@stable
 */
var NgClass = /** @class */ (function () {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._removeClasses(this._initialClasses);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyClasses(this._initialClasses);
            this._applyClasses(this._rawClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._removeClasses(this._rawClass);
            this._applyClasses(this._initialClasses);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
                if (Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵisListLikeIterable"])(this._rawClass)) {
                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
                }
                else {
                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgClass.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this._iterableDiffer) {
            var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
            if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
            }
        }
        else if (this._keyValueDiffer) {
            var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
            if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyKeyValueChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) {
            if (record.previousValue) {
                _this._toggleClass(record.key, false);
            }
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyIterableChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            if (typeof record.item === 'string') {
                _this._toggleClass(record.item, true);
            }
            else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵstringify"])(record.item));
            }
        });
        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
    };
    /**
     * Applies a collection of CSS classes to the DOM element.
     *
     * For argument of type Set and Array CSS class names contained in those collections are always
     * added.
     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
     * for truthy and removed for falsy).
     * @param {?} rawClassVal
     * @return {?}
     */
    NgClass.prototype._applyClasses = /**
     * Applies a collection of CSS classes to the DOM element.
     *
     * For argument of type Set and Array CSS class names contained in those collections are always
     * added.
     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
     * for truthy and removed for falsy).
     * @param {?} rawClassVal
     * @return {?}
     */
    function (rawClassVal) {
        var _this = this;
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                (/** @type {?} */ (rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, true); });
            }
            else {
                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, !!rawClassVal[klass]); });
            }
        }
    };
    /**
     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
     * purposes.
     * @param {?} rawClassVal
     * @return {?}
     */
    NgClass.prototype._removeClasses = /**
     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
     * purposes.
     * @param {?} rawClassVal
     * @return {?}
     */
    function (rawClassVal) {
        var _this = this;
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                (/** @type {?} */ (rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, false); });
            }
            else {
                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, false); });
            }
        }
    };
    /**
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */
    NgClass.prototype._toggleClass = /**
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */
    function (klass, enabled) {
        var _this = this;
        klass = klass.trim();
        if (klass) {
            klass.split(/\s+/g).forEach(function (klass) {
                if (enabled) {
                    _this._renderer.addClass(_this._ngEl.nativeElement, klass);
                }
                else {
                    _this._renderer.removeClass(_this._ngEl.nativeElement, klass);
                }
            });
        }
    };
    NgClass.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngClass]' },] },
    ];
    /** @nocollapse */
    NgClass.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["KeyValueDiffers"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"], },
    ]; };
    NgClass.propDecorators = {
        "klass": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['class',] },],
        "ngClass": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgClass;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will get destroyed.
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
 * module, then load a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 * ## Example
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 * A more complete example with ngModuleFactory:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
 *
 * \@experimental
 */
var NgComponentOutlet = /** @class */ (function () {
    function NgComponentOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
        this._componentRef = null;
        this._moduleRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgComponentOutlet.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._viewContainerRef.clear();
        this._componentRef = null;
        if (this.ngComponentOutlet) {
            var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
            if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef)
                    this._moduleRef.destroy();
                if (this.ngComponentOutletNgModuleFactory) {
                    var /** @type {?} */ parentModule = elInjector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModuleRef"]);
                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                }
                else {
                    this._moduleRef = null;
                }
            }
            var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
                elInjector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentFactoryResolver"]);
            var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
        }
    };
    /**
     * @return {?}
     */
    NgComponentOutlet.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._moduleRef)
            this._moduleRef.destroy();
    };
    NgComponentOutlet.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngComponentOutlet]' },] },
    ];
    /** @nocollapse */
    NgComponentOutlet.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
    ]; };
    NgComponentOutlet.propDecorators = {
        "ngComponentOutlet": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngComponentOutletInjector": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngComponentOutletContent": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngComponentOutletNgModuleFactory": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgComponentOutlet;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 * @template T
 */
var NgForOfContext = /** @class */ (function () {
    function NgForOfContext($implicit, ngForOf, index, count) {
        this.$implicit = $implicit;
        this.ngForOf = ngForOf;
        this.index = index;
        this.count = count;
    }
    Object.defineProperty(NgForOfContext.prototype, "first", {
        get: /**
         * @return {?}
         */
        function () { return this.index === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "last", {
        get: /**
         * @return {?}
         */
        function () { return this.index === this.count - 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "even", {
        get: /**
         * @return {?}
         */
        function () { return this.index % 2 === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "odd", {
        get: /**
         * @return {?}
         */
        function () { return !this.even; },
        enumerable: true,
        configurable: true
    });
    return NgForOfContext;
}());
/**
 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
 * for each instantiated template inherits from the outer context with the given loop variable
 * set to the current item from the iterable.
 *
 * ### Local Variables
 *
 * `NgForOf` provides several exported values that can be aliased to local variables:
 *
 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
 * more complex then a property access, for example when using the async pipe (`userStreams |
 * async`).
 * - `index: number`: The index of the current item in the iterable.
 * - `first: boolean`: True when the item is the first item in the iterable.
 * - `last: boolean`: True when the item is the last item in the iterable.
 * - `even: boolean`: True when the item has an even index in the iterable.
 * - `odd: boolean`: True when the item has an odd index in the iterable.
 *
 * ```
 * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
 * </li>
 * ```
 *
 * ### Change Propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 * * Otherwise, the DOM element for that item will remain the same.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 *
 * It is possible for the identities of elements in the iterator to change while the data does not.
 * This can happen, for example, if the iterator produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted). This is an expensive operation and should
 * be avoided if possible.
 *
 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
 * `trackBy` takes a function which has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * ### Syntax
 *
 * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
 *
 * With `<ng-template>` element:
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * ### Example
 *
 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
 * example.
 *
 * \@stable
 * @template T
 */
var NgForOf = /** @class */ (function () {
    function NgForOf(_viewContainer, _template, _differs) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._differ = null;
    }
    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
        get: /**
         * @return {?}
         */
        function () { return this._trackByFn; },
        set: /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            if (Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() && fn != null && typeof fn !== 'function') {
                // TODO(vicb): use a log service once there is a public one available
                if (/** @type {?} */ (console) && /** @type {?} */ (console.warn)) {
                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                }
            }
            this._trackByFn = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
                this._template = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgForOf.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('ngForOf' in changes) {
            // React on ngForOf changes only once all inputs have been initialized
            var /** @type {?} */ value = changes['ngForOf'].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
                }
                catch (/** @type {?} */ e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    /**
     * @return {?}
     */
    NgForOf.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
            if (changes)
                this._applyChanges(changes);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgForOf.prototype._applyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var /** @type {?} */ insertTuples = [];
        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
            if (item.previousIndex == null) {
                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(/** @type {?} */ ((null)), _this.ngForOf, -1, -1), currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
            }
            else if (currentIndex == null) {
                _this._viewContainer.remove(adjustedPreviousIndex);
            }
            else {
                var /** @type {?} */ view = /** @type {?} */ ((_this._viewContainer.get(adjustedPreviousIndex)));
                _this._viewContainer.move(view, currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
                insertTuples.push(tuple);
            }
        });
        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
            var /** @type {?} */ viewRef = /** @type {?} */ (this._viewContainer.get(i));
            viewRef.context.index = i;
            viewRef.context.count = ilen;
        }
        changes.forEachIdentityChange(function (record) {
            var /** @type {?} */ viewRef = /** @type {?} */ (_this._viewContainer.get(record.currentIndex));
            viewRef.context.$implicit = record.item;
        });
    };
    /**
     * @param {?} view
     * @param {?} record
     * @return {?}
     */
    NgForOf.prototype._perViewChange = /**
     * @param {?} view
     * @param {?} record
     * @return {?}
     */
    function (view, record) {
        view.context.$implicit = record.item;
    };
    NgForOf.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngFor][ngForOf]' },] },
    ];
    /** @nocollapse */
    NgForOf.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"], },
    ]; };
    NgForOf.propDecorators = {
        "ngForOf": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngForTrackBy": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngForTemplate": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgForOf;
}());
/**
 * @template T
 */
var RecordViewTuple = /** @class */ (function () {
    function RecordViewTuple(record, view) {
        this.record = record;
        this.view = view;
    }
    return RecordViewTuple;
}());
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Conditionally includes a template based on the value of an `expression`.
 *
 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
 * when expression is truthy or falsy respectively. Typically the:
 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
 *  - `else` template is blank unless it is bound.
 *
 * ## Most common usage
 *
 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
 * seen in this example:
 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * ## Showing an alternative template using `else`
 *
 * If it is necessary to display a template when the `expression` is falsy use the `else` template
 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
 * The template can be defined anywhere in the component view but is typically placed right after
 * `ngIf` for readability.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * ## Using non-inlined `then` template
 *
 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
 * change at runtime as shown in this example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * ## Storing conditional result in a variable
 *
 * A common pattern is that we need to show a set of properties from the same object. If the
 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
 * dereferencing a `null` value. This is especially the case when waiting on async data such as
 * when using the `async` pipe as shown in following example:
 *
 * ```
 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
 * ```
 *
 * There are several inefficiencies in the above example:
 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
 *    example above.
 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
 *  - We have to place the `async` pipe in parenthesis.
 *
 * A better way to do this is to use `ngIf` and store the result of the condition in a local
 * variable as shown in the the example below:
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
 *
 * Notice that:
 *  - We use only one `async` pipe and hence only one subscription gets created.
 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
 *  - The local `user` can then be bound repeatedly in a more efficient way.
 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
 *    display the data if `userStream` returns a value.
 *  - We can display an alternative template while waiting for the data.
 *
 * ### Syntax
 *
 * Simple form:
 * - `<div *ngIf="condition">...</div>`
 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
 *
 * Form with an else block:
 * ```
 * <div *ngIf="condition; else elseBlock">...</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with a `then` and `else` block:
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>...</ng-template>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with storing the value locally:
 * ```
 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * \@stable
 */
var NgIf = /** @class */ (function () {
    function NgIf(_viewContainer, templateRef) {
        this._viewContainer = _viewContainer;
        this._context = new NgIfContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
        set: /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            this._context.$implicit = this._context.ngIf = condition;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgIf.prototype, "ngIfThen", {
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgIf.prototype, "ngIfElse", {
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgIf.prototype._updateView = /**
     * @return {?}
     */
    function () {
        if (this._context.$implicit) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    };
    NgIf.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngIf]' },] },
    ];
    /** @nocollapse */
    NgIf.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
    ]; };
    NgIf.propDecorators = {
        "ngIf": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngIfThen": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngIfElse": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgIf;
}());
/**
 * \@stable
 */
var NgIfContext = /** @class */ (function () {
    function NgIfContext() {
        this.$implicit = null;
        this.ngIf = null;
    }
    return NgIfContext;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SwitchView = /** @class */ (function () {
    function SwitchView(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    /**
     * @return {?}
     */
    SwitchView.prototype.create = /**
     * @return {?}
     */
    function () {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    /**
     * @return {?}
     */
    SwitchView.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._created = false;
        this._viewContainerRef.clear();
    };
    /**
     * @param {?} created
     * @return {?}
     */
    SwitchView.prototype.enforceState = /**
     * @param {?} created
     * @return {?}
     */
    function (created) {
        if (created && !this._created) {
            this.create();
        }
        else if (!created && this._created) {
            this.destroy();
        }
    };
    return SwitchView;
}());
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
 *             expression.
 *
 * \@howToUse
 * ```
 *     <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 * \@description
 *
 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
 * switch expression.
 *
 * In other words:
 * - you define a container element (where you place the directive with a switch expression on the
 * `[ngSwitch]="..."` attribute)
 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
 * root elements.
 *
 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
 * be preserved at the location.
 *
 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
 * expression is evaluated.
 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
 * stamped out.
 *
 * \@stable
 */
var NgSwitch = /** @class */ (function () {
    function NgSwitch() {
        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._ngSwitch = newValue;
            if (this._caseCount === 0) {
                this._updateDefaultCases(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    NgSwitch.prototype._addCase = /**
     * \@internal
     * @return {?}
     */
    function () { return this._caseCount++; };
    /** @internal */
    /**
     * \@internal
     * @param {?} view
     * @return {?}
     */
    NgSwitch.prototype._addDefault = /**
     * \@internal
     * @param {?} view
     * @return {?}
     */
    function (view) {
        if (!this._defaultViews) {
            this._defaultViews = [];
        }
        this._defaultViews.push(view);
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    NgSwitch.prototype._matchCase = /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ matched = value == this._ngSwitch;
        this._lastCasesMatched = this._lastCasesMatched || matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        return matched;
    };
    /**
     * @param {?} useDefault
     * @return {?}
     */
    NgSwitch.prototype._updateDefaultCases = /**
     * @param {?} useDefault
     * @return {?}
     */
    function (useDefault) {
        if (this._defaultViews && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
                var /** @type {?} */ defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
            }
        }
    };
    NgSwitch.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitch]' },] },
    ];
    /** @nocollapse */
    NgSwitch.ctorParameters = function () { return []; };
    NgSwitch.propDecorators = {
        "ngSwitch": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgSwitch;
}());
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
 *             given expression evaluate to respectively the same/different value as the switch
 *             expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * </container-element>
 * ```
 * \@description
 *
 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
 * expression.
 *
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */
var NgSwitchCase = /** @class */ (function () {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * @return {?}
     */
    NgSwitchCase.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
    NgSwitchCase.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitchCase]' },] },
    ];
    /** @nocollapse */
    NgSwitchCase.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
        { type: NgSwitch, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] },] },
    ]; };
    NgSwitchCase.propDecorators = {
        "ngSwitchCase": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgSwitchCase;
}());
/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
 * match the
 *             switch expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-other-element *ngSwitchDefault>...</some-other-element>
 * </container-element>
 * ```
 *
 * \@description
 *
 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
 * expression.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */
var NgSwitchDefault = /** @class */ (function () {
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitchDefault]' },] },
    ];
    /** @nocollapse */
    NgSwitchDefault.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
        { type: NgSwitch, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] },] },
    ]; };
    return NgSwitchDefault;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * \@description
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * \@experimental
 */
var NgPlural = /** @class */ (function () {
    function NgPlural(_localization) {
        this._localization = _localization;
        this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._switchValue = value;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */
    NgPlural.prototype.addCase = /**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */
    function (value, switchView) { this._caseViews[value] = switchView; };
    /**
     * @return {?}
     */
    NgPlural.prototype._updateView = /**
     * @return {?}
     */
    function () {
        this._clearViews();
        var /** @type {?} */ cases = Object.keys(this._caseViews);
        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
    };
    /**
     * @return {?}
     */
    NgPlural.prototype._clearViews = /**
     * @return {?}
     */
    function () {
        if (this._activeView)
            this._activeView.destroy();
    };
    /**
     * @param {?} view
     * @return {?}
     */
    NgPlural.prototype._activateView = /**
     * @param {?} view
     * @return {?}
     */
    function (view) {
        if (view) {
            this._activeView = view;
            this._activeView.create();
        }
    };
    NgPlural.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngPlural]' },] },
    ];
    /** @nocollapse */
    NgPlural.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    NgPlural.propDecorators = {
        "ngPlural": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgPlural;
}());
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
 *             given expression matches the plural expression according to CLDR rules.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 * ```
 *
 * See {\@link NgPlural} for more details and example.
 *
 * \@experimental
 */
var NgPluralCase = /** @class */ (function () {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
        this.value = value;
        var /** @type {?} */ isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngPluralCase]' },] },
    ];
    /** @nocollapse */
    NgPluralCase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"], args: ['ngPluralCase',] },] },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: NgPlural, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] },] },
    ]; };
    return NgPluralCase;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Update an HTML element styles.
 *
 * \@howToUse
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 *
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 *
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * \@description
 *
 * The styles are updated according to the value of the expression evaluation:
 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
 * - values are the values assigned to those properties (expressed in the given unit).
 *
 * \@stable
 */
var NgStyle = /** @class */ (function () {
    function NgStyle(_differs, _ngEl, _renderer) {
        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._ngStyle = v;
            if (!this._differ && v) {
                this._differ = this._differs.find(v).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgStyle.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
            if (changes) {
                this._applyChanges(changes);
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgStyle.prototype._applyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
    };
    /**
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    NgStyle.prototype._setStyle = /**
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    function (nameAndUnit, value) {
        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
        value = value != null && unit ? "" + value + unit : value;
        if (value != null) {
            this._renderer.setStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
        }
        else {
            this._renderer.removeStyle(this._ngEl.nativeElement, name);
        }
    };
    NgStyle.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngStyle]' },] },
    ];
    /** @nocollapse */
    NgStyle.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["KeyValueDiffers"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"], },
    ]; };
    NgStyle.propDecorators = {
        "ngStyle": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgStyle;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
 *
 * \@howToUse
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * \@description
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * Note: using the key `$implicit` in the context object will set its value as default.
 *
 * ## Example
 *
 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * \@stable
 */
var NgTemplateOutlet = /** @class */ (function () {
    function NgTemplateOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgTemplateOutlet.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ recreateView = this._shouldRecreateView(changes);
        if (recreateView) {
            if (this._viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
            }
            if (this.ngTemplateOutlet) {
                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
            }
        }
        else {
            if (this._viewRef && this.ngTemplateOutletContext) {
                this._updateExistingContext(this.ngTemplateOutletContext);
            }
        }
    };
    /**
     * We need to re-create existing embedded view if:
     * - templateRef has changed
     * - context has changes
     *
     * We mark context object as changed when the corresponding object
     * shape changes (new properties are added or existing properties are removed).
     * In other words we consider context with the same properties as "the same" even
     * if object reference changes (see https://github.com/angular/angular/issues/13407).
     * @param {?} changes
     * @return {?}
     */
    NgTemplateOutlet.prototype._shouldRecreateView = /**
     * We need to re-create existing embedded view if:
     * - templateRef has changed
     * - context has changes
     *
     * We mark context object as changed when the corresponding object
     * shape changes (new properties are added or existing properties are removed).
     * In other words we consider context with the same properties as "the same" even
     * if object reference changes (see https://github.com/angular/angular/issues/13407).
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ ctxChange = changes['ngTemplateOutletContext'];
        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
    };
    /**
     * @param {?} ctxChange
     * @return {?}
     */
    NgTemplateOutlet.prototype._hasContextShapeChanged = /**
     * @param {?} ctxChange
     * @return {?}
     */
    function (ctxChange) {
        var /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        var /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
            for (var _i = 0, currCtxKeys_1 = currCtxKeys; _i < currCtxKeys_1.length; _i++) {
                var propName = currCtxKeys_1[_i];
                if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                }
            }
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    NgTemplateOutlet.prototype._updateExistingContext = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        for (var _i = 0, _a = Object.keys(ctx); _i < _a.length; _i++) {
            var propName = _a[_i];
            (/** @type {?} */ (this._viewRef.context))[propName] = (/** @type {?} */ (this.ngTemplateOutletContext))[propName];
        }
    };
    NgTemplateOutlet.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngTemplateOutlet]' },] },
    ];
    /** @nocollapse */
    NgTemplateOutlet.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
    ]; };
    NgTemplateOutlet.propDecorators = {
        "ngTemplateOutletContext": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        "ngTemplateOutlet": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return NgTemplateOutlet;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */
var COMMON_DIRECTIVES = [
    NgClass,
    NgComponentOutlet,
    NgForOf,
    NgIf,
    NgTemplateOutlet,
    NgStyle,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    NgPlural,
    NgPluralCase,
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NAMED_FORMATS = {};
var DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
/** @enum {number} */
var ZoneWidth = {
    Short: 0,
    ShortGMT: 1,
    Long: 2,
    Extended: 3,
};
ZoneWidth[ZoneWidth.Short] = "Short";
ZoneWidth[ZoneWidth.ShortGMT] = "ShortGMT";
ZoneWidth[ZoneWidth.Long] = "Long";
ZoneWidth[ZoneWidth.Extended] = "Extended";
/** @enum {number} */
var DateType = {
    FullYear: 0,
    Month: 1,
    Date: 2,
    Hours: 3,
    Minutes: 4,
    Seconds: 5,
    Milliseconds: 6,
    Day: 7,
};
DateType[DateType.FullYear] = "FullYear";
DateType[DateType.Month] = "Month";
DateType[DateType.Date] = "Date";
DateType[DateType.Hours] = "Hours";
DateType[DateType.Minutes] = "Minutes";
DateType[DateType.Seconds] = "Seconds";
DateType[DateType.Milliseconds] = "Milliseconds";
DateType[DateType.Day] = "Day";
/** @enum {number} */
var TranslationType = {
    DayPeriods: 0,
    Days: 1,
    Months: 2,
    Eras: 3,
};
TranslationType[TranslationType.DayPeriods] = "DayPeriods";
TranslationType[TranslationType.Days] = "Days";
TranslationType[TranslationType.Months] = "Months";
TranslationType[TranslationType.Eras] = "Eras";
/**
 * Transforms a date to a locale string based on a pattern and a timezone
 *
 * \@internal
 * @param {?} date
 * @param {?} format
 * @param {?} locale
 * @param {?=} timezone
 * @return {?}
 */
function formatDate(date, format, locale, timezone) {
    var /** @type {?} */ namedFormat = getNamedFormat(locale, format);
    format = namedFormat || format;
    var /** @type {?} */ parts = [];
    var /** @type {?} */ match;
    while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
            parts = parts.concat(match.slice(1));
            var /** @type {?} */ part = parts.pop();
            if (!part) {
                break;
            }
            format = part;
        }
        else {
            parts.push(format);
            break;
        }
    }
    var /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        date = convertTimezoneToLocal(date, timezone, true);
    }
    var /** @type {?} */ text = '';
    parts.forEach(function (value) {
        var /** @type {?} */ dateFormatter = getDateFormatter(value);
        text += dateFormatter ?
            dateFormatter(date, locale, dateTimezoneOffset) :
            value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    });
    return text;
}
/**
 * @param {?} locale
 * @param {?} format
 * @return {?}
 */
function getNamedFormat(locale, format) {
    var /** @type {?} */ localeId = getLocaleId(locale);
    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};
    if (NAMED_FORMATS[localeId][format]) {
        return NAMED_FORMATS[localeId][format];
    }
    var /** @type {?} */ formatValue = '';
    switch (format) {
        case 'shortDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
            break;
        case 'mediumDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
            break;
        case 'longDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
            break;
        case 'fullDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
            break;
        case 'shortTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
            break;
        case 'mediumTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
            break;
        case 'longTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
            break;
        case 'fullTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
            break;
        case 'short':
            var /** @type {?} */ shortTime = getNamedFormat(locale, 'shortTime');
            var /** @type {?} */ shortDate = getNamedFormat(locale, 'shortDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
            break;
        case 'medium':
            var /** @type {?} */ mediumTime = getNamedFormat(locale, 'mediumTime');
            var /** @type {?} */ mediumDate = getNamedFormat(locale, 'mediumDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
            break;
        case 'long':
            var /** @type {?} */ longTime = getNamedFormat(locale, 'longTime');
            var /** @type {?} */ longDate = getNamedFormat(locale, 'longDate');
            formatValue =
                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
            break;
        case 'full':
            var /** @type {?} */ fullTime = getNamedFormat(locale, 'fullTime');
            var /** @type {?} */ fullDate = getNamedFormat(locale, 'fullDate');
            formatValue =
                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
            break;
    }
    if (formatValue) {
        NAMED_FORMATS[localeId][format] = formatValue;
    }
    return formatValue;
}
/**
 * @param {?} str
 * @param {?} opt_values
 * @return {?}
 */
function formatDateTime(str, opt_values) {
    if (opt_values) {
        str = str.replace(/\{([^}]+)}/g, function (match, key) {
            return (opt_values != null && key in opt_values) ? opt_values[key] : match;
        });
    }
    return str;
}
/**
 * @param {?} num
 * @param {?} digits
 * @param {?=} minusSign
 * @param {?=} trim
 * @param {?=} negWrap
 * @return {?}
 */
function padNumber(num, digits, minusSign, trim, negWrap) {
    if (minusSign === void 0) { minusSign = '-'; }
    var /** @type {?} */ neg = '';
    if (num < 0 || (negWrap && num <= 0)) {
        if (negWrap) {
            num = -num + 1;
        }
        else {
            num = -num;
            neg = minusSign;
        }
    }
    var /** @type {?} */ strNum = '' + num;
    while (strNum.length < digits)
        strNum = '0' + strNum;
    if (trim) {
        strNum = strNum.substr(strNum.length - digits);
    }
    return neg + strNum;
}
/**
 * Returns a date formatter that transforms a date into its locale digit representation
 * @param {?} name
 * @param {?} size
 * @param {?=} offset
 * @param {?=} trim
 * @param {?=} negWrap
 * @return {?}
 */
function dateGetter(name, size, offset, trim, negWrap) {
    if (offset === void 0) { offset = 0; }
    if (trim === void 0) { trim = false; }
    if (negWrap === void 0) { negWrap = false; }
    return function (date, locale) {
        var /** @type {?} */ part = getDatePart(name, date, size);
        if (offset > 0 || part > -offset) {
            part += offset;
        }
        if (name === DateType.Hours && part === 0 && offset === -12) {
            part = 12;
        }
        return padNumber(part, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim, negWrap);
    };
}
/**
 * @param {?} name
 * @param {?} date
 * @param {?} size
 * @return {?}
 */
function getDatePart(name, date, size) {
    switch (name) {
        case DateType.FullYear:
            return date.getFullYear();
        case DateType.Month:
            return date.getMonth();
        case DateType.Date:
            return date.getDate();
        case DateType.Hours:
            return date.getHours();
        case DateType.Minutes:
            return date.getMinutes();
        case DateType.Seconds:
            return date.getSeconds();
        case DateType.Milliseconds:
            var /** @type {?} */ div = size === 1 ? 100 : (size === 2 ? 10 : 1);
            return Math.round(date.getMilliseconds() / div);
        case DateType.Day:
            return date.getDay();
        default:
            throw new Error("Unknown DateType value \"" + name + "\".");
    }
}
/**
 * Returns a date formatter that transforms a date into its locale string representation
 * @param {?} name
 * @param {?} width
 * @param {?=} form
 * @param {?=} extended
 * @return {?}
 */
function dateStrGetter(name, width, form, extended) {
    if (form === void 0) { form = FormStyle.Format; }
    if (extended === void 0) { extended = false; }
    return function (date, locale) {
        return getDateTranslation(date, locale, name, width, form, extended);
    };
}
/**
 * Returns the locale translation of a date for a given form, type and width
 * @param {?} date
 * @param {?} locale
 * @param {?} name
 * @param {?} width
 * @param {?} form
 * @param {?} extended
 * @return {?}
 */
function getDateTranslation(date, locale, name, width, form, extended) {
    switch (name) {
        case TranslationType.Months:
            return getLocaleMonthNames(locale, form, width)[date.getMonth()];
        case TranslationType.Days:
            return getLocaleDayNames(locale, form, width)[date.getDay()];
        case TranslationType.DayPeriods:
            var /** @type {?} */ currentHours_1 = date.getHours();
            var /** @type {?} */ currentMinutes_1 = date.getMinutes();
            if (extended) {
                var /** @type {?} */ rules = getLocaleExtraDayPeriodRules(locale);
                var /** @type {?} */ dayPeriods_1 = getLocaleExtraDayPeriods(locale, form, width);
                var /** @type {?} */ result_1;
                rules.forEach(function (rule, index) {
                    if (Array.isArray(rule)) {
                        // morning, afternoon, evening, night
                        var _a = rule[0], hoursFrom = _a.hours, minutesFrom = _a.minutes;
                        var _b = rule[1], hoursTo = _b.hours, minutesTo = _b.minutes;
                        if (currentHours_1 >= hoursFrom && currentMinutes_1 >= minutesFrom &&
                            (currentHours_1 < hoursTo ||
                                (currentHours_1 === hoursTo && currentMinutes_1 < minutesTo))) {
                            result_1 = dayPeriods_1[index];
                        }
                    }
                    else {
                        // noon or midnight
                        var hours = rule.hours, minutes = rule.minutes;
                        if (hours === currentHours_1 && minutes === currentMinutes_1) {
                            result_1 = dayPeriods_1[index];
                        }
                    }
                });
                if (result_1) {
                    return result_1;
                }
            }
            // if no rules for the day periods, we use am/pm by default
            return getLocaleDayPeriods(locale, form, /** @type {?} */ (width))[currentHours_1 < 12 ? 0 : 1];
        case TranslationType.Eras:
            return getLocaleEraNames(locale, /** @type {?} */ (width))[date.getFullYear() <= 0 ? 0 : 1];
        default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            var /** @type {?} */ unexpected = name;
            throw new Error("unexpected translation type " + unexpected);
    }
}
/**
 * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
 * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
 * extended = +04:30)
 * @param {?} width
 * @return {?}
 */
function timeZoneGetter(width) {
    return function (date, locale, offset) {
        var /** @type {?} */ zone = -1 * offset;
        var /** @type {?} */ minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
        var /** @type {?} */ hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
        switch (width) {
            case ZoneWidth.Short:
                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +
                    padNumber(Math.abs(zone % 60), 2, minusSign);
            case ZoneWidth.ShortGMT:
                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);
            case ZoneWidth.Long:
                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
                    padNumber(Math.abs(zone % 60), 2, minusSign);
            case ZoneWidth.Extended:
                if (offset === 0) {
                    return 'Z';
                }
                else {
                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
                        padNumber(Math.abs(zone % 60), 2, minusSign);
                }
            default:
                throw new Error("Unknown zone width \"" + width + "\"");
        }
    };
}
var JANUARY = 0;
var THURSDAY = 4;
/**
 * @param {?} year
 * @return {?}
 */
function getFirstThursdayOfYear(year) {
    var /** @type {?} */ firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();
    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
/**
 * @param {?} datetime
 * @return {?}
 */
function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
}
/**
 * @param {?} size
 * @param {?=} monthBased
 * @return {?}
 */
function weekGetter(size, monthBased) {
    if (monthBased === void 0) { monthBased = false; }
    return function (date, locale) {
        var /** @type {?} */ result;
        if (monthBased) {
            var /** @type {?} */ nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
            var /** @type {?} */ today = date.getDate();
            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
        }
        else {
            var /** @type {?} */ firstThurs = getFirstThursdayOfYear(date.getFullYear());
            var /** @type {?} */ thisThurs = getThursdayThisWeek(date);
            var /** @type {?} */ diff = thisThurs.getTime() - firstThurs.getTime();
            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
        }
        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    };
}
var DATE_FORMATS = {};
/**
 * @param {?} format
 * @return {?}
 */
function getDateFormatter(format) {
    if (DATE_FORMATS[format]) {
        return DATE_FORMATS[format];
    }
    var /** @type {?} */ formatter;
    switch (format) {
        // Era name (AD/BC)
        case 'G':
        case 'GG':
        case 'GGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
            break;
        case 'GGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
            break;
        case 'GGGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
            break;
        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)
        case 'y':
            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
            break;
        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
        case 'yy':
            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
            break;
        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)
        case 'yyy':
            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
            break;
        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)
        case 'yyyy':
            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
            break;
        // Month of the year (1-12), numeric
        case 'M':
        case 'L':
            formatter = dateGetter(DateType.Month, 1, 1);
            break;
        case 'MM':
        case 'LL':
            formatter = dateGetter(DateType.Month, 2, 1);
            break;
        // Month of the year (January, ...), string, format
        case 'MMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
            break;
        case 'MMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
            break;
        case 'MMMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
            break;
        // Month of the year (January, ...), string, standalone
        case 'LLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
            break;
        case 'LLLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
            break;
        case 'LLLLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
            break;
        // Week of the year (1, ... 52)
        case 'w':
            formatter = weekGetter(1);
            break;
        case 'ww':
            formatter = weekGetter(2);
            break;
        // Week of the month (1, ...)
        case 'W':
            formatter = weekGetter(1, true);
            break;
        // Day of the month (1-31)
        case 'd':
            formatter = dateGetter(DateType.Date, 1);
            break;
        case 'dd':
            formatter = dateGetter(DateType.Date, 2);
            break;
        // Day of the Week
        case 'E':
        case 'EE':
        case 'EEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
            break;
        case 'EEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
            break;
        case 'EEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
            break;
        case 'EEEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
            break;
        // Generic period of the day (am-pm)
        case 'a':
        case 'aa':
        case 'aaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
            break;
        case 'aaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
            break;
        case 'aaaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
            break;
        // Extended period of the day (midnight, at night, ...), standalone
        case 'b':
        case 'bb':
        case 'bbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
            break;
        case 'bbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
            break;
        case 'bbbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
            break;
        // Extended period of the day (midnight, night, ...), standalone
        case 'B':
        case 'BB':
        case 'BBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
            break;
        case 'BBBB':
            formatter =
                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
            break;
        case 'BBBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
            break;
        // Hour in AM/PM, (1-12)
        case 'h':
            formatter = dateGetter(DateType.Hours, 1, -12);
            break;
        case 'hh':
            formatter = dateGetter(DateType.Hours, 2, -12);
            break;
        // Hour of the day (0-23)
        case 'H':
            formatter = dateGetter(DateType.Hours, 1);
            break;
        // Hour in day, padded (00-23)
        case 'HH':
            formatter = dateGetter(DateType.Hours, 2);
            break;
        // Minute of the hour (0-59)
        case 'm':
            formatter = dateGetter(DateType.Minutes, 1);
            break;
        case 'mm':
            formatter = dateGetter(DateType.Minutes, 2);
            break;
        // Second of the minute (0-59)
        case 's':
            formatter = dateGetter(DateType.Seconds, 1);
            break;
        case 'ss':
            formatter = dateGetter(DateType.Seconds, 2);
            break;
        // Fractional second padded (0-9)
        case 'S':
            formatter = dateGetter(DateType.Milliseconds, 1);
            break;
        case 'SS':
            formatter = dateGetter(DateType.Milliseconds, 2);
            break;
        // = millisecond
        case 'SSS':
            formatter = dateGetter(DateType.Milliseconds, 3);
            break;
        // Timezone ISO8601 short format (-0430)
        case 'Z':
        case 'ZZ':
        case 'ZZZ':
            formatter = timeZoneGetter(ZoneWidth.Short);
            break;
        // Timezone ISO8601 extended format (-04:30)
        case 'ZZZZZ':
            formatter = timeZoneGetter(ZoneWidth.Extended);
            break;
        // Timezone GMT short format (GMT+4)
        case 'O':
        case 'OO':
        case 'OOO':
        // Should be location, but fallback to format O instead because we don't have the data yet
        case 'z':
        case 'zz':
        case 'zzz':
            formatter = timeZoneGetter(ZoneWidth.ShortGMT);
            break;
        // Timezone GMT long format (GMT+0430)
        case 'OOOO':
        case 'ZZZZ':
        // Should be location, but fallback to format O instead because we don't have the data yet
        case 'zzzz':
            formatter = timeZoneGetter(ZoneWidth.Long);
            break;
        default:
            return null;
    }
    DATE_FORMATS[format] = formatter;
    return formatter;
}
/**
 * @param {?} timezone
 * @param {?} fallback
 * @return {?}
 */
function timezoneToOffset(timezone, fallback) {
    // Support: IE 9-11 only, Edge 13-15+
    // IE/Edge do not "understand" colon (`:`) in timezone
    timezone = timezone.replace(/:/g, '');
    var /** @type {?} */ requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
/**
 * @param {?} date
 * @param {?} minutes
 * @return {?}
 */
function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
}
/**
 * @param {?} date
 * @param {?} timezone
 * @param {?} reverse
 * @return {?}
 */
function convertTimezoneToLocal(date, timezone, reverse) {
    var /** @type {?} */ reverseValue = reverse ? -1 : 1;
    var /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();
    var /** @type {?} */ timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */
function invalidPipeArgumentError(type, value) {
    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵstringify"])(type) + "'");
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a date according to locale rules.
 * \@howToUse `date_expression | date[:format[:timezone[:locale]]]`
 * \@description
 *
 * Where:
 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
 * (https://www.w3.org/TR/NOTE-datetime).
 * - `format` indicates which date/time components to include. The format can be predefined as
 *   shown below (all examples are given for `en-US`) or custom as shown in the table.
 *   - `'short'`: equivalent to `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)
 *   - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)
 *   - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)
 *   - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at
 * 9:03:01 AM GMT+01:00`)
 *   - `'shortDate'`: equivalent to `'M/d/yy'` (e.g. `6/15/15`)
 *   - `'mediumDate'`: equivalent to `'MMM d, y'` (e.g. `Jun 15, 2015`)
 *   - `'longDate'`: equivalent to `'MMMM d, y'` (e.g. `June 15, 2015`)
 *   - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (e.g. `Monday, June 15, 2015`)
 *   - `'shortTime'`: equivalent to `'h:mm a'` (e.g. `9:03 AM`)
 *   - `'mediumTime'`: equivalent to `'h:mm:ss a'` (e.g. `9:03:01 AM`)
 *   - `'longTime'`: equivalent to `'h:mm:ss a z'` (e.g. `9:03:01 AM GMT+1`)
 *   - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (e.g. `9:03:01 AM GMT+01:00`)
 *  - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone
 *  abbreviations, but for general use, use a time zone offset, for example,
 *  `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *  If not specified, the local system timezone of the end-user's browser will be used.
 *  - `locale` is a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
 * default)
 *
 *
 *  | Field Type         | Format      | Description                                                   | Example Value                                              |
 *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|
 *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |
 *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |
 *  |                    | GGGGG       | Narrow                                                        | A                                                          |
 *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |
 *  |                    | MMMM        | Wide                                                          | September                                                  |
 *  |                    | MMMMM       | Narrow                                                        | S                                                          |
 *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |
 *  |                    | LLLL        | Wide                                                          | September                                                  |
 *  |                    | LLLLL       | Narrow                                                        | S                                                          |
 *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |
 *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
 *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |
 *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |
 *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |
 *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
 *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |
 *  |                    | EEEEE       | Narrow                                                        | T                                                          |
 *  |                    | EEEEEE      | Short                                                         | Tu                                                         |
 *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
 *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
 *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |
 *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
 *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                    | BBBBB       | Narrow                                                        | md                                                         |
 *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
 *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                    | bbbbb       | Narrow                                                        | md                                                         |
 *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |
 *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
 *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |
 *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
 *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |
 *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
 *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |
 *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
 *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |
 *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
 *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
 *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
 *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
 *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
 *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
 *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
 *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
 *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
 *
 *
 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
 * applied and the formatted text will have the same day, month and year of the expression.
 *
 * WARNINGS:
 * - this pipe has only access to en-US locale data by default. If you want to localize the dates
 *   in another language, you will have to import data for other locales.
 *   See the {\@linkDocs guide/i18n#i18n-pipes "I18n guide"} to know how to import additional locale
 *   data.
 * - Fields suffixed with * are only available in the extra dataset.
 *   See the {\@linkDocs guide/i18n#i18n-pipes "I18n guide"} to know how to import extra locale
 *   data.
 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
 *   Instead users should treat the date as an immutable object and change the reference when the
 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
 *   which would be an expensive operation).
 *
 * ### Examples
 *
 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
 * in the _local_ time and locale is 'en-US':
 *
 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
 *
 * \@stable
 */
var DatePipe = /** @class */ (function () {
    function DatePipe(locale) {
        this.locale = locale;
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @param {?=} timezone
     * @param {?=} locale
     * @return {?}
     */
    DatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} format
     * @param {?=} timezone
     * @param {?=} locale
     * @return {?}
     */
    function (value, format, timezone, locale) {
        if (format === void 0) { format = 'mediumDate'; }
        if (value == null || value === '' || value !== value)
            return null;
        if (typeof value === 'string') {
            value = value.trim();
        }
        var /** @type {?} */ date;
        var /** @type {?} */ match;
        if (isDate$1(value)) {
            date = value;
        }
        else if (!isNaN(value - parseFloat(value))) {
            date = new Date(parseFloat(value));
        }
        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            /**
             * For ISO Strings without time the day, month and year must be extracted from the ISO String
             * before Date creation to avoid time offset and errors in the new Date.
             * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
             * date, some browsers (e.g. IE 9) will throw an invalid Date error
             * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
             * is applied
             * Note: ISO months are 0 for January, 1 for February, ...
             */
            var _a = value.split('-').map(function (val) { return +val; }), y = _a[0], m = _a[1], d = _a[2];
            date = new Date(y, m - 1, d);
        }
        else if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
            date = isoStringToDate(match);
        }
        else {
            date = new Date(value);
        }
        if (!isDate$1(date)) {
            throw invalidPipeArgumentError(DatePipe, value);
        }
        return formatDate(date, format, locale || this.locale, timezone);
    };
    DatePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'date', pure: true },] },
    ];
    /** @nocollapse */
    DatePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DatePipe;
}());
/**
 * \@internal
 * @param {?} match
 * @return {?}
 */
function isoStringToDate(match) {
    var /** @type {?} */ date = new Date(0);
    var /** @type {?} */ tzHour = 0;
    var /** @type {?} */ tzMin = 0;
    // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"
    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
    // if there is a timezone defined like "+01:00" or "+0100"
    if (match[9]) {
        tzHour = +(match[9] + match[10]);
        tzMin = +(match[9] + match[11]);
    }
    dateSetter.call(date, +(match[1]), +(match[2]) - 1, +(match[3]));
    var /** @type {?} */ h = +(match[4] || '0') - tzHour;
    var /** @type {?} */ m = +(match[5] || '0') - tzMin;
    var /** @type {?} */ s = +(match[6] || '0');
    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}
/**
 * @param {?} value
 * @return {?}
 */
function isDate$1(value) {
    return value instanceof Date && !isNaN(value.valueOf());
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NumberFormatter = /** @class */ (function () {
    function NumberFormatter() {
    }
    /**
     * @param {?} num
     * @param {?} locale
     * @param {?} style
     * @param {?=} opts
     * @return {?}
     */
    NumberFormatter.format = /**
     * @param {?} num
     * @param {?} locale
     * @param {?} style
     * @param {?=} opts
     * @return {?}
     */
    function (num, locale, style, opts) {
        if (opts === void 0) { opts = {}; }
        var minimumIntegerDigits = opts.minimumIntegerDigits, minimumFractionDigits = opts.minimumFractionDigits, maximumFractionDigits = opts.maximumFractionDigits, currency = opts.currency, _a = opts.currencyAsSymbol, currencyAsSymbol = _a === void 0 ? false : _a;
        var /** @type {?} */ options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
        };
        if (style == NumberFormatStyle.Currency) {
            options.currency = typeof currency == 'string' ? currency : undefined;
            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
}());
var DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
    // Keys are quoted so they do not get renamed during closure compilation.
    'yMMMdjms': datePartGetterFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1),
        digitCondition('second', 1),
    ])),
    'yMdjm': datePartGetterFactory(combine([
        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
        digitCondition('hour', 1), digitCondition('minute', 1)
    ])),
    'yMMMMEEEEd': datePartGetterFactory(combine([
        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
        digitCondition('day', 1)
    ])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
};
var DATE_FORMATS$1 = {
    // Keys are quoted so they do not get renamed.
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit
    // fractions
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter$1('short'),
    'z': timeZoneGetter$1('long'),
    'ww': datePartGetterFactory({}),
    // Week of year, padded (00-53). Week 01 is the week with the
    // first Thursday of the year. not support ?
    'w': datePartGetterFactory({}),
    // Week of year (0-53). Week 1 is the week with the first Thursday
    // of the year not support ?
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
};
/**
 * @param {?} inner
 * @return {?}
 */
function digitModifier(inner) {
    return function (date, locale) {
        var /** @type {?} */ result = inner(date, locale);
        return result.length == 1 ? '0' + result : result;
    };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourClockExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
}
/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
}
/**
 * @param {?} timezone
 * @return {?}
 */
function timeZoneGetter$1(timezone) {
    // To workaround `Intl` API restriction for single timezone let format with 24 hours
    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
    return function (date, locale) {
        var /** @type {?} */ result = intlDateFormat(date, locale, options);
        // Then extract first 3 letters that related to hours
        return result ? result.substring(3) : '';
    };
}
/**
 * @param {?} options
 * @param {?} value
 * @return {?}
 */
function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function digitCondition(prop, len) {
    var /** @type {?} */ result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function nameCondition(prop, len) {
    var /** @type {?} */ result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    }
    else {
        result[prop] = 'long';
    }
    return result;
}
/**
 * @param {?} options
 * @return {?}
 */
function combine(options) {
    return options.reduce(function (merged, opt) { return (Object(__WEBPACK_IMPORTED_MODULE_1_tslib__["a" /* __assign */])({}, merged, opt)); }, {});
}
/**
 * @param {?} ret
 * @return {?}
 */
function datePartGetterFactory(ret) {
    return function (date, locale) { return intlDateFormat(date, locale, ret); };
}
var DATE_FORMATTER_CACHE = new Map();
/**
 * @param {?} format
 * @param {?} date
 * @param {?} locale
 * @return {?}
 */
function dateFormatter(format, date, locale) {
    var /** @type {?} */ fn = PATTERN_ALIASES[format];
    if (fn)
        return fn(date, locale);
    var /** @type {?} */ cacheKey = format;
    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
        parts = [];
        var /** @type {?} */ match = void 0;
        DATE_FORMATS_SPLIT$1.exec(format);
        var /** @type {?} */ _format = format;
        while (_format) {
            match = DATE_FORMATS_SPLIT$1.exec(_format);
            if (match) {
                parts = parts.concat(match.slice(1));
                _format = /** @type {?} */ ((parts.pop()));
            }
            else {
                parts.push(_format);
                _format = null;
            }
        }
        DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function (text, part) {
        var /** @type {?} */ fn = DATE_FORMATS$1[part];
        return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
}
/**
 * @param {?} part
 * @return {?}
 */
function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
}
var DateFormatter = /** @class */ (function () {
    function DateFormatter() {
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} pattern
     * @return {?}
     */
    DateFormatter.format = /**
     * @param {?} date
     * @param {?} locale
     * @param {?} pattern
     * @return {?}
     */
    function (date, locale, pattern) {
        return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
* @license
* Copyright Google Inc. All Rights Reserved.
*
* Use of this source code is governed by an MIT-style license that can be
* found in the LICENSE file at https://angular.io/license
  */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a date according to locale rules.
 * \@howToUse `date_expression | date[:format]`
 * \@description
 *
 * Where:
 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
 * (https://www.w3.org/TR/NOTE-datetime).
 * - `format` indicates which date/time components to include. The format can be predefined as
 *   shown below or custom as shown in the table.
 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
 *
 *
 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
 *
 * In javascript, only the components specified will be respected (not the ordering,
 * punctuations, ...) and details of the formatting will be dependent on the locale.
 *
 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
 *
 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
 * applied and the formatted text will have the same day, month and year of the expression.
 *
 * WARNINGS:
 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
 *   Instead users should treat the date as an immutable object and change the reference when the
 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
 *   which would be an expensive operation).
 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
 *   browsers.
 *
 * ### Examples
 *
 * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)
 * in the _local_ time and locale is 'en-US':
 *
 * {\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}
 *
 * \@stable
 */
var DeprecatedDatePipe = /** @class */ (function () {
    function DeprecatedDatePipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */
    DeprecatedDatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */
    function (value, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        if (value == null || value === '' || value !== value)
            return null;
        var /** @type {?} */ date;
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (isDate(value)) {
            date = value;
        }
        else if (!isNaN(value - parseFloat(value))) {
            date = new Date(parseFloat(value));
        }
        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            /**
             * For ISO Strings without time the day, month and year must be extracted from the ISO String
             * before Date creation to avoid time offset and errors in the new Date.
             * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
             * date, some browsers (e.g. IE 9) will throw an invalid Date error
             * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the
             * timeoffset
             * is applied
             * Note: ISO months are 0 for January, 1 for February, ...
             */
            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
            date = new Date(y, m - 1, d);
        }
        else {
            date = new Date(value);
        }
        if (!isDate(date)) {
            var /** @type {?} */ match = void 0;
            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
                date = isoStringToDate(match);
            }
            else {
                throw invalidPipeArgumentError(DeprecatedDatePipe, value);
            }
        }
        return DateFormatter.format(date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);
    };
    /**
     * \@internal
     */
    DeprecatedDatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DeprecatedDatePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'date', pure: true },] },
    ];
    /** @nocollapse */
    DeprecatedDatePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DeprecatedDatePipe;
}());
/**
 * @param {?} value
 * @return {?}
 */
function isDate(value) {
    return value instanceof Date && !isNaN(value.valueOf());
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
var MAX_DIGITS = 22;
var DECIMAL_SEP = '.';
var ZERO_CHAR = '0';
var PATTERN_SEP = ';';
var GROUP_SEP = ',';
var DIGIT_CHAR = '#';
var CURRENCY_CHAR = '¤';
var PERCENT_CHAR = '%';
/**
 * Transform a number to a locale string based on a style and a format
 *
 * \@internal
 * @param {?} value
 * @param {?} locale
 * @param {?} style
 * @param {?=} digitsInfo
 * @param {?=} currency
 * @return {?}
 */
function formatNumber$1(value, locale, style, digitsInfo, currency) {
    if (currency === void 0) { currency = null; }
    var /** @type {?} */ res = { str: null };
    var /** @type {?} */ format = getLocaleNumberFormat(locale, style);
    var /** @type {?} */ num;
    // Convert strings to numbers
    if (typeof value === 'string' && !isNaN(+value - parseFloat(value))) {
        num = +value;
    }
    else if (typeof value !== 'number') {
        res.error = value + " is not a number";
        return res;
    }
    else {
        num = value;
    }
    var /** @type {?} */ pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    var /** @type {?} */ formattedText = '';
    var /** @type {?} */ isZero = false;
    if (!isFinite(num)) {
        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
    }
    else {
        var /** @type {?} */ parsedNumber = parseNumber(num);
        if (style === NumberFormatStyle.Percent) {
            parsedNumber = toPercent(parsedNumber);
        }
        var /** @type {?} */ minInt = pattern.minInt;
        var /** @type {?} */ minFraction = pattern.minFrac;
        var /** @type {?} */ maxFraction = pattern.maxFrac;
        if (digitsInfo) {
            var /** @type {?} */ parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                res.error = digitsInfo + " is not a valid digit info";
                return res;
            }
            var /** @type {?} */ minIntPart = parts[1];
            var /** @type {?} */ minFractionPart = parts[3];
            var /** @type {?} */ maxFractionPart = parts[5];
            if (minIntPart != null) {
                minInt = parseIntAutoRadix(minIntPart);
            }
            if (minFractionPart != null) {
                minFraction = parseIntAutoRadix(minFractionPart);
            }
            if (maxFractionPart != null) {
                maxFraction = parseIntAutoRadix(maxFractionPart);
            }
            else if (minFractionPart != null && minFraction > maxFraction) {
                maxFraction = minFraction;
            }
        }
        roundNumber(parsedNumber, minFraction, maxFraction);
        var /** @type {?} */ digits = parsedNumber.digits;
        var /** @type {?} */ integerLen = parsedNumber.integerLen;
        var /** @type {?} */ exponent = parsedNumber.exponent;
        var /** @type {?} */ decimals = [];
        isZero = digits.every(function (d) { return !d; });
        // pad zeros for small numbers
        for (; integerLen < minInt; integerLen++) {
            digits.unshift(0);
        }
        // pad zeros for small numbers
        for (; integerLen < 0; integerLen++) {
            digits.unshift(0);
        }
        // extract decimals digits
        if (integerLen > 0) {
            decimals = digits.splice(integerLen, digits.length);
        }
        else {
            decimals = digits;
            digits = [0];
        }
        // format the integer digits with grouping separators
        var /** @type {?} */ groups = [];
        if (digits.length >= pattern.lgSize) {
            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
        }
        while (digits.length > pattern.gSize) {
            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
        }
        if (digits.length) {
            groups.unshift(digits.join(''));
        }
        var /** @type {?} */ groupSymbol = currency ? NumberSymbol.CurrencyGroup : NumberSymbol.Group;
        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
        // append the decimal digits
        if (decimals.length) {
            var /** @type {?} */ decimalSymbol = currency ? NumberSymbol.CurrencyDecimal : NumberSymbol.Decimal;
            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
        }
        if (exponent) {
            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
        }
    }
    if (num < 0 && !isZero) {
        formattedText = pattern.negPre + formattedText + pattern.negSuf;
    }
    else {
        formattedText = pattern.posPre + formattedText + pattern.posSuf;
    }
    if (style === NumberFormatStyle.Currency && currency !== null) {
        res.str = formattedText
            .replace(CURRENCY_CHAR, currency)
            .replace(CURRENCY_CHAR, '');
        return res;
    }
    if (style === NumberFormatStyle.Percent) {
        res.str = formattedText.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
        return res;
    }
    res.str = formattedText;
    return res;
}
/**
 * @param {?} format
 * @param {?=} minusSign
 * @return {?}
 */
function parseNumberFormat(format, minusSign) {
    if (minusSign === void 0) { minusSign = '-'; }
    var /** @type {?} */ p = {
        minInt: 1,
        minFrac: 0,
        maxFrac: 0,
        posPre: '',
        posSuf: '',
        negPre: '',
        negSuf: '',
        gSize: 0,
        lgSize: 0
    };
    var /** @type {?} */ patternParts = format.split(PATTERN_SEP);
    var /** @type {?} */ positive = patternParts[0];
    var /** @type {?} */ negative = patternParts[1];
    var /** @type {?} */ positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?
        positive.split(DECIMAL_SEP) :
        [
            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),
            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)
        ], /** @type {?} */
    integer = positiveParts[0], /** @type {?} */ fraction = positiveParts[1] || '';
    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));
    for (var /** @type {?} */ i = 0; i < fraction.length; i++) {
        var /** @type {?} */ ch = fraction.charAt(i);
        if (ch === ZERO_CHAR) {
            p.minFrac = p.maxFrac = i + 1;
        }
        else if (ch === DIGIT_CHAR) {
            p.maxFrac = i + 1;
        }
        else {
            p.posSuf += ch;
        }
    }
    var /** @type {?} */ groups = integer.split(GROUP_SEP);
    p.gSize = groups[1] ? groups[1].length : 0;
    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;
    if (negative) {
        var /** @type {?} */ trunkLen = positive.length - p.posPre.length - p.posSuf.length, /** @type {?} */
        pos = negative.indexOf(DIGIT_CHAR);
        p.negPre = negative.substr(0, pos).replace(/'/g, '');
        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
    }
    else {
        p.negPre = minusSign + p.posPre;
        p.negSuf = p.posSuf;
    }
    return p;
}
/**
 * @param {?} parsedNumber
 * @return {?}
 */
function toPercent(parsedNumber) {
    // if the number is 0, don't do anything
    if (parsedNumber.digits[0] === 0) {
        return parsedNumber;
    }
    // Getting the current number of decimals
    var /** @type {?} */ fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
    if (parsedNumber.exponent) {
        parsedNumber.exponent += 2;
    }
    else {
        if (fractionLen === 0) {
            parsedNumber.digits.push(0, 0);
        }
        else if (fractionLen === 1) {
            parsedNumber.digits.push(0);
        }
        parsedNumber.integerLen += 2;
    }
    return parsedNumber;
}
/**
 * Parses a number.
 * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
 * @param {?} num
 * @return {?}
 */
function parseNumber(num) {
    var /** @type {?} */ numStr = Math.abs(num) + '';
    var /** @type {?} */ exponent = 0, /** @type {?} */ digits, /** @type {?} */ integerLen;
    var /** @type {?} */ i, /** @type {?} */ j, /** @type {?} */ zeros;
    // Decimal point?
    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
        numStr = numStr.replace(DECIMAL_SEP, '');
    }
    // Exponential form?
    if ((i = numStr.search(/e/i)) > 0) {
        // Work out the exponent.
        if (integerLen < 0)
            integerLen = i;
        integerLen += +numStr.slice(i + 1);
        numStr = numStr.substring(0, i);
    }
    else if (integerLen < 0) {
        // There was no decimal point or exponent so it is an integer.
        integerLen = numStr.length;
    }
    // Count the number of leading zeros.
    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
        /* empty */
    }
    if (i === (zeros = numStr.length)) {
        // The digits are all zero.
        digits = [0];
        integerLen = 1;
    }
    else {
        // Count the number of trailing zeros
        zeros--;
        while (numStr.charAt(zeros) === ZERO_CHAR)
            zeros--;
        // Trailing zeros are insignificant so ignore them
        integerLen -= i;
        digits = [];
        // Convert string to array of digits without leading/trailing zeros.
        for (j = 0; i <= zeros; i++, j++) {
            digits[j] = +numStr.charAt(i);
        }
    }
    // If the number overflows the maximum allowed digits then use an exponent.
    if (integerLen > MAX_DIGITS) {
        digits = digits.splice(0, MAX_DIGITS - 1);
        exponent = integerLen - 1;
        integerLen = 1;
    }
    return { digits: digits, exponent: exponent, integerLen: integerLen };
}
/**
 * Round the parsed number to the specified number of decimal places
 * This function changes the parsedNumber in-place
 * @param {?} parsedNumber
 * @param {?} minFrac
 * @param {?} maxFrac
 * @return {?}
 */
function roundNumber(parsedNumber, minFrac, maxFrac) {
    if (minFrac > maxFrac) {
        throw new Error("The minimum number of digits after fraction (" + minFrac + ") is higher than the maximum (" + maxFrac + ").");
    }
    var /** @type {?} */ digits = parsedNumber.digits;
    var /** @type {?} */ fractionLen = digits.length - parsedNumber.integerLen;
    var /** @type {?} */ fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
    // The index of the digit to where rounding is to occur
    var /** @type {?} */ roundAt = fractionSize + parsedNumber.integerLen;
    var /** @type {?} */ digit = digits[roundAt];
    if (roundAt > 0) {
        // Drop fractional digits beyond `roundAt`
        digits.splice(Math.max(parsedNumber.integerLen, roundAt));
        // Set non-fractional digits beyond `roundAt` to 0
        for (var /** @type {?} */ j = roundAt; j < digits.length; j++) {
            digits[j] = 0;
        }
    }
    else {
        // We rounded to zero so reset the parsedNumber
        fractionLen = Math.max(0, fractionLen);
        parsedNumber.integerLen = 1;
        digits.length = Math.max(1, roundAt = fractionSize + 1);
        digits[0] = 0;
        for (var /** @type {?} */ i = 1; i < roundAt; i++)
            digits[i] = 0;
    }
    if (digit >= 5) {
        if (roundAt - 1 < 0) {
            for (var /** @type {?} */ k = 0; k > roundAt; k--) {
                digits.unshift(0);
                parsedNumber.integerLen++;
            }
            digits.unshift(1);
            parsedNumber.integerLen++;
        }
        else {
            digits[roundAt - 1]++;
        }
    }
    // Pad out with zeros to get the required fraction length
    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
        digits.push(0);
    var /** @type {?} */ dropTrailingZeros = fractionSize !== 0;
    // Minimal length = nb of decimals required + current nb of integers
    // Any number besides that is optional and can be removed if it's a trailing 0
    var /** @type {?} */ minLen = minFrac + parsedNumber.integerLen;
    // Do any carrying, e.g. a digit was rounded up to 10
    var /** @type {?} */ carry = digits.reduceRight(function (carry, d, i, digits) {
        d = d + carry;
        digits[i] = d < 10 ? d : d - 10; // d % 10
        if (dropTrailingZeros) {
            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
            if (digits[i] === 0 && i >= minLen) {
                digits.pop();
            }
            else {
                dropTrailingZeros = false;
            }
        }
        return d >= 10 ? 1 : 0; // Math.floor(d / 10);
    }, 0);
    if (carry) {
        digits.unshift(carry);
        parsedNumber.integerLen++;
    }
}
/**
 * \@internal
 * @param {?} text
 * @return {?}
 */
function parseIntAutoRadix(text) {
    var /** @type {?} */ result = parseInt(text);
    if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
    }
    return result;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} pipe
 * @param {?} locale
 * @param {?} value
 * @param {?} style
 * @param {?=} digits
 * @param {?=} currency
 * @param {?=} currencyAsSymbol
 * @return {?}
 */
function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) { currency = null; }
    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
    if (value == null)
        return null;
    // Convert strings to numbers
    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;
    if (typeof value !== 'number') {
        throw invalidPipeArgumentError(pipe, value);
    }
    var /** @type {?} */ minInt;
    var /** @type {?} */ minFraction;
    var /** @type {?} */ maxFraction;
    if (style !== NumberFormatStyle.Currency) {
        // rely on Intl default for currency
        minInt = 1;
        minFraction = 0;
        maxFraction = 3;
    }
    if (digits) {
        var /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);
        if (parts === null) {
            throw new Error(digits + " is not a valid digit info for number pipes");
        }
        if (parts[1] != null) {
            // min integer digits
            minInt = parseIntAutoRadix(parts[1]);
        }
        if (parts[3] != null) {
            // min fraction digits
            minFraction = parseIntAutoRadix(parts[3]);
        }
        if (parts[5] != null) {
            // max fraction digits
            maxFraction = parseIntAutoRadix(parts[5]);
        }
    }
    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol,
    });
}
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number according to locale rules.
 * \@howToUse `number_expression | number[:digitInfo]`
 *
 * Formats a number as text. Group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * where `expression` is a number:
 *  - `digitInfo` is a `string` which has a following format: <br>
 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}
 *
 * \@stable
 */
var DeprecatedDecimalPipe = /** @class */ (function () {
    function DeprecatedDecimalPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    DeprecatedDecimalPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    function (value, digits) {
        return formatNumber(DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DeprecatedDecimalPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'number' },] },
    ];
    /** @nocollapse */
    DeprecatedDecimalPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DeprecatedDecimalPipe;
}());
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as a percentage according to locale rules.
 * \@howToUse `number_expression | percent[:digitInfo]`
 *
 * \@description
 *
 * Formats a number as percentage.
 *
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}
 *
 * \@stable
 */
var DeprecatedPercentPipe = /** @class */ (function () {
    function DeprecatedPercentPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    DeprecatedPercentPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    function (value, digits) {
        return formatNumber(DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    DeprecatedPercentPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'percent' },] },
    ];
    /** @nocollapse */
    DeprecatedPercentPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DeprecatedPercentPipe;
}());
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as currency using locale rules.
 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
 * \@description
 *
 * Use `currency` to format a number as currency.
 *
 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
 *    as `USD` for the US dollar and `EUR` for the euro.
 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
 *   - `true`: use symbol (e.g. `$`).
 *   - `false`(default): use code (e.g. `USD`).
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}
 *
 * \@stable
 */
var DeprecatedCurrencyPipe = /** @class */ (function () {
    function DeprecatedCurrencyPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    DeprecatedCurrencyPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    function (value, currencyCode, symbolDisplay, digits) {
        if (currencyCode === void 0) { currencyCode = 'USD'; }
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        return formatNumber(DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    DeprecatedCurrencyPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'currency' },] },
    ];
    /** @nocollapse */
    DeprecatedCurrencyPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DeprecatedCurrencyPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of deprecated i18n pipes that require intl api
 *
 * @deprecated from v5
 */
var COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ObservableStrategy = /** @class */ (function () {
    function ObservableStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    ObservableStrategy.prototype.createSubscription = /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    function (async, updateLatestValue) {
        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.dispose = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) { subscription.unsubscribe(); };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.onDestroy = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) { subscription.unsubscribe(); };
    return ObservableStrategy;
}());
var PromiseStrategy = /** @class */ (function () {
    function PromiseStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    PromiseStrategy.prototype.createSubscription = /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    function (async, updateLatestValue) {
        return async.then(updateLatestValue, function (e) { throw e; });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.dispose = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.onDestroy = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) { };
    return PromiseStrategy;
}());
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
/**
 * \@ngModule CommonModule
 * \@whatItDoes Unwraps a value from an asynchronous primitive.
 * \@howToUse `observable_or_promise_expression | async`
 * \@description
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 *
 * ## Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * \@stable
 */
var AsyncPipe = /** @class */ (function () {
    function AsyncPipe(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = /** @type {?} */ ((null));
    }
    /**
     * @return {?}
     */
    AsyncPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._dispose();
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype.transform = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!this._obj) {
            if (obj) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform(/** @type {?} */ (obj));
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return __WEBPACK_IMPORTED_MODULE_0__angular_core__["WrappedValue"].wrap(this._latestValue);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._subscribe = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._selectStrategy = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵisPromise"])(obj)) {
            return _promiseStrategy;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵisObservable"])(obj)) {
            return _observableStrategy;
        }
        throw invalidPipeArgumentError(AsyncPipe, obj);
    };
    /**
     * @return {?}
     */
    AsyncPipe.prototype._dispose = /**
     * @return {?}
     */
    function () {
        this._strategy.dispose(/** @type {?} */ ((this._subscription)));
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    };
    /**
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    AsyncPipe.prototype._updateLatestValue = /**
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    function (async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    };
    AsyncPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'async', pure: false },] },
    ];
    /** @nocollapse */
    AsyncPipe.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"], },
    ]; };
    return AsyncPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms text to lowercase.
 *
 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
 *
 * \@stable
 */
var LowerCasePipe = /** @class */ (function () {
    function LowerCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    LowerCasePipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(LowerCasePipe, value);
        }
        return value.toLowerCase();
    };
    LowerCasePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'lowercase' },] },
    ];
    /** @nocollapse */
    LowerCasePipe.ctorParameters = function () { return []; };
    return LowerCasePipe;
}());
/**
 * Helper method to transform a single word to titlecase.
 *
 * \@stable
 * @param {?} word
 * @return {?}
 */
function titleCaseWord(word) {
    if (!word)
        return word;
    return word[0].toUpperCase() + word.substr(1).toLowerCase();
}
/**
 * Transforms text to titlecase.
 *
 * \@stable
 */
var TitleCasePipe = /** @class */ (function () {
    function TitleCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TitleCasePipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(TitleCasePipe, value);
        }
        return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
    };
    TitleCasePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'titlecase' },] },
    ];
    /** @nocollapse */
    TitleCasePipe.ctorParameters = function () { return []; };
    return TitleCasePipe;
}());
/**
 * Transforms text to uppercase.
 *
 * \@stable
 */
var UpperCasePipe = /** @class */ (function () {
    function UpperCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    UpperCasePipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(UpperCasePipe, value);
        }
        return value.toUpperCase();
    };
    UpperCasePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'uppercase' },] },
    ];
    /** @nocollapse */
    UpperCasePipe.ctorParameters = function () { return []; };
    return UpperCasePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _INTERPOLATION_REGEXP = /#/g;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
 * \@howToUse `expression | i18nPlural:mapping[:locale]`
 * \@description
 *
 *  Where:
 *  - `expression` is a number.
 *  - `mapping` is an object that mimics the ICU format, see
 *    http://userguide.icu-project.org/formatparse/messages
 *  - `locale` is a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
 * default)
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * \@experimental
 */
var I18nPluralPipe = /** @class */ (function () {
    function I18nPluralPipe(_localization) {
        this._localization = _localization;
    }
    /**
     * @param {?} value
     * @param {?} pluralMap
     * @param {?=} locale
     * @return {?}
     */
    I18nPluralPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} pluralMap
     * @param {?=} locale
     * @return {?}
     */
    function (value, pluralMap, locale) {
        if (value == null)
            return '';
        if (typeof pluralMap !== 'object' || pluralMap === null) {
            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
        }
        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'i18nPlural', pure: true },] },
    ];
    /** @nocollapse */
    I18nPluralPipe.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    return I18nPluralPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Generic selector that displays the string that matches the current value.
 * \@howToUse `expression | i18nSelect:mapping`
 * \@description
 *
 *  Where `mapping` is an object that indicates the text that should be displayed
 *  for different values of the provided `expression`.
 *  If none of the keys of the mapping match the value of the `expression`, then the content
 *  of the `other` key is returned when present, otherwise an empty string is returned.
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 *  \@experimental
 */
var I18nSelectPipe = /** @class */ (function () {
    function I18nSelectPipe() {
    }
    /**
     * @param {?} value
     * @param {?} mapping
     * @return {?}
     */
    I18nSelectPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} mapping
     * @return {?}
     */
    function (value, mapping) {
        if (value == null)
            return '';
        if (typeof mapping !== 'object' || typeof value !== 'string') {
            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
            return mapping[value];
        }
        if (mapping.hasOwnProperty('other')) {
            return mapping['other'];
        }
        return '';
    };
    I18nSelectPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'i18nSelect', pure: true },] },
    ];
    /** @nocollapse */
    I18nSelectPipe.ctorParameters = function () { return []; };
    return I18nSelectPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Converts value into JSON string.
 * \@howToUse `expression | json`
 * \@description
 *
 * Converts value into string using `JSON.stringify`. Useful for debugging.
 *
 * ### Example
 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * \@stable
 */
var JsonPipe = /** @class */ (function () {
    function JsonPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    JsonPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return JSON.stringify(value, null, 2); };
    JsonPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'json', pure: false },] },
    ];
    /** @nocollapse */
    JsonPipe.ctorParameters = function () { return []; };
    return JsonPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number according to locale rules.
 * \@howToUse `number_expression | number[:digitInfo[:locale]]`
 *
 * Formats a number as text. Group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * where `expression` is a number:
 *  - `digitInfo` is a `string` which has a following format: <br>
 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
 *  - `locale` is a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
 * default)
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
 *
 * \@stable
 */
var DecimalPipe = /** @class */ (function () {
    function DecimalPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    DecimalPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    function (value, digits, locale) {
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        var _a = formatNumber$1(value, locale, NumberFormatStyle.Decimal, digits), str = _a.str, error = _a.error;
        if (error) {
            throw invalidPipeArgumentError(DecimalPipe, error);
        }
        return str;
    };
    DecimalPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'number' },] },
    ];
    /** @nocollapse */
    DecimalPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return DecimalPipe;
}());
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as a percentage according to locale rules.
 * \@howToUse `number_expression | percent[:digitInfo[:locale]]`
 *
 * \@description
 *
 * Formats a number as percentage.
 *
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *  - `locale` is a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
 * default)
 *
 * ### Example
 *
 * {\@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}
 *
 * \@stable
 */
var PercentPipe = /** @class */ (function () {
    function PercentPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    PercentPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    function (value, digits, locale) {
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        var _a = formatNumber$1(value, locale, NumberFormatStyle.Percent, digits), str = _a.str, error = _a.error;
        if (error) {
            throw invalidPipeArgumentError(PercentPipe, error);
        }
        return str;
    };
    PercentPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'percent' },] },
    ];
    /** @nocollapse */
    PercentPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return PercentPipe;
}());
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as currency using locale rules.
 * \@howToUse `number_expression | currency[:currencyCode[:display[:digitInfo[:locale]]]]`
 * \@description
 *
 * Use `currency` to format a number as currency.
 *
 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
 *    as `USD` for the US dollar and `EUR` for the euro.
 * - `display` indicates whether to show the currency symbol or the code.
 *   - `code`: use code (e.g. `USD`).
 *   - `symbol`(default): use symbol (e.g. `$`).
 *   - `symbol-narrow`: some countries have two symbols for their currency, one regular and one
 *   narrow (e.g. the canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`).
 *   - boolean (deprecated from v5): `true` for symbol and false for `code`
 *   If there is no narrow symbol for the chosen currency, the regular symbol will be used.
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *  - `locale` is a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
 * default)
 *
 * ### Example
 *
 * {\@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}
 *
 * \@stable
 */
var CurrencyPipe = /** @class */ (function () {
    function CurrencyPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} display
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    CurrencyPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} display
     * @param {?=} digits
     * @param {?=} locale
     * @return {?}
     */
    function (value, currencyCode, display, digits, locale) {
        if (display === void 0) { display = 'symbol'; }
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        if (typeof display === 'boolean') {
            if (/** @type {?} */ (console) && /** @type {?} */ (console.warn)) {
                console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
            }
            display = display ? 'symbol' : 'code';
        }
        var /** @type {?} */ currency = currencyCode || 'USD';
        if (display !== 'code') {
            currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow');
        }
        var _a = formatNumber$1(value, locale, NumberFormatStyle.Currency, digits, currency), str = _a.str, error = _a.error;
        if (error) {
            throw invalidPipeArgumentError(CurrencyPipe, error);
        }
        return str;
    };
    CurrencyPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'currency' },] },
    ];
    /** @nocollapse */
    CurrencyPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"],] },] },
    ]; };
    return CurrencyPipe;
}());
/**
 * @param {?} value
 * @return {?}
 */
function isEmpty(value) {
    return value == null || value === '' || value !== value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
 * \@howToUse `array_or_string_expression | slice:start[:end]`
 * \@description
 *
 * Where the input expression is a `List` or `String`, and:
 * - `start`: The starting index of the subset to return.
 *   - **a positive integer**: return the item at `start` index and all items after
 *     in the list or string expression.
 *   - **a negative integer**: return the item at `start` index from the end and all items after
 *     in the list or string expression.
 *   - **if positive and greater than the size of the expression**: return an empty list or string.
 *   - **if negative and greater than the size of the expression**: return entire list or string.
 * - `end`: The ending index of the subset to return.
 *   - **omitted**: return all items until the end.
 *   - **if positive**: return all items before `end` index of the list or string.
 *   - **if negative**: return all items before `end` index from the end of the list or string.
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on a [List], the returned list is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ## List Example
 *
 * This `ngFor` example:
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 *     <li>b</li>
 *     <li>c</li>
 *
 * ## String Examples
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * \@stable
 */
var SlicePipe = /** @class */ (function () {
    function SlicePipe() {
    }
    /**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    SlicePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    function (value, start, end) {
        if (value == null)
            return value;
        if (!this.supports(value)) {
            throw invalidPipeArgumentError(SlicePipe, value);
        }
        return value.slice(start, end);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SlicePipe.prototype.supports = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
    SlicePipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'slice', pure: false },] },
    ];
    /** @nocollapse */
    SlicePipe.ctorParameters = function () { return []; };
    return SlicePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */
var COMMON_PIPES = [
    AsyncPipe,
    UpperCasePipe,
    LowerCasePipe,
    JsonPipe,
    SlicePipe,
    DecimalPipe,
    PercentPipe,
    TitleCasePipe,
    CurrencyPipe,
    DatePipe,
    I18nPluralPipe,
    I18nSelectPipe,
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
 *
 * \@stable
 */
var CommonModule = /** @class */ (function () {
    function CommonModule() {
    }
    CommonModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [
                        { provide: NgLocalization, useClass: NgLocaleLocalization },
                    ],
                },] },
    ];
    /** @nocollapse */
    CommonModule.ctorParameters = function () { return []; };
    return CommonModule;
}());
var ɵ0 = getPluralCase;
/**
 * A module that contains the deprecated i18n pipes.
 *
 * @deprecated from v5
 */
var DeprecatedI18NPipesModule = /** @class */ (function () {
    function DeprecatedI18NPipesModule() {
    }
    DeprecatedI18NPipesModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    declarations: [COMMON_DEPRECATED_I18N_PIPES],
                    exports: [COMMON_DEPRECATED_I18N_PIPES],
                    providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }],
                },] },
    ];
    /** @nocollapse */
    DeprecatedI18NPipesModule.ctorParameters = function () { return []; };
    return DeprecatedI18NPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * \@stable
 */
var DOCUMENT = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('DocumentToken');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var PLATFORM_BROWSER_ID = 'browser';
var PLATFORM_SERVER_ID = 'server';
var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformBrowser(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerApp(platformId) {
    return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerUi(platformId) {
    return platformId === PLATFORM_WORKER_UI_ID;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 */
var VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Version"]('5.2.10');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=common.js.map


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var hibachiinterceptor_1 = __webpack_require__(59);
//constant
var hibachipathbuilder_1 = __webpack_require__(60);
//services
var cacheservice_1 = __webpack_require__(61);
var publicservice_1 = __webpack_require__(79);
var accountservice_1 = __webpack_require__(80);
var cartservice_1 = __webpack_require__(93);
var draggableservice_1 = __webpack_require__(94);
var utilityservice_1 = __webpack_require__(9);
var selectionservice_1 = __webpack_require__(95);
var observerservice_1 = __webpack_require__(8);
var orderservice_1 = __webpack_require__(96);
var orderpaymentservice_1 = __webpack_require__(97);
var formservice_1 = __webpack_require__(43);
var filterservice_1 = __webpack_require__(98);
var expandableservice_1 = __webpack_require__(99);
var metadataservice_1 = __webpack_require__(100);
var rbkeyservice_1 = __webpack_require__(44);
var typeaheadservice_1 = __webpack_require__(101);
var hibachiservice_1 = __webpack_require__(26);
var historyservice_1 = __webpack_require__(42);
var localstorageservice_1 = __webpack_require__(38);
var hibachiservicedecorator_1 = __webpack_require__(118);
var hibachiscope_1 = __webpack_require__(119);
var requestservice_1 = __webpack_require__(40);
var scopeservice_1 = __webpack_require__(120);
var skuservice_1 = __webpack_require__(121);
var hibachivalidationservice_1 = __webpack_require__(122);
var entityservice_1 = __webpack_require__(123);
//controllers
var globalsearch_1 = __webpack_require__(124);
//filters
var percentage_1 = __webpack_require__(125);
var entityrbkey_1 = __webpack_require__(126);
var swtrim_1 = __webpack_require__(127);
var swunique_1 = __webpack_require__(128);
var datefilter_1 = __webpack_require__(129);
//directives
//  components
var swactioncaller_1 = __webpack_require__(130);
var swtypeaheadsearch_1 = __webpack_require__(131);
var swtypeaheadinputfield_1 = __webpack_require__(132);
var swtypeaheadmultiselect_1 = __webpack_require__(133);
var swtypeaheadsearchlineitem_1 = __webpack_require__(134);
var swtypeaheadremoveselection_1 = __webpack_require__(135);
var swcollectionconfig_1 = __webpack_require__(136);
var swcollectionfilter_1 = __webpack_require__(137);
var swcollectionorderby_1 = __webpack_require__(138);
var swcollectioncolumn_1 = __webpack_require__(139);
var swactioncallerdropdown_1 = __webpack_require__(140);
var swcolumnsorter_1 = __webpack_require__(141);
var swconfirm_1 = __webpack_require__(142);
var swdraggable_1 = __webpack_require__(143);
var swdraggablecontainer_1 = __webpack_require__(144);
var swentityactionbar_1 = __webpack_require__(145);
var swentityactionbarbuttongroup_1 = __webpack_require__(146);
var swexpandablerecord_1 = __webpack_require__(147);
var swexpiringsessionnotifier_1 = __webpack_require__(148);
var swgravatar_1 = __webpack_require__(149);
var swlogin_1 = __webpack_require__(152);
var swmodallauncher_1 = __webpack_require__(153);
var swmodalwindow_1 = __webpack_require__(154);
var swnumbersonly_1 = __webpack_require__(155);
var swloading_1 = __webpack_require__(156);
var swscrolltrigger_1 = __webpack_require__(157);
var swtabgroup_1 = __webpack_require__(158);
var swtabcontent_1 = __webpack_require__(159);
var swtooltip_1 = __webpack_require__(160);
var swrbkey_1 = __webpack_require__(161);
var swoptions_1 = __webpack_require__(162);
var swselection_1 = __webpack_require__(163);
var swclickoutside_1 = __webpack_require__(164);
var swdirective_1 = __webpack_require__(165);
var swexportaction_1 = __webpack_require__(166);
var swhref_1 = __webpack_require__(167);
var swprocesscaller_1 = __webpack_require__(168);
var swsortable_1 = __webpack_require__(169);
var sworderbycontrols_1 = __webpack_require__(170);
//modules
var alert_module_1 = __webpack_require__(10);
var dialog_module_1 = __webpack_require__(17);
var alert_module_2 = __webpack_require__(10);
var dialog_module_2 = __webpack_require__(17);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
var CoreModule = /** @class */ (function () {
    function CoreModule() {
    }
    CoreModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [
                localstorageservice_1.LocalStorageService,
                cacheservice_1.CacheService,
                draggableservice_1.DraggableService,
                expandableservice_1.ExpandableService,
                filterservice_1.FilterService,
                historyservice_1.HistoryService,
                scopeservice_1.ScopeService,
                utilityservice_1.UtilityService,
                hibachivalidationservice_1.HibachiValidationService,
                metadataservice_1.MetaDataService,
                observerservice_1.ObserverService,
                formservice_1.FormService,
                selectionservice_1.SelectionService,
                rbkeyservice_1.RbKeyService,
                requestservice_1.RequestService,
                hibachiscope_1.HibachiScope,
                hibachiservice_1.$Hibachi,
                typeaheadservice_1.TypeaheadService,
                entityservice_1.EntityService
            ],
            imports: [
                alert_module_2.AlertModule,
                dialog_module_2.DialogModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], CoreModule);
    return CoreModule;
}());
exports.CoreModule = CoreModule;
var coremodule = angular.module('hibachi.core', [
    //Angular Modules
    'ngAnimate',
    'ngRoute',
    'ngSanitize',
    //3rdParty modules
    'ui.bootstrap',
    alert_module_1.alertmodule.name,
    dialog_module_1.dialogmodule.name
])
    .config(['$compileProvider', '$httpProvider', '$logProvider', '$filterProvider', '$provide', 'hibachiPathBuilder', 'appConfig', function ($compileProvider, $httpProvider, $logProvider, $filterProvider, $provide, hibachiPathBuilder, appConfig) {
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        if (!appConfig.debugFlag) {
            appConfig.debugFlag = false;
        }
        $logProvider.debugEnabled(appConfig.debugFlag);
        $filterProvider.register('likeFilter', function () {
            return function (text) {
                if (angular.isDefined(text) && angular.isString(text)) {
                    return text.replace(new RegExp('%', 'g'), '');
                }
            };
        });
        //This filter is used to shorten a string by removing the charecter count that is passed to it and ending it with "..."
        $filterProvider.register('truncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return input + '...';
                }
                return input;
            };
        });
        //This filter is used to shorten long string but unlike "truncate", it removes from the start of the string and prepends "..."
        $filterProvider.register('pretruncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.slice('-' + chars);
                    //  input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return '...' + input;
                }
                return input;
            };
        });
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        // $provide.decorator('$hibachi',
        $httpProvider.interceptors.push('hibachiInterceptor');
        //Pulls seperate http requests into a single digest cycle.
        $httpProvider.useApplyAsync(true);
    }])
    .run(['$rootScope', '$hibachi', '$route', '$location', 'rbkeyService', function ($rootScope, $hibachi, $route, $location, rbkeyService) {
        $rootScope.buildUrl = $hibachi.buildUrl;
        $rootScope.rbKey = rbkeyService.rbKey;
        var original = $location.path;
        $location.path = function (path, reload) {
            if (reload === false) {
                var lastRoute = $route.current;
                var un = $rootScope.$on('$locationChangeSuccess', function () {
                    $route.current = lastRoute;
                    un();
                });
            }
            return original.apply($location, [path]);
        };
    }])
    .constant('hibachiPathBuilder', new hibachipathbuilder_1.HibachiPathBuilder())
    .constant('corePartialsPath', 'core/components/')
    //services
    .service('cacheService', static_1.downgradeInjectable(cacheservice_1.CacheService))
    .service('publicService', publicservice_1.PublicService)
    .service('utilityService', static_1.downgradeInjectable(utilityservice_1.UtilityService))
    .service('selectionService', static_1.downgradeInjectable(selectionservice_1.SelectionService))
    .service('observerService', static_1.downgradeInjectable(observerservice_1.ObserverService))
    .service('draggableService', static_1.downgradeInjectable(draggableservice_1.DraggableService))
    .service('expandableService', static_1.downgradeInjectable(expandableservice_1.ExpandableService))
    .service('filterService', static_1.downgradeInjectable(filterservice_1.FilterService))
    .service('formService', static_1.downgradeInjectable(formservice_1.FormService))
    .service('historyService', static_1.downgradeInjectable(historyservice_1.HistoryService))
    .service('metadataService', static_1.downgradeInjectable(metadataservice_1.MetaDataService))
    .service('rbkeyService', static_1.downgradeInjectable(rbkeyservice_1.RbKeyService))
    .service('typeaheadService', static_1.downgradeInjectable(typeaheadservice_1.TypeaheadService))
    .service('$hibachi', static_1.downgradeInjectable(hibachiservice_1.$Hibachi))
    .decorator('$hibachi', hibachiservicedecorator_1.HibachiServiceDecorator)
    .service('hibachiInterceptor', hibachiinterceptor_1.HibachiInterceptor.Factory())
    .service('hibachiScope', static_1.downgradeInjectable(hibachiscope_1.HibachiScope))
    .service('scopeService', static_1.downgradeInjectable(scopeservice_1.ScopeService))
    .service('skuService', skuservice_1.SkuService)
    .service('localStorageService', static_1.downgradeInjectable(localstorageservice_1.LocalStorageService))
    .service('requestService', static_1.downgradeInjectable(requestservice_1.RequestService))
    .service('accountService', accountservice_1.AccountService)
    .service('orderService', orderservice_1.OrderService)
    .service('orderPaymentService', orderpaymentservice_1.OrderPaymentService)
    .service('cartService', cartservice_1.CartService)
    .service('hibachiValidationService', static_1.downgradeInjectable(hibachivalidationservice_1.HibachiValidationService))
    .service('entityService', static_1.downgradeInjectable(entityservice_1.EntityService))
    //controllers
    .controller('globalSearch', globalsearch_1.GlobalSearchController)
    //filters
    .filter('dateFilter', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('percentage', [percentage_1.PercentageFilter.Factory])
    .filter('trim', [swtrim_1.SWTrim.Factory])
    .filter('entityRBKey', ['rbkeyService', entityrbkey_1.EntityRBKey.Factory])
    .filter('swdate', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('unique', [swunique_1.SWUnique.Factory])
    //directives
    .directive('swCollectionConfig', swcollectionconfig_1.SWCollectionConfig.Factory())
    .directive('swCollectionColumn', swcollectioncolumn_1.SWCollectionColumn.Factory())
    .directive('swCollectionFilter', swcollectionfilter_1.SWCollectionFilter.Factory())
    .directive('swCollectionOrderBy', swcollectionorderby_1.SWCollectionOrderBy.Factory())
    .directive('swTypeaheadSearch', swtypeaheadsearch_1.SWTypeaheadSearch.Factory())
    .directive('swTypeaheadInputField', swtypeaheadinputfield_1.SWTypeaheadInputField.Factory())
    .directive('swTypeaheadMultiselect', swtypeaheadmultiselect_1.SWTypeaheadMultiselect.Factory())
    .directive('swTypeaheadSearchLineItem', swtypeaheadsearchlineitem_1.SWTypeaheadSearchLineItem.Factory())
    .directive('swTypeaheadRemoveSelection', swtypeaheadremoveselection_1.SWTypeaheadRemoveSelection.Factory())
    .directive('swActionCaller', swactioncaller_1.SWActionCaller.Factory())
    .directive('swActionCallerDropdown', swactioncallerdropdown_1.SWActionCallerDropdown.Factory())
    .directive('swColumnSorter', swcolumnsorter_1.SWColumnSorter.Factory())
    .directive('swConfirm', swconfirm_1.SWConfirm.Factory())
    .directive('swEntityActionBar', swentityactionbar_1.SWEntityActionBar.Factory())
    .directive('swEntityActionBarButtonGroup', swentityactionbarbuttongroup_1.SWEntityActionBarButtonGroup.Factory())
    .directive('swExpandableRecord', swexpandablerecord_1.SWExpandableRecord.Factory())
    .directive('swExpiringSessionNotifier', swexpiringsessionnotifier_1.SWExpiringSessionNotifier.Factory())
    .directive('swGravatar', swgravatar_1.SWGravatar.Factory())
    .directive('swDraggable', swdraggable_1.SWDraggable.Factory())
    .directive('swDraggableContainer', swdraggablecontainer_1.SWDraggableContainer.Factory())
    .directive('swLogin', swlogin_1.SWLogin.Factory())
    .directive('swModalLauncher', swmodallauncher_1.SWModalLauncher.Factory())
    .directive('swModalWindow', swmodalwindow_1.SWModalWindow.Factory())
    .directive('swNumbersOnly', swnumbersonly_1.SWNumbersOnly.Factory())
    .directive('swLoading', swloading_1.SWLoading.Factory())
    .directive('swScrollTrigger', swscrolltrigger_1.SWScrollTrigger.Factory())
    .directive('swRbkey', swrbkey_1.SWRbKey.Factory())
    .directive('swOptions', swoptions_1.SWOptions.Factory())
    .directive('swSelection', swselection_1.SWSelection.Factory())
    .directive('swTabGroup', swtabgroup_1.SWTabGroup.Factory())
    .directive('swTabContent', swtabcontent_1.SWTabContent.Factory())
    .directive('swTooltip', swtooltip_1.SWTooltip.Factory())
    .directive('swClickOutside', swclickoutside_1.SWClickOutside.Factory())
    .directive('swDirective', swdirective_1.SWDirective.Factory())
    .directive('swExportAction', swexportaction_1.SWExportAction.Factory())
    .directive('swHref', swhref_1.SWHref.Factory())
    .directive('swProcessCaller', swprocesscaller_1.SWProcessCaller.Factory())
    .directive('sw:sortable', swsortable_1.SWSortable.Factory())
    .directive('swOrderByControls', sworderbycontrols_1.SWOrderByControls.Factory());
exports.coremodule = coremodule;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(0), __webpack_require__(171)) :
	typeof define === 'function' && define.amd ? define('@angular/upgrade/static', ['exports', '@angular/core', '@angular/platform-browser'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = {}),global.ng.core,global._angular_platformBrowser));
}(this, (function (exports,_angular_core,_angular_platformBrowser) { 'use strict';

/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function noNg() {
    throw new Error('AngularJS v1.x is not loaded!');
}
var angular = {
    bootstrap: noNg,
    module: noNg,
    element: noNg,
    version: undefined,
    resumeBootstrap: noNg,
    getTestability: noNg
};
try {
    if (window.hasOwnProperty('angular')) {
        angular = window.angular;
    }
}
catch (e) {
    // ignore in CJS mode.
}
/**
 * @deprecated Use {@link setAngularJSGlobal} instead.
 */
function setAngularLib(ng) {
    setAngularJSGlobal(ng);
}
/**
 * @deprecated Use {@link getAngularJSGlobal} instead.
 */
function getAngularLib() {
    return getAngularJSGlobal();
}
/**
 * Resets the AngularJS global.
 *
 * Used when AngularJS is loaded lazily, and not available on `window`.
 *
 * @stable
 */
function setAngularJSGlobal(ng) {
    angular = ng;
    version = ng && ng.version;
}
/**
 * Returns the current AngularJS global.
 *
 * @stable
 */
function getAngularJSGlobal() {
    return angular;
}
var bootstrap = function (e, modules, config) {
    return angular.bootstrap(e, modules, config);
};
var module$1 = function (prefix, dependencies) {
    return angular.module(prefix, dependencies);
};
var element = function (e) { return angular.element(e); };


var version = angular.version;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var $COMPILE = '$compile';
var $CONTROLLER = '$controller';
var $DELEGATE = '$delegate';
var $HTTP_BACKEND = '$httpBackend';
var $INJECTOR = '$injector';
var $INTERVAL = '$interval';
var $PARSE = '$parse';
var $PROVIDE = '$provide';

var $SCOPE = '$scope';
var $TEMPLATE_CACHE = '$templateCache';

var $$TESTABILITY = '$$testability';


var INJECTOR_KEY = '$$angularInjector';
var LAZY_MODULE_REF = '$$angularLazyModuleRef';

var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;
var REQUIRE_NG_MODEL = '?ngModel';
var UPGRADE_MODULE_NAME = '$$UpgradeModule';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A `PropertyBinding` represents a mapping between a property name
 * and an attribute name. It is parsed from a string of the form
 * `"prop: attr"`; or simply `"propAndAttr" where the property
 * and attribute have the same identifier.
 */
var PropertyBinding = /** @class */ (function () {
    function PropertyBinding(prop, attr) {
        this.prop = prop;
        this.attr = attr;
        this.parseBinding();
    }
    PropertyBinding.prototype.parseBinding = function () {
        this.bracketAttr = "[" + this.attr + "]";
        this.parenAttr = "(" + this.attr + ")";
        this.bracketParenAttr = "[(" + this.attr + ")]";
        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);
        this.onAttr = "on" + capitalAttr;
        this.bindAttr = "bind" + capitalAttr;
        this.bindonAttr = "bindon" + capitalAttr;
    };
    return PropertyBinding;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\-_]/i;
var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;

function controllerKey(name) {
    return '$' + name + 'Controller';
}
function directiveNormalize(name) {
    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')
        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });
}

function getComponentName(component) {
    // Return the name of the component or the first line of its stringified version.
    return component.overriddenName || component.name || component.toString().split('\n')[0];
}
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @return Whether the passed-in component implements the subset of the
 *     `ControlValueAccessor` interface needed for AngularJS `ng-model`
 *     compatibility.
 */
function supportsNgModel(component) {
    return typeof component.writeValue === 'function' &&
        typeof component.registerOnChange === 'function';
}
/**
 * Glue the AngularJS `NgModelController` (if it exists) to the component
 * (if it implements the needed subset of the `ControlValueAccessor` interface).
 */
function hookupNgModel(ngModel, component) {
    if (ngModel && supportsNgModel(component)) {
        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };
        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));
        if (typeof component.registerOnTouched === 'function') {
            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));
        }
    }
}
/**
 * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.
 */
function strictEquals(val1, val2) {
    return val1 === val2 || (val1 !== val1 && val2 !== val2);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INITIAL_VALUE = {
    __UNINITIALIZED__: true
};
var DowngradeComponentAdapter = /** @class */ (function () {
    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {
        this.element = element;
        this.attrs = attrs;
        this.scope = scope;
        this.ngModel = ngModel;
        this.parentInjector = parentInjector;
        this.$injector = $injector;
        this.$compile = $compile;
        this.$parse = $parse;
        this.componentFactory = componentFactory;
        this.wrapCallback = wrapCallback;
        this.implementsOnChanges = false;
        this.inputChangeCount = 0;
        this.inputChanges = {};
        this.componentScope = scope.$new();
    }
    DowngradeComponentAdapter.prototype.compileContents = function () {
        var _this = this;
        var compiledProjectableNodes = [];
        var projectableNodes = this.groupProjectableNodes();
        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });
        this.element.empty();
        linkFns.forEach(function (linkFn) {
            linkFn(_this.scope, function (clone) {
                compiledProjectableNodes.push(clone);
                _this.element.append(clone);
            });
        });
        return compiledProjectableNodes;
    };
    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {
        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];
        var childInjector = _angular_core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });
        this.componentRef =
            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);
        this.viewChangeDetector = this.componentRef.injector.get(_angular_core.ChangeDetectorRef);
        this.changeDetector = this.componentRef.changeDetectorRef;
        this.component = this.componentRef.instance;
        // testability hook is commonly added during component bootstrap in
        // packages/core/src/application_ref.bootstrap()
        // in downgraded application, component creation will take place here as well as adding the
        // testability hook.
        var testability = this.componentRef.injector.get(_angular_core.Testability, null);
        if (testability) {
            this.componentRef.injector.get(_angular_core.TestabilityRegistry)
                .registerApplication(this.componentRef.location.nativeElement, testability);
        }
        hookupNgModel(this.ngModel, this.component);
    };
    DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {
        var _this = this;
        if (propagateDigest === void 0) { propagateDigest = true; }
        var attrs = this.attrs;
        var inputs = this.componentFactory.inputs || [];
        var _loop_1 = function (i) {
            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);
            var expr = null;
            if (attrs.hasOwnProperty(input.attr)) {
                var observeFn_1 = (function (prop) {
                    var prevValue = INITIAL_VALUE;
                    return function (currValue) {
                        // Initially, both `$observe()` and `$watch()` will call this function.
                        if (!strictEquals(prevValue, currValue)) {
                            if (prevValue === INITIAL_VALUE) {
                                prevValue = currValue;
                            }
                            _this.updateInput(prop, prevValue, currValue);
                            prevValue = currValue;
                        }
                    };
                })(input.prop);
                attrs.$observe(input.attr, observeFn_1);
                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time
                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that
                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.
                var unwatch_1 = this_1.componentScope.$watch(function () {
                    unwatch_1();
                    unwatch_1 = null;
                    observeFn_1(attrs[input.attr]);
                });
            }
            else if (attrs.hasOwnProperty(input.bindAttr)) {
                expr = attrs[input.bindAttr];
            }
            else if (attrs.hasOwnProperty(input.bracketAttr)) {
                expr = attrs[input.bracketAttr];
            }
            else if (attrs.hasOwnProperty(input.bindonAttr)) {
                expr = attrs[input.bindonAttr];
            }
            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {
                expr = attrs[input.bracketParenAttr];
            }
            if (expr != null) {
                var watchFn = (function (prop) {
                    return function (currValue, prevValue) {
                        return _this.updateInput(prop, prevValue, currValue);
                    };
                })(input.prop);
                this_1.componentScope.$watch(expr, watchFn);
            }
        };
        var this_1 = this;
        for (var i = 0; i < inputs.length; i++) {
            _loop_1(i);
        }
        // Invoke `ngOnChanges()` and Change Detection (when necessary)
        var detectChanges = function () { return _this.changeDetector.detectChanges(); };
        var prototype = this.componentFactory.componentType.prototype;
        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);
        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {
            // Invoke `ngOnChanges()`
            if (_this.implementsOnChanges) {
                var inputChanges = _this.inputChanges;
                _this.inputChanges = {};
                _this.component.ngOnChanges((inputChanges));
            }
            _this.viewChangeDetector.markForCheck();
            // If opted out of propagating digests, invoke change detection when inputs change.
            if (!propagateDigest) {
                detectChanges();
            }
        }));
        // If not opted out of propagating digests, invoke change detection on every digest
        if (propagateDigest) {
            this.componentScope.$watch(this.wrapCallback(detectChanges));
        }
        // If necessary, attach the view so that it will be dirty-checked.
        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)
        if (needsNgZone || !propagateDigest) {
            var unwatch_2 = this.componentScope.$watch(function () {
                unwatch_2();
                unwatch_2 = null;
                var appRef = _this.parentInjector.get(_angular_core.ApplicationRef);
                appRef.attachView(_this.componentRef.hostView);
            });
        }
    };
    DowngradeComponentAdapter.prototype.setupOutputs = function () {
        var attrs = this.attrs;
        var outputs = this.componentFactory.outputs || [];
        for (var j = 0; j < outputs.length; j++) {
            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);
            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);
            var bracketParenAttr = "[(" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + ")]";
            // order below is important - first update bindings then evaluate expressions
            if (attrs.hasOwnProperty(bindonAttr)) {
                this.subscribeToOutput(output, attrs[bindonAttr], true);
            }
            if (attrs.hasOwnProperty(bracketParenAttr)) {
                this.subscribeToOutput(output, attrs[bracketParenAttr], true);
            }
            if (attrs.hasOwnProperty(output.onAttr)) {
                this.subscribeToOutput(output, attrs[output.onAttr]);
            }
            if (attrs.hasOwnProperty(output.parenAttr)) {
                this.subscribeToOutput(output, attrs[output.parenAttr]);
            }
        }
    };
    DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {
        var _this = this;
        if (isAssignment === void 0) { isAssignment = false; }
        var getter = this.$parse(expr);
        var setter = getter.assign;
        if (isAssignment && !setter) {
            throw new Error("Expression '" + expr + "' is not assignable!");
        }
        var emitter = this.component[output.prop];
        if (emitter) {
            emitter.subscribe({
                next: isAssignment ? function (v) { return setter(_this.scope, v); } :
                    function (v) { return getter(_this.scope, { '$event': v }); }
            });
        }
        else {
            throw new Error("Missing emitter '" + output.prop + "' on component '" + getComponentName(this.componentFactory.componentType) + "'!");
        }
    };
    DowngradeComponentAdapter.prototype.registerCleanup = function () {
        var _this = this;
        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });
        var destroyed = false;
        this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });
        this.componentScope.$on('$destroy', function () {
            if (!destroyed) {
                destroyed = true;
                _this.componentRef.injector.get(_angular_core.TestabilityRegistry)
                    .unregisterApplication(_this.componentRef.location.nativeElement);
                destroyComponentRef();
            }
        });
    };
    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };
    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {
        if (this.implementsOnChanges) {
            this.inputChanges[prop] = new _angular_core.SimpleChange(prevValue, currValue, prevValue === currValue);
        }
        this.inputChangeCount++;
        this.component[prop] = currValue;
    };
    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {
        var ngContentSelectors = this.componentFactory.ngContentSelectors;
        return groupNodesBySelector(ngContentSelectors, this.element.contents());
    };
    return DowngradeComponentAdapter;
}());
/**
 * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.
 */
function groupNodesBySelector(ngContentSelectors, nodes) {
    var projectableNodes = [];
    var wildcardNgContentIndex;
    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {
        projectableNodes[i] = [];
    }
    for (var j = 0, jj = nodes.length; j < jj; ++j) {
        var node = nodes[j];
        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);
        if (ngContentIndex != null) {
            projectableNodes[ngContentIndex].push(node);
        }
    }
    return projectableNodes;
}
function findMatchingNgContentIndex(element, ngContentSelectors) {
    var ngContentIndices = [];
    var wildcardNgContentIndex = -1;
    for (var i = 0; i < ngContentSelectors.length; i++) {
        var selector = ngContentSelectors[i];
        if (selector === '*') {
            wildcardNgContentIndex = i;
        }
        else {
            if (matchesSelector(element, selector)) {
                ngContentIndices.push(i);
            }
        }
    }
    ngContentIndices.sort();
    if (wildcardNgContentIndex !== -1) {
        ngContentIndices.push(wildcardNgContentIndex);
    }
    return ngContentIndices.length ? ngContentIndices[0] : null;
}
var _matches;
function matchesSelector(el, selector) {
    if (!_matches) {
        var elProto = Element.prototype;
        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||
            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;
    }
    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows an Angular component to be used from AngularJS.
 *
 * @howToUse
 *
 * Let's assume that you have an Angular component called `ng2Heroes` that needs
 * to be made available in AngularJS templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes"}
 *
 * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)
 * that will make this Angular component available inside AngularJS templates.
 * The `downgradeComponent()` function returns a factory function that we
 * can use to define the AngularJS directive that wraps the "downgraded" component.
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes-wrapper"}
 *
 * @description
 *
 * A helper function that returns a factory function to be used for registering an
 * AngularJS wrapper directive for "downgrading" an Angular component.
 *
 * The parameter contains information about the Component that is being downgraded:
 *
 * * `component: Type<any>`: The type of the Component that will be downgraded
 *
 * @experimental
 */
function downgradeComponent(info) {
    var directiveFactory = function ($compile, $injector, $parse) {
        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change
        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone
        // (except if explicitly escaped, in which case we shouldn't force it back in).
        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the
        // Angular zone.
        var needsNgZone = false;
        var wrapCallback = function (cb) { return cb; };
        var ngZone;
        return {
            restrict: 'E',
            terminal: true,
            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],
            link: function (scope, element, attrs, required) {
                // We might have to compile the contents asynchronously, because this might have been
                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have
                // been compiled.
                var ngModel = required[1];
                var parentInjector = required[0];
                var ranAsync = false;
                if (!parentInjector) {
                    var lazyModuleRef = $injector.get(LAZY_MODULE_REF);
                    needsNgZone = lazyModuleRef.needsNgZone;
                    parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;
                }
                var doDowngrade = function (injector) {
                    var componentFactoryResolver = injector.get(_angular_core.ComponentFactoryResolver);
                    var componentFactory = (componentFactoryResolver.resolveComponentFactory(info.component));
                    if (!componentFactory) {
                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));
                    }
                    var injectorPromise = new ParentInjectorPromise(element);
                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);
                    var projectableNodes = facade.compileContents();
                    facade.createComponent(projectableNodes);
                    facade.setupInputs(needsNgZone, info.propagateDigest);
                    facade.setupOutputs();
                    facade.registerCleanup();
                    injectorPromise.resolve(facade.getInjector());
                    if (ranAsync) {
                        // If this is run async, it is possible that it is not run inside a
                        // digest and initial input values will not be detected.
                        scope.$evalAsync(function () { });
                    }
                };
                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {
                    if (!ngZone) {
                        ngZone = injector.get(_angular_core.NgZone);
                        wrapCallback = function (cb) {
                            return function () {
                                return _angular_core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);
                            };
                        };
                    }
                    wrapCallback(function () { return doDowngrade(injector); })();
                };
                if (isThenable(parentInjector)) {
                    parentInjector.then(downgradeFn);
                }
                else {
                    downgradeFn(parentInjector);
                }
                ranAsync = true;
            }
        };
    };
    // bracket-notation because of closure - see #14441
    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];
    return directiveFactory;
}
/**
 * Synchronous promise-like object to wrap parent injectors,
 * to preserve the synchronous nature of Angular 1's $compile.
 */
var ParentInjectorPromise = /** @class */ (function () {
    function ParentInjectorPromise(element) {
        this.element = element;
        this.injectorKey = controllerKey(INJECTOR_KEY);
        this.callbacks = [];
        // Store the promise on the element.
        // Store the promise on the element.
        element.data(this.injectorKey, this);
    }
    ParentInjectorPromise.prototype.then = function (callback) {
        if (this.injector) {
            callback(this.injector);
        }
        else {
            this.callbacks.push(callback);
        }
    };
    ParentInjectorPromise.prototype.resolve = function (injector) {
        this.injector = injector;
        // Store the real injector on the element.
        // Store the real injector on the element.
        this.element.data(this.injectorKey, injector);
        // Release the element to prevent memory leaks.
        this.element = (null);
        // Run the queued callbacks.
        this.callbacks.forEach(function (callback) { return callback(injector); });
        this.callbacks.length = 0;
    };
    return ParentInjectorPromise;
}());
function isThenable(obj) {
    return isFunction(obj.then);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allow an Angular service to be accessible from AngularJS.
 *
 * @howToUse
 *
 * First ensure that the service to be downgraded is provided in an {@link NgModule}
 * that will be part of the upgrade application. For example, let's assume we have
 * defined `HeroesService`
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes-service"}
 *
 * and that we have included this in our upgrade app {@link NgModule}
 *
 * {@example upgrade/static/ts/module.ts region="ng2-module"}
 *
 * Now we can register the `downgradeInjectable` factory function for the service
 * on an AngularJS module.
 *
 * {@example upgrade/static/ts/module.ts region="downgrade-ng2-heroes-service"}
 *
 * Inside an AngularJS component's controller we can get hold of the
 * downgraded service via the name we gave when downgrading.
 *
 * {@example upgrade/static/ts/module.ts region="example-app"}
 *
 * @description
 *
 * Takes a `token` that identifies a service provided from Angular.
 *
 * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be
 * used to register the service on an AngularJS module.
 *
 * The factory function provides access to the Angular service that
 * is identified by the `token` parameter.
 *
 * @experimental
 */
function downgradeInjectable(token) {
    var factory = function (i) { return i.get(token); };
    factory['$inject'] = [INJECTOR_KEY];
    return factory;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @stable
 */
var VERSION = new _angular_core.Version('5.2.10');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// We have to do a little dance to get the ng1 injector into the module injector.
// We store the ng1 injector so that the provider in the module injector can access it
// Then we "get" the ng1 injector from the module injector, which triggers the provider to read
// the stored injector and release the reference to it.
var tempInjectorRef;
function setTempInjectorRef(injector) {
    tempInjectorRef = injector;
}
function injectorFactory() {
    if (!tempInjectorRef) {
        throw new Error('Trying to get the AngularJS injector before it being set.');
    }
    var injector = tempInjectorRef;
    tempInjectorRef = null; // clear the value to prevent memory leaks
    return injector;
}
function rootScopeFactory(i) {
    return i.get('$rootScope');
}
function compileFactory(i) {
    return i.get('$compile');
}
function parseFactory(i) {
    return i.get('$parse');
}
var angular1Providers = [
    // We must use exported named functions for the ng2 factories to keep the compiler happy:
    // > Metadata collected contains an error that will be reported at runtime:
    // >   Function calls are not supported.
    // >   Consider replacing the function or lambda with a reference to an exported function
    { provide: '$injector', useFactory: injectorFactory, deps: [] },
    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },
    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },
    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgAdapterInjector = /** @class */ (function () {
    function NgAdapterInjector(modInjector) {
        this.modInjector = modInjector;
    }
    // When Angular locate a service in the component injector tree, the not found value is set to
    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module
    // injector.
    // AngularJS only supports a single tree and should always check the module injector.
    // When Angular locate a service in the component injector tree, the not found value is set to
    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module
    // injector.
    // AngularJS only supports a single tree and should always check the module injector.
    NgAdapterInjector.prototype.get = 
    // When Angular locate a service in the component injector tree, the not found value is set to
    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module
    // injector.
    // AngularJS only supports a single tree and should always check the module injector.
    function (token, notFoundValue) {
        if (notFoundValue === _angular_core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
            return notFoundValue;
        }
        return this.modInjector.get(token, notFoundValue);
    };
    return NgAdapterInjector;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @experimental */
function downgradeModule(moduleFactoryOrBootstrapFn) {
    var LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';
    var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?
        moduleFactoryOrBootstrapFn :
        function (extraProviders) {
            return _angular_platformBrowser.platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);
        };
    var injector;
    // Create an ng1 module to bootstrap.
    module$1(LAZY_MODULE_NAME, [])
        .factory(INJECTOR_KEY, function () {
        if (!injector) {
            throw new Error('Trying to get the Angular injector before bootstrapping an Angular module.');
        }
        return injector;
    })
        .factory(LAZY_MODULE_REF, [
        $INJECTOR,
        function ($injector) {
            setTempInjectorRef($injector);
            var result = {
                needsNgZone: true,
                promise: bootstrapFn(angular1Providers).then(function (ref) {
                    injector = result.injector = new NgAdapterInjector(ref.injector);
                    injector.get($INJECTOR);
                    return injector;
                })
            };
            return result;
        }
    ]);
    return LAZY_MODULE_NAME;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Constants
var REQUIRE_PREFIX_RE = /^(\^\^?)?(\?)?(\^\^?)?/;
// Classes
var UpgradeHelper = /** @class */ (function () {
    function UpgradeHelper(injector, name, elementRef, directive) {
        this.injector = injector;
        this.name = name;
        this.$injector = injector.get($INJECTOR);
        this.$compile = this.$injector.get($COMPILE);
        this.$controller = this.$injector.get($CONTROLLER);
        this.element = elementRef.nativeElement;
        this.$element = element(this.element);
        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);
    }
    UpgradeHelper.getDirective = function ($injector, name) {
        var directives = $injector.get(name + 'Directive');
        if (directives.length > 1) {
            throw new Error("Only support single directive definition for: " + name);
        }
        var directive = directives[0];
        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a
        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.
        if (directive.compile && !directive.link)
            notSupported(name, 'compile');
        if (directive.replace)
            notSupported(name, 'replace');
        if (directive.terminal)
            notSupported(name, 'terminal');
        return directive;
    };
    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {
        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }
        if (directive.template !== undefined) {
            return getOrCall(directive.template);
        }
        else if (directive.templateUrl) {
            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);
            var url_1 = getOrCall(directive.templateUrl);
            var template = $templateCache_1.get(url_1);
            if (template !== undefined) {
                return template;
            }
            else if (!fetchRemoteTemplate) {
                throw new Error('loading directive templates asynchronously is not supported');
            }
            return new Promise(function (resolve, reject) {
                var $httpBackend = $injector.get($HTTP_BACKEND);
                $httpBackend('GET', url_1, null, function (status, response) {
                    if (status === 200) {
                        resolve($templateCache_1.put(url_1, response));
                    }
                    else {
                        reject("GET component template from '" + url_1 + "' returned '" + status + ": " + response + "'");
                    }
                });
            });
        }
        else {
            throw new Error("Directive '" + directive.name + "' is not a component, it is missing template.");
        }
    };
    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {
        // TODO: Document that we do not pre-assign bindings on the controller instance.
        // Quoted properties below so that this code can be optimized with Closure Compiler.
        var locals = { '$scope': $scope, '$element': this.$element };
        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);
        this.$element.data(controllerKey((this.directive.name)), controller);
        return controller;
    };
    UpgradeHelper.prototype.compileTemplate = function (template) {
        if (template === undefined) {
            template = UpgradeHelper.getTemplate(this.$injector, this.directive);
        }
        return this.compileHtml(template);
    };
    UpgradeHelper.prototype.prepareTransclusion = function () {
        var _this = this;
        var transclude = this.directive.transclude;
        var contentChildNodes = this.extractChildNodes();
        var attachChildrenFn = function (scope, cloneAttachFn) {
            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if
            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,
            // there will be no transclusion scope here.
            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.
            scope = scope || { $destroy: function () { return undefined; } };
            return cloneAttachFn($template, scope);
        };
        var $template = contentChildNodes;
        if (transclude) {
            var slots_1 = Object.create(null);
            if (typeof transclude === 'object') {
                $template = [];
                var slotMap_1 = Object.create(null);
                var filledSlots_1 = Object.create(null);
                // Parse the element selectors.
                Object.keys(transclude).forEach(function (slotName) {
                    var selector = transclude[slotName];
                    var optional = selector.charAt(0) === '?';
                    selector = optional ? selector.substring(1) : selector;
                    slotMap_1[selector] = slotName;
                    slots_1[slotName] = null; // `null`: Defined but not yet filled.
                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.
                });
                // Add the matching elements into their slot.
                contentChildNodes.forEach(function (node) {
                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];
                    if (slotName) {
                        filledSlots_1[slotName] = true;
                        slots_1[slotName] = slots_1[slotName] || [];
                        slots_1[slotName].push(node);
                    }
                    else {
                        $template.push(node);
                    }
                });
                // Check for required slots that were not filled.
                Object.keys(filledSlots_1).forEach(function (slotName) {
                    if (!filledSlots_1[slotName]) {
                        throw new Error("Required transclusion slot '" + slotName + "' on directive: " + _this.name);
                    }
                });
                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {
                    var nodes = slots_1[slotName];
                    slots_1[slotName] = function (scope, cloneAttach) {
                        return cloneAttach(nodes, scope);
                    };
                });
            }
            // Attach `$$slots` to default slot transclude fn.
            attachChildrenFn.$$slots = slots_1;
            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular
            // removes all text content after the first interpolation and updates it later, after
            // evaluating the expressions. This would result in AngularJS failing to recognize text
            // nodes that start with an interpolation as transcluded content and use the fallback
            // content instead.
            // To avoid this issue, we add a
            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)
            // to empty text nodes (which can only be a result of Angular removing their initial content).
            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation
            //       will still fail to be detected by AngularJS v1.6+
            $template.forEach(function (node) {
                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {
                    node.nodeValue = '\u200C';
                }
            });
        }
        return attachChildrenFn;
    };
    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {
        var directiveRequire = this.getDirectiveRequire();
        var requiredControllers = this.resolveRequire(directiveRequire);
        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {
            var requiredControllersMap_1 = requiredControllers;
            Object.keys(requiredControllersMap_1).forEach(function (key) {
                controllerInstance[key] = requiredControllersMap_1[key];
            });
        }
        return requiredControllers;
    };
    UpgradeHelper.prototype.compileHtml = function (html) {
        this.element.innerHTML = html;
        return this.$compile(this.element.childNodes);
    };
    UpgradeHelper.prototype.extractChildNodes = function () {
        var childNodes = [];
        var childNode;
        while (childNode = this.element.firstChild) {
            this.element.removeChild(childNode);
            childNodes.push(childNode);
        }
        return childNodes;
    };
    UpgradeHelper.prototype.getDirectiveRequire = function () {
        var require = this.directive.require || ((this.directive.controller && this.directive.name));
        if (isMap(require)) {
            Object.keys(require).forEach(function (key) {
                var value = require[key];
                var match = (value.match(REQUIRE_PREFIX_RE));
                var name = value.substring(match[0].length);
                if (!name) {
                    require[key] = match[0] + key;
                }
            });
        }
        return require;
    };
    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {
        var _this = this;
        if (!require) {
            return null;
        }
        else if (Array.isArray(require)) {
            return require.map(function (req) { return _this.resolveRequire(req); });
        }
        else if (typeof require === 'object') {
            var value_1 = {};
            Object.keys(require).forEach(function (key) { return value_1[key] = (_this.resolveRequire(require[key])); });
            return value_1;
        }
        else if (typeof require === 'string') {
            var match = (require.match(REQUIRE_PREFIX_RE));
            var inheritType = match[1] || match[3];
            var name_1 = require.substring(match[0].length);
            var isOptional = !!match[2];
            var searchParents = !!inheritType;
            var startOnParent = inheritType === '^^';
            var ctrlKey = controllerKey(name_1);
            var elem = startOnParent ? this.$element.parent() : this.$element;
            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);
            if (!value && !isOptional) {
                throw new Error("Unable to find required '" + require + "' in upgraded directive '" + this.name + "'.");
            }
            return value;
        }
        else {
            throw new Error("Unrecognized 'require' syntax on upgraded directive '" + this.name + "': " + require);
        }
    };
    return UpgradeHelper;
}());
function getOrCall(property) {
    return isFunction(property) ? property() : property;
}
// NOTE: Only works for `typeof T !== 'object'`.
function isMap(value) {
    return value && !Array.isArray(value) && typeof value === 'object';
}
function notSupported(name, feature) {
    throw new Error("Upgraded directive '" + name + "' contains unsupported feature: '" + feature + "'.");
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NOT_SUPPORTED = 'NOT_SUPPORTED';
var INITIAL_VALUE$1 = {
    __UNINITIALIZED__: true
};
var Bindings = /** @class */ (function () {
    function Bindings() {
        this.twoWayBoundProperties = [];
        this.twoWayBoundLastValues = [];
        this.expressionBoundProperties = [];
        this.propertyToOutputMap = {};
    }
    return Bindings;
}());
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows an AngularJS component to be used from Angular.
 *
 * @howToUse
 *
 * Let's assume that you have an AngularJS component called `ng1Hero` that needs
 * to be made available in Angular templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng1-hero"}
 *
 * We must create a {@link Directive} that will make this AngularJS component
 * available inside Angular templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper"}
 *
 * In this example you can see that we must derive from the {@link UpgradeComponent}
 * base class but also provide an {@link Directive `@Directive`} decorator. This is
 * because the AoT compiler requires that this information is statically available at
 * compile time.
 *
 * Note that we must do the following:
 * * specify the directive's selector (`ng1-hero`)
 * * specify all inputs and outputs that the AngularJS component expects
 * * derive from `UpgradeComponent`
 * * call the base class from the constructor, passing
 *   * the AngularJS name of the component (`ng1Hero`)
 *   * the {@link ElementRef} and {@link Injector} for the component wrapper
 *
 * @description
 *
 * A helper class that should be used as a base class for creating Angular directives
 * that wrap AngularJS components that need to be "upgraded".
 *
 * @experimental
 */
var UpgradeComponent = /** @class */ (function () {
    /**
     * Create a new `UpgradeComponent` instance. You should not normally need to do this.
     * Instead you should derive a new class from this one and call the super constructor
     * from the base class.
     *
     * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper" }
     *
     * * The `name` parameter should be the name of the AngularJS directive.
     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency
     *   injection into the base class constructor.
     *
     * Note that we must manually implement lifecycle hooks that call through to the super class.
     * This is because, at the moment, the AoT compiler is not able to tell that the
     * `UpgradeComponent`
     * already implements them and so does not wire up calls to them at runtime.
     */
    function UpgradeComponent(name, elementRef, injector) {
        this.name = name;
        this.elementRef = elementRef;
        this.injector = injector;
        this.helper = new UpgradeHelper(injector, name, elementRef);
        this.$injector = this.helper.$injector;
        this.element = this.helper.element;
        this.$element = this.helper.$element;
        this.directive = this.helper.directive;
        this.bindings = this.initializeBindings(this.directive);
        // We ask for the AngularJS scope from the Angular injector, since
        // we will put the new component scope onto the new injector for each component
        var $parentScope = injector.get($SCOPE);
        // QUESTION 1: Should we create an isolated scope if the scope is only true?
        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?
        this.$componentScope = $parentScope.$new(!!this.directive.scope);
        this.initializeOutputs();
    }
    UpgradeComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Collect contents, insert and compile template
        var attachChildNodes = this.helper.prepareTransclusion();
        var linkFn = this.helper.compileTemplate();
        // Instantiate controller
        var controllerType = this.directive.controller;
        var bindToController = this.directive.bindToController;
        if (controllerType) {
            this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);
        }
        else if (bindToController) {
            throw new Error("Upgraded directive '" + this.directive.name + "' specifies 'bindToController' but no controller.");
        }
        // Set up outputs
        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;
        this.bindOutputs();
        // Require other controllers
        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);
        // Hook: $onChanges
        if (this.pendingChanges) {
            this.forwardChanges(this.pendingChanges);
            this.pendingChanges = null;
        }
        // Hook: $onInit
        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {
            this.controllerInstance.$onInit();
        }
        // Hook: $doCheck
        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {
            var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };
            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);
            callDoCheck();
        }
        // Linking
        var link = this.directive.link;
        var preLink = (typeof link == 'object') && link.pre;
        var postLink = (typeof link == 'object') ? link.post : link;
        var attrs = NOT_SUPPORTED;
        var transcludeFn = NOT_SUPPORTED;
        if (preLink) {
            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
        }
        linkFn(this.$componentScope, (null), { parentBoundTranscludeFn: attachChildNodes });
        if (postLink) {
            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
        }
        // Hook: $postLink
        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {
            this.controllerInstance.$postLink();
        }
    };
    UpgradeComponent.prototype.ngOnChanges = function (changes) {
        if (!this.bindingDestination) {
            this.pendingChanges = changes;
        }
        else {
            this.forwardChanges(changes);
        }
    };
    UpgradeComponent.prototype.ngDoCheck = function () {
        var _this = this;
        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;
        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;
        var propertyToOutputMap = this.bindings.propertyToOutputMap;
        twoWayBoundProperties.forEach(function (propName, idx) {
            var newValue = _this.bindingDestination[propName];
            var oldValue = twoWayBoundLastValues[idx];
            if (!_angular_core.ɵlooseIdentical(newValue, oldValue)) {
                var outputName = propertyToOutputMap[propName];
                var eventEmitter = _this[outputName];
                eventEmitter.emit(newValue);
                twoWayBoundLastValues[idx] = newValue;
            }
        });
    };
    UpgradeComponent.prototype.ngOnDestroy = function () {
        if (isFunction(this.unregisterDoCheckWatcher)) {
            this.unregisterDoCheckWatcher();
        }
        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {
            this.controllerInstance.$onDestroy();
        }
        this.$componentScope.$destroy();
    };
    UpgradeComponent.prototype.initializeBindings = function (directive) {
        var _this = this;
        var btcIsObject = typeof directive.bindToController === 'object';
        if (btcIsObject && Object.keys((directive.scope)).length) {
            throw new Error("Binding definitions on scope and controller at the same time is not supported.");
        }
        var context = (btcIsObject) ? directive.bindToController : directive.scope;
        var bindings = new Bindings();
        if (typeof context == 'object') {
            Object.keys(context).forEach(function (propName) {
                var definition = context[propName];
                var bindingType = definition.charAt(0);
                // QUESTION: What about `=*`? Ignore? Throw? Support?
                switch (bindingType) {
                    case '@':
                    case '<':
                        // We don't need to do anything special. They will be defined as inputs on the
                        // upgraded component facade and the change propagation will be handled by
                        // `ngOnChanges()`.
                        break;
                    case '=':
                        bindings.twoWayBoundProperties.push(propName);
                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);
                        bindings.propertyToOutputMap[propName] = propName + 'Change';
                        break;
                    case '&':
                        bindings.expressionBoundProperties.push(propName);
                        bindings.propertyToOutputMap[propName] = propName;
                        break;
                    default:
                        var json = JSON.stringify(context);
                        throw new Error("Unexpected mapping '" + bindingType + "' in '" + json + "' in '" + _this.name + "' directive.");
                }
            });
        }
        return bindings;
    };
    UpgradeComponent.prototype.initializeOutputs = function () {
        var _this = this;
        // Initialize the outputs for `=` and `&` bindings
        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)
            .forEach(function (propName) {
            var outputName = _this.bindings.propertyToOutputMap[propName];
            _this[outputName] = new _angular_core.EventEmitter();
        });
    };
    UpgradeComponent.prototype.bindOutputs = function () {
        var _this = this;
        // Bind `&` bindings to the corresponding outputs
        this.bindings.expressionBoundProperties.forEach(function (propName) {
            var outputName = _this.bindings.propertyToOutputMap[propName];
            var emitter = _this[outputName];
            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };
        });
    };
    UpgradeComponent.prototype.forwardChanges = function (changes) {
        var _this = this;
        // Forward input changes to `bindingDestination`
        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });
        if (isFunction(this.bindingDestination.$onChanges)) {
            this.bindingDestination.$onChanges(changes);
        }
    };
    return UpgradeComponent;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows AngularJS and Angular components to be used together inside a hybrid upgrade
 * application, which supports AoT compilation.
 *
 * Specifically, the classes and functions in the `upgrade/static` module allow the following:
 * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so
 *    that it can be used in an Angular template. See {@link UpgradeComponent}.
 * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so
 *    that it can be used in an AngularJS template. See {@link downgradeComponent}.
 * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS
 *    service so that it can be injected into an Angular context. See
 *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.
 * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable
 *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.
 * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks
 *    coexisting in a single application. See the
 *    {@link UpgradeModule#example example} below.
 *
 * ## Mental Model
 *
 * When reasoning about how a hybrid application works it is useful to have a mental model which
 * describes what is happening and explains what is happening at the lowest level.
 *
 * 1. There are two independent frameworks running in a single application, each framework treats
 *    the other as a black box.
 * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework
 *    instantiated the element is the owner. Each framework only updates/interacts with its own
 *    DOM elements and ignores others.
 * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of
 *    where they are instantiated.
 * 4. Angular components always execute inside the Angular framework codebase regardless of
 *    where they are instantiated.
 * 5. An AngularJS component can be "upgraded"" to an Angular component. This is achieved by
 *    defining an Angular directive, which bootstraps the AngularJS component at its location
 *    in the DOM. See {@link UpgradeComponent}.
 * 6. An Angular component can be "downgraded"" to an AngularJS component. This is achieved by
 *    defining an AngularJS directive, which bootstraps the Angular component at its location
 *    in the DOM. See {@link downgradeComponent}.
 * 7. Whenever an "upgraded"/"downgraded" component is instantiated the host element is owned by
 *    the framework doing the instantiation. The other framework then instantiates and owns the
 *    view for that component.
 *    a. This implies that the component bindings will always follow the semantics of the
 *       instantiation framework.
 *    b. The DOM attributes are parsed by the framework that owns the current template. So
 * attributes
 *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.
 *    c. However the template binding syntax will always use the Angular style, e.g. square
 *       brackets (`[...]`) for property binding.
 * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the
 *    root component of the application.
 * 9. The new application is running in an Angular zone, and therefore it no longer needs calls
 * to
 *    `$apply()`.
 *
 * @howToUse
 *
 * `import {UpgradeModule} from '@angular/upgrade/static';`
 *
 * ## Example
 * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.
 *
 * {@example upgrade/static/ts/module.ts region='ng2-module'}
 *
 * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance
 * and use it to bootstrap the top level [AngularJS
 * module](https://docs.angularjs.org/api/ng/type/angular.Module).
 *
 * {@example upgrade/static/ts/module.ts region='bootstrap'}
 *
 * {@a upgrading-an-angular-1-service}
 *
 * ## Upgrading an AngularJS service
 *
 * There is no specific API for upgrading an AngularJS service. Instead you should just follow the
 * following recipe:
 *
 * Let's say you have an AngularJS service:
 *
 * {@example upgrade/static/ts/module.ts region="ng1-title-case-service"}
 *
 * Then you should define an Angular provider to be included in your {@link NgModule} `providers`
 * property.
 *
 * {@example upgrade/static/ts/module.ts region="upgrade-ng1-service"}
 *
 * Then you can use the "upgraded" AngularJS service by injecting it into an Angular component
 * or service.
 *
 * {@example upgrade/static/ts/module.ts region="use-ng1-upgraded-service"}
 *
 * @description
 *
 * This class is an `NgModule`, which you import to provide AngularJS core services,
 * and has an instance method used to bootstrap the hybrid upgrade application.
 *
 * ## Core AngularJS services
 * Importing this {@link NgModule} will add providers for the core
 * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.
 *
 * ## Bootstrap
 * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}
 * method, which you use to bootstrap the top level AngularJS module onto an element in the
 * DOM for the hybrid upgrade app.
 *
 * It also contains properties to access the {@link UpgradeModule#injector root injector}, the
 * bootstrap {@link NgZone} and the
 * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).
 *
 * @experimental
 */
var UpgradeModule = /** @class */ (function () {
    function UpgradeModule(/** The root {@link Injector} for the upgrade application. */
        /** The root {@link Injector} for the upgrade application. */
        injector, /** The bootstrap zone for the upgrade application */
        ngZone) {
        this.ngZone = ngZone;
        this.injector = new NgAdapterInjector(injector);
    }
    /**
     * Bootstrap an AngularJS application from this NgModule
     * @param element the element on which to bootstrap the AngularJS application
     * @param [modules] the AngularJS modules to bootstrap for this application
     * @param [config] optional extra AngularJS bootstrap configuration
     */
    /**
       * Bootstrap an AngularJS application from this NgModule
       * @param element the element on which to bootstrap the AngularJS application
       * @param [modules] the AngularJS modules to bootstrap for this application
       * @param [config] optional extra AngularJS bootstrap configuration
       */
    UpgradeModule.prototype.bootstrap = /**
       * Bootstrap an AngularJS application from this NgModule
       * @param element the element on which to bootstrap the AngularJS application
       * @param [modules] the AngularJS modules to bootstrap for this application
       * @param [config] optional extra AngularJS bootstrap configuration
       */
    function (element$$1, modules, config /*angular.IAngularBootstrapConfig*/) {
        var _this = this;
        if (modules === void 0) { modules = []; }
        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';
        // Create an ng1 module to bootstrap
        var initModule = module$1(INIT_MODULE_NAME, [])
            .value(INJECTOR_KEY, this.injector)
            .factory(LAZY_MODULE_REF, [
            INJECTOR_KEY,
            function (injector) { return ({ injector: injector, needsNgZone: false }); }
        ])
            .config([
            $PROVIDE, $INJECTOR,
            function ($provide, $injector) {
                if ($injector.has($$TESTABILITY)) {
                    $provide.decorator($$TESTABILITY, [
                        $DELEGATE,
                        function (testabilityDelegate) {
                            var originalWhenStable = testabilityDelegate.whenStable;
                            var injector = _this.injector;
                            // Cannot use arrow function below because we need the context
                            var newWhenStable = function (callback) {
                                originalWhenStable.call(testabilityDelegate, function () {
                                    var ng2Testability = injector.get(_angular_core.Testability);
                                    if (ng2Testability.isStable()) {
                                        callback();
                                    }
                                    else {
                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));
                                    }
                                });
                            };
                            testabilityDelegate.whenStable = newWhenStable;
                            return testabilityDelegate;
                        }
                    ]);
                }
                if ($injector.has($INTERVAL)) {
                    $provide.decorator($INTERVAL, [
                        $DELEGATE,
                        function (intervalDelegate) {
                            // Wrap the $interval service so that setInterval is called outside NgZone,
                            // but the callback is still invoked within it. This is so that $interval
                            // won't block stability, which preserves the behavior from AngularJS.
                            var wrappedInterval = function (fn, delay, count, invokeApply) {
                                var pass = [];
                                for (var _i = 4; _i < arguments.length; _i++) {
                                    pass[_i - 4] = arguments[_i];
                                }
                                return _this.ngZone.runOutsideAngular(function () {
                                    return intervalDelegate.apply(void 0, [function () {
                                            var args = [];
                                            for (var _i = 0; _i < arguments.length; _i++) {
                                                args[_i] = arguments[_i];
                                            }
                                            // Run callback in the next VM turn - $interval calls
                                            // $rootScope.$apply, and running the callback in NgZone will
                                            // cause a '$digest already in progress' error if it's in the
                                            // same vm turn.
                                            setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, args); }); });
                                        }, delay, count, invokeApply].concat(pass));
                                });
                            };
                            wrappedInterval['cancel'] = intervalDelegate.cancel;
                            return wrappedInterval;
                        }
                    ]);
                }
            }
        ])
            .run([
            $INJECTOR,
            function ($injector) {
                _this.$injector = $injector;
                // Initialize the ng1 $injector provider
                setTempInjectorRef($injector);
                _this.injector.get($INJECTOR);
                // Put the injector on the DOM, so that it can be "required"
                // Put the injector on the DOM, so that it can be "required"
                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.injector);
                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles
                // We need to do this in the next tick so that we don't prevent the bootup
                // stabilizing
                setTimeout(function () {
                    var $rootScope = $injector.get('$rootScope');
                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });
                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });
                }, 0);
            }
        ]);
        var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));
        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred
        var windowAngular = window['angular'];
        windowAngular.resumeBootstrap = undefined;
        // Bootstrap the AngularJS application inside our zone
        this.ngZone.run(function () { bootstrap(element$$1, [upgradeModule.name], config); });
        // Patch resumeBootstrap() to run inside the ngZone
        if (windowAngular.resumeBootstrap) {
            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;
            var ngZone_1 = this.ngZone;
            windowAngular.resumeBootstrap = function () {
                var _this = this;
                var args = arguments;
                windowAngular.resumeBootstrap = originalResumeBootstrap_1;
                return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });
            };
        }
    };
    UpgradeModule.decorators = [
        { type: _angular_core.NgModule, args: [{ providers: [angular1Providers] },] },
    ];
    /** @nocollapse */
    UpgradeModule.ctorParameters = function () { return [
        { type: _angular_core.Injector, },
        { type: _angular_core.NgZone, },
    ]; };
    return UpgradeModule;
}());

exports.ɵe = angular1Providers;
exports.ɵc = compileFactory;
exports.ɵa = injectorFactory;
exports.ɵd = parseFactory;
exports.ɵb = rootScopeFactory;
exports.getAngularJSGlobal = getAngularJSGlobal;
exports.getAngularLib = getAngularLib;
exports.setAngularJSGlobal = setAngularJSGlobal;
exports.setAngularLib = setAngularLib;
exports.downgradeComponent = downgradeComponent;
exports.downgradeInjectable = downgradeInjectable;
exports.VERSION = VERSION;
exports.downgradeModule = downgradeModule;
exports.UpgradeComponent = UpgradeComponent;
exports.UpgradeModule = UpgradeModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=upgrade-static.umd.js.map


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(28);
var Subscription_1 = __webpack_require__(11);
var Observer_1 = __webpack_require__(32);
var rxSubscriber_1 = __webpack_require__(20);
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): To resolve an issue where Node users may have multiple
                    // copies of rxjs in their node_modules directory.
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();
                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        this.destination = trustedSubscriber;
                        trustedSubscriber.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);
}
//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseobject_1 = __webpack_require__(39);
var Entities = __webpack_require__(81);
var Processes = __webpack_require__(88);
var hibachiservice_1 = __webpack_require__(26);
var utilityservice_1 = __webpack_require__(9);
var core_1 = __webpack_require__(0);
var BaseEntityService = /** @class */ (function (_super) {
    __extends(BaseEntityService, _super);
    //@ngInject
    function BaseEntityService($injector, $hibachi, utilityService, baseObjectName, objectName) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.baseObjectName = baseObjectName;
        _this.objectName = objectName;
        _this.utilityService = utilityService;
        _this.$hibachi = $hibachi;
        _this.$injector = $injector;
        if (!_this.objectName) {
            _this.objectName = _this.baseObjectName;
        }
        _this['new' + _this.objectName] = function () {
            return _this.newEntity(_this.baseObjectName, _this.objectName);
        };
        return _this;
    }
    BaseEntityService.prototype.newEntity = function (baseObjectName, objectName) {
        if (!objectName) {
            objectName = baseObjectName;
        }
        return this.newObject('Entity', baseObjectName, objectName);
    };
    BaseEntityService.prototype.newProcessObject = function (baseObjectName, objectName) {
        if (!objectName) {
            objectName = baseObjectName;
        }
        return this.newObject('Process', baseObjectName, objectName);
    };
    BaseEntityService.prototype.newObject = function (type, baseObjectName, objectName) {
        if (!objectName) {
            objectName = baseObjectName;
        }
        var baseObject = this.$hibachi.getEntityDefinition(baseObjectName);
        if (baseObject) {
            var Barrell = {};
            if (type === 'Entity') {
                Barrell = Entities;
            }
            else if (type === 'Process') {
                Barrell = Processes;
            }
            if (Barrell[objectName]) {
                this.utilityService.extend(Barrell[objectName], baseObject);
                var entity = new Barrell[objectName](this.$injector);
            }
            else {
                var entity = new baseObject();
                //throw('need to add '+ objectName+' class');
            }
            return entity;
        }
        else {
            return {};
        }
    };
    BaseEntityService = __decorate([
        __param(0, core_1.Inject("$injector")),
        __metadata("design:paramtypes", [Object, hibachiservice_1.HibachiService,
            utilityservice_1.UtilityService, String, String])
    ], BaseEntityService);
    return BaseEntityService;
}(baseobject_1.BaseObject));
exports.BaseEntityService = BaseEntityService;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();
//# sourceMappingURL=root.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * @ngdoc service
 * @name sdt.models:ObserverService
 * @description
 * # ObserverService
 * Manages all events inside the application
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(27);
var utilityservice_1 = __webpack_require__(9);
var historyservice_1 = __webpack_require__(42);
var core_1 = __webpack_require__(0);
var ObserverService = /** @class */ (function (_super) {
    __extends(ObserverService, _super);
    function ObserverService($timeout, historyService, utilityService) {
        var _this = 
        /**
         * @ngdoc property
         * @name ObserverService#observers
         * @propertyOf sdt.models:ObserverService
         * @description object to store all observers in
         * @returns {object} object
         */
        _super.call(this) || this;
        _this.historyService = historyService;
        _this.utilityService = utilityService;
        _this.$timeout = $timeout;
        _this.observers = {};
        return _this;
    }
    /* Declare methods */
    /**
     * @ngdoc method
     * @name ObserverService#attach
     * @methodOf sdt.models:ObserverService
     * @param {function} callback the callback function to fire
     * @param {string} event name of the event
     * @param {string} id unique id for the object that is listening i.e. namespace
     * @description adds events listeners
     */
    ObserverService.prototype.attach = function (callback, event, id) {
        if (!id) {
            id = this.utilityService.createID();
        }
        event = event.toLowerCase();
        id = id.toLowerCase();
        if (!this.observers[event]) {
            this.observers[event] = {};
        }
        if (!this.observers[event][id])
            this.observers[event][id] = [];
        this.observers[event][id].push(callback);
    };
    ;
    /**
     * @ngdoc method
     * @name ObserverService#detachById
     * @methodOf sdt.models:ObserverService
     * @param {string} id unique id for the object that is listening i.e. namespace
     * @description removes all events for a specific id from the observers object
     */
    ObserverService.prototype.detachById = function (id) {
        id = id.toLowerCase();
        for (var event in this.observers) {
            this.detachByEventAndId(event, id);
        }
    };
    ;
    /**
     * @ngdoc method
     * @name ObserverService#detachById
     * @methodOf sdt.models:ObserverService
     * @param {string} event name of the event
     * @description removes removes all the event from the observer object
     */
    ObserverService.prototype.detachByEvent = function (event) {
        event = event.toLowerCase();
        if (event in this.observers) {
            delete this.observers[event];
        }
    };
    ;
    /**
     * @ngdoc method
     * @name ObserverService#detachByEventAndId
     * @methodOf sdt.models:ObserverService
     * @param {string} event name of the event
     * @param {string} id unique id for the object that is listening i.e. namespace
     * @description removes removes all callbacks for an id in a specific event from the observer object
     */
    ObserverService.prototype.detachByEventAndId = function (event, id) {
        event = event.toLowerCase();
        id = id.toLowerCase();
        if (event in this.observers) {
            if (id in this.observers[event]) {
                delete this.observers[event][id];
            }
        }
    };
    ;
    /**
     * @ngdoc method
     * @name ObserverService#notify
     * @methodOf sdt.models:ObserverService
     * @param {string} event name of the event
     * @param {string|object|Array|number} parameters pass whatever your listener is expecting
     * @description notifies all observers of a specific event
     */
    ObserverService.prototype.notify = function (event, parameters) {
        var _this = this;
        console.warn(event, parameters);
        event = event.toLowerCase();
        return this.$timeout(function () {
            for (var id in _this.observers[event]) {
                for (var _i = 0, _a = _this.observers[event][id]; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(parameters);
                }
            }
        });
    };
    ;
    /**
     * @ngdoc method
     * @name ObserverService#notifyById
     * @methodOf sdt.models:ObserverService
     * @param {string} event name of the event
     * @param {string} eventId unique id for the object that is listening i.e. namespace
     * @param {string|object|Array|number} parameters pass whatever your listener is expecting
     * @description notifies observers of a specific event by id
     */
    ObserverService.prototype.notifyById = function (event, eventId, parameters) {
        var _this = this;
        console.warn(event, eventId, parameters);
        event = event.toLowerCase();
        eventId = eventId.toLowerCase();
        return this.$timeout(function () {
            for (var id in _this.observers[event]) {
                if (id != eventId)
                    continue;
                angular.forEach(_this.observers[event][id], function (callback) {
                    callback(parameters);
                });
            }
        });
    };
    ObserverService.prototype.notifyAndRecord = function (event, parameters) {
        var _this = this;
        return this.notify(event, parameters).then(function () {
            _this.historyService.recordHistory(event, parameters, true);
        });
    };
    ObserverService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$timeout')),
        __metadata("design:paramtypes", [Object, historyservice_1.HistoryService,
            utilityservice_1.UtilityService])
    ], ObserverService);
    return ObserverService;
}(baseservice_1.BaseService));
exports.ObserverService = ObserverService;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var baseservice_1 = __webpack_require__(27);
//import { Parse } from "../../../../../../admin/client/src/ajs-upgraded-providers";
var core_1 = __webpack_require__(0);
var UtilityService = /** @class */ (function (_super) {
    __extends(UtilityService, _super);
    function UtilityService($parse) {
        var _this = _super.call(this) || this;
        _this.format_pixels = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.$parse = $parse;
        return _this;
    }
    UtilityService.prototype.structKeyExists = function (struct, key) {
        return key in struct;
    };
    UtilityService.prototype.keyToAttributeString = function (key) {
        var attributeString = "data-";
        for (var i = 0; i < key.length; i++) {
            if (key.charAt(i) == "_") {
                attributeString += "-";
            }
            else if (this.isUpperCase(key.charAt(i))) {
                //special case for ID and Acronyms because it doesn't follow naming conventions
                if (i + 1 <= key.length && this.isUpperCase(key.charAt(i + 1))) {
                    if (key.charAt(i) + key.charAt(i + 1) == "ID") {
                        attributeString += "-id";
                        i++; //skip ahead
                    }
                    else if (this.isUpperCase(key.charAt(i + 1))) {
                        attributeString += "-";
                        //this handles acronyms IE QATS 
                        while (i + 1 <= key.length && this.isUpperCase(key.charAt(i + 1))) {
                            attributeString += key.charAt(i).toLowerCase();
                            i++;
                        }
                    }
                }
                else {
                    attributeString += "-" + key.charAt(i).toLowerCase();
                }
            }
            else {
                attributeString += key.charAt(i);
            }
        }
        return attributeString;
    };
    UtilityService.prototype.isUpperCase = function (character) {
        return character == character.toUpperCase();
    };
    UtilityService.prototype.isLowerCase = function (character) {
        return character == character.toLowerCase();
    };
    UtilityService.prototype.snakeToCapitalCase = function (s) {
        return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
    };
    UtilityService.prototype.camelCaseToSnakeCase = function (s) {
        return s.replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); });
    };
    UtilityService.prototype.replaceStringWithProperties = function (stringItem, context) {
        var _this = this;
        var properties = this.getPropertiesFromString(stringItem);
        if (!properties)
            return;
        var data = [];
        angular.forEach(properties, function (property) {
            if (property.indexOf('.') != -1) {
                property = property.replace('.', '_');
            }
            var parseFunction = _this.$parse(property);
            data.push(parseFunction(context));
        });
        return this.replacePropertiesWithData(stringItem, data);
    };
    //used to do inheritance at runtime
    UtilityService.prototype.extend = function (ChildClass, ParentClass) {
        ChildClass.prototype = new ParentClass();
        ChildClass.prototype.constructor = ChildClass;
    };
    UtilityService.prototype.getQueryParamsFromUrl = function (url) {
        // This function is anonymous, is executed immediately and
        // the return value is assigned to QueryString!
        var query_string = {};
        if (url && url.split) {
            var spliturl = url.split('?');
            if (spliturl.length) {
                url = spliturl[1];
                if (url && url.split) {
                    var vars = url.split("&");
                    if (vars && vars.length) {
                        for (var i = 0; i < vars.length; i++) {
                            var pair = vars[i].split("=");
                            // If first entry with this name
                            if (typeof query_string[pair[0]] === "undefined") {
                                query_string[pair[0]] = pair[1];
                                // If second entry with this name
                            }
                            else if (typeof query_string[pair[0]] === "string") {
                                var arr = [query_string[pair[0]], pair[1]];
                                query_string[pair[0]] = arr;
                                // If third or later entry with this name
                            }
                            else {
                                query_string[pair[0]].push(pair[1]);
                            }
                        }
                    }
                }
            }
        }
        return query_string;
    };
    ;
    UtilityService.prototype.isAngularRoute = function () {
        return /[\?&]ng#!/.test(window.location.href);
    };
    ;
    UtilityService.prototype.ArrayFindByPropertyValue = function (arr, property, value) {
        var currentIndex = -1;
        arr.forEach(function (arrItem, index) {
            if (arrItem[property] && arrItem[property] === value) {
                currentIndex = index;
            }
        });
        return currentIndex;
    };
    ;
    UtilityService.prototype.listLast = function (list, delimiter) {
        if (list === void 0) { list = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var listArray = list.split(delimiter);
        return listArray[listArray.length - 1];
    };
    ;
    UtilityService.prototype.listRest = function (list, delimiter) {
        if (list === void 0) { list = ''; }
        if (delimiter === void 0) { delimiter = ","; }
        var listArray = list.split(delimiter);
        if (listArray.length) {
            listArray.splice(0, 1);
        }
        return listArray.join(delimiter);
    };
    ;
    UtilityService.prototype.listFirst = function (list, delimiter) {
        if (list === void 0) { list = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var listArray = list.split(delimiter);
        return listArray[0];
    };
    ;
    UtilityService.prototype.listPrepend = function (list, substring, delimiter) {
        if (list === void 0) { list = ''; }
        if (substring === void 0) { substring = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var listArray = list.split(delimiter);
        if (listArray.length) {
            return substring + delimiter + list;
        }
        else {
            return substring;
        }
    };
    ;
    UtilityService.prototype.listAppend = function (list, substring, delimiter) {
        if (list === void 0) { list = ''; }
        if (substring === void 0) { substring = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var listArray = list.split(delimiter);
        if (list.trim() != '' && listArray.length) {
            return list + delimiter + substring;
        }
        else {
            return substring;
        }
    };
    ;
    UtilityService.prototype.listAppendUnique = function (list, substring, delimiter) {
        if (list === void 0) { list = ''; }
        if (substring === void 0) { substring = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var listArray = list.split(delimiter);
        if (list.trim() != '' && listArray.length && listArray.indexOf(substring) == -1) {
            return list + delimiter + substring;
        }
        else {
            return substring;
        }
    };
    ;
    /**
     * Removes a substring from a string.
     * str: The original string.
     * subStr: The string to remove.
     * returns the modified string.
     */
    UtilityService.prototype.listRemove = function (str, substring) {
        if (str.indexOf(substring) != -1) {
            //remove it cause its no longer selected.
            str = str.replace(substring, "");
            str = str.replace(",,", "");
            if (str == ",") {
                str = "";
            }
            if (str.substring(0, 1) == ',') {
                str = str.substring(1);
            }
            str = str.substring(0, str.length - 1);
        }
        return str;
    };
    UtilityService.prototype.formatValue = function (value, formatType, formatDetails, entityInstance) {
        if (angular.isUndefined(formatDetails)) {
            formatDetails = {};
        }
        var typeList = ["currency", "date", "datetime", "pixels", "percentage", "second", "time", "truefalse", "url", "weight", "yesno"];
        if (typeList.indexOf(formatType)) {
            this['format_' + formatType](value, formatDetails, entityInstance);
        }
        return value;
    };
    ;
    UtilityService.prototype.format_currency = function (value, formatDetails, entityInstance) {
        if (angular.isUndefined) {
            formatDetails = {};
        }
    };
    ;
    UtilityService.prototype.format_date = function (value, formatDetails, entityInstance) {
        if (angular.isUndefined) {
            formatDetails = {};
        }
    };
    ;
    UtilityService.prototype.format_datetime = function (value, formatDetails, entityInstance) {
        if (angular.isUndefined) {
            formatDetails = {};
        }
    };
    ;
    UtilityService.prototype.format_yesno = function (value, formatDetails, entityInstance) {
        if (angular.isUndefined) {
            formatDetails = {};
        }
        if (Boolean(value) === true) {
            return entityInstance.metaData.$$getRBKey("define.yes");
        }
        else if (value === false || value.trim() === 'No' || value.trim === 'NO' || value.trim() === '0') {
            return entityInstance.metaData.$$getRBKey("define.no");
        }
    };
    ;
    UtilityService.prototype.left = function (stringItem, count) {
        return stringItem.substring(0, count);
    };
    ;
    UtilityService.prototype.right = function (stringItem, count) {
        return stringItem.substring(stringItem.length - count, stringItem.length);
    };
    ;
    //this.utilityService.mid(propertyIdentifier,1,propertyIdentifier.lastIndexOf('.'));
    UtilityService.prototype.mid = function (stringItem, start, count) {
        var end = start + count;
        return stringItem.substring(start, end);
    };
    ;
    UtilityService.prototype.getPropertiesFromString = function (stringItem) {
        if (!stringItem)
            return;
        var capture = false;
        var property = '';
        var results = [];
        for (var i = 0; i < stringItem.length; i++) {
            if (!capture && stringItem.substr(i, 2) == "${") {
                property = '';
                capture = true;
                i = i + 1; //skip the ${
            }
            else if (capture && stringItem[i] != '}') {
                property = property.concat(stringItem[i]);
            }
            else if (capture) {
                results.push(property);
                capture = false;
            }
        }
        return results;
    };
    ;
    UtilityService.prototype.replacePropertiesWithData = function (stringItem, data) {
        var results = this.getPropertiesFromString(stringItem);
        for (var i = 0; i < results.length; i++) {
            stringItem = stringItem.replace('${' + results[i] + '}', data[i]);
        }
        return stringItem;
    };
    ;
    UtilityService.prototype.replaceAll = function (stringItem, find, replace) {
        return stringItem.replace(new RegExp(this.escapeRegExp(find), 'g'), replace);
    };
    ;
    UtilityService.prototype.escapeRegExp = function (stringItem) {
        return stringItem.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    };
    ;
    UtilityService.prototype.createID = function (count) {
        var count = count || 26;
        var text = "";
        var firstPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        var nextPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var currentPossibleCharacters = "";
        for (var i = 0; i < count; i++) {
            if (i === 0) {
                currentPossibleCharacters = firstPossibleCharacters;
            }
            else {
                currentPossibleCharacters = nextPossibleCharacters;
            }
            text += currentPossibleCharacters.charAt(Math.floor(Math.random() * currentPossibleCharacters.length));
        }
        return text;
    };
    ;
    //list functions
    UtilityService.prototype.arrayToList = function (array, delimiter) {
        if (delimiter != null) {
            return array.join(delimiter);
        }
        else {
            return array.join();
        }
    };
    ;
    UtilityService.prototype.getPropertyValue = function (object, propertyIdentifier) {
        var keys = propertyIdentifier.split('.'), obj = object, keyPart;
        while ((keyPart = keys.shift()) && keys.length) {
            obj = obj[keyPart];
        }
        return obj[keyPart];
    };
    UtilityService.prototype.setPropertyValue = function (object, propertyIdentifier, value) {
        var keys = propertyIdentifier.split('.'), obj = object, keyPart;
        while ((keyPart = keys.shift()) && keys.length) {
            if (!obj[keyPart]) {
                obj[keyPart] = {};
            }
            obj = obj[keyPart];
        }
        obj[keyPart] = value;
    };
    ;
    UtilityService.prototype.nvpToObject = function (NVPData) {
        var object = {};
        for (var key in NVPData) {
            var value = NVPData[key];
            var propertyIdentitifer = key.replace(/\_/g, '.');
            this.setPropertyValue(object, propertyIdentitifer, value);
        }
        return object;
    };
    ;
    UtilityService.prototype.isDescendantElement = function (parent, child) {
        var node = child.parentNode;
        while (node != null) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    };
    ;
    //utility service toJson avoids circular references
    UtilityService.prototype.toJson = function (obj) {
        var seen = [];
        return JSON.stringify(obj, function (key, val) {
            if (val != null && typeof val == "object") {
                if (seen.indexOf(val) >= 0) {
                    return;
                }
                seen.push(val);
            }
            return val;
        });
    };
    UtilityService.prototype.listFind = function (list, value, delimiter) {
        if (list === void 0) { list = ''; }
        if (value === void 0) { value = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var splitString = list.split(delimiter);
        var stringFound = -1;
        for (var i = 0; i < splitString.length; i++) {
            var stringPart = splitString[i];
            if (stringPart === value) {
                stringFound = i;
            }
        }
        return stringFound;
    };
    ;
    UtilityService.prototype.listLen = function (list, delimiter) {
        if (list === void 0) { list = ''; }
        if (delimiter === void 0) { delimiter = ','; }
        var splitString = list.split(delimiter);
        return splitString.length;
    };
    ;
    //This will enable you to sort by two separate keys in the order they are passed in
    UtilityService.prototype.arraySorter = function (array, keysToSortBy) {
        var arrayOfTypes = [], returnArray = [], firstKey = keysToSortBy[0];
        if (angular.isDefined(keysToSortBy[1])) {
            var secondKey = keysToSortBy[1];
        }
        for (var itemIndex in array) {
            if (!(arrayOfTypes.indexOf(array[itemIndex][firstKey]) > -1)) {
                arrayOfTypes.push(array[itemIndex][firstKey]);
            }
        }
        arrayOfTypes.sort(function (a, b) {
            if (a < b) {
                return -1;
            }
            else if (a > b) {
                return 1;
            }
            else {
                return 0;
            }
        });
        for (var typeIndex in arrayOfTypes) {
            var tempArray = [];
            for (var itemIndex in array) {
                if (array[itemIndex][firstKey] == arrayOfTypes[typeIndex]) {
                    tempArray.push(array[itemIndex]);
                }
            }
            if (keysToSortBy[1] != null) {
                tempArray.sort(function (a, b) {
                    if (a[secondKey] < b[secondKey]) {
                        return -1;
                    }
                    else if (a[secondKey] > b[secondKey]) {
                        return 1;
                    }
                    else {
                        return 0;
                    }
                });
            }
            for (var finalIndex in tempArray) {
                returnArray.push(tempArray[finalIndex]);
            }
        }
        return returnArray;
    };
    ;
    UtilityService.prototype.minutesOfDay = function (m) {
        return m.getMinutes() + m.getHours() * 60;
    };
    ;
    UtilityService.prototype.removeTimeOffset = function (timestampStr) {
        var date = new Date(timestampStr);
        var correctDate = new Date();
        correctDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        return correctDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    };
    ;
    UtilityService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$parse')),
        __metadata("design:paramtypes", [Object])
    ], UtilityService);
    return UtilityService;
}(baseservice_1.BaseService));
exports.UtilityService = UtilityService;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//controllers
var alertcontroller_1 = __webpack_require__(172);
//services
var alertservice_1 = __webpack_require__(173);
var AlertModule = /** @class */ (function () {
    function AlertModule() {
    }
    AlertModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [
                // Register an Angular provider whose value is the "upgraded" AngularJS service
                alertservice_1.AlertService
            ],
            // All components that are to be "downgraded" must be declared as `entryComponents`
            // We must import `UpgradeModule` to get access to the AngularJS core services
            imports: [
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], AlertModule);
    return AlertModule;
}());
exports.AlertModule = AlertModule;
var alertmodule = angular.module('hibachi.alert', [])
    //controllers
    .controller('alertController', alertcontroller_1.AlertController)
    //services
    .service('alertService', static_1.downgradeInjectable(alertservice_1.AlertService));
exports.alertmodule = alertmodule;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(29);
var isObject_1 = __webpack_require__(30);
var isFunction_1 = __webpack_require__(28);
var tryCatch_1 = __webpack_require__(63);
var errorObject_1 = __webpack_require__(31);
var UnsubscriptionError_1 = __webpack_require__(64);
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(25);
var BaseEntity = /** @class */ (function (_super) {
    __extends(BaseEntity, _super);
    function BaseEntity($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseEntity;
}(basetransient_1.BaseTransient));
exports.BaseEntity = BaseEntity;


/***/ }),
/* 13 */,
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
var ScalarObservable_1 = __webpack_require__(22);
var EmptyObservable_1 = __webpack_require__(23);
var isScheduler_1 = __webpack_require__(15);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
var Subscriber_1 = __webpack_require__(5);
var Subscription_1 = __webpack_require__(11);
var ObjectUnsubscribedError_1 = __webpack_require__(77);
var SubjectSubscription_1 = __webpack_require__(78);
var rxSubscriber_1 = __webpack_require__(20);
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
var dialogservice_1 = __webpack_require__(175);
//controllers
var pagedialog_1 = __webpack_require__(176);
var DialogModule = /** @class */ (function () {
    function DialogModule() {
    }
    DialogModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [
                dialogservice_1.DialogService
            ],
            imports: [
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], DialogModule);
    return DialogModule;
}());
exports.DialogModule = DialogModule;
var dialogmodule = angular.module('hibachi.dialog', []).config(function () {
})
    //services
    .service('dialogService', static_1.downgradeInjectable(dialogservice_1.DialogService))
    //controllers
    .controller('pageDialog', pagedialog_1.PageDialogController)
    //filters
    //constants
    .constant('dialogPartials', 'dialog/components/');
exports.dialogmodule = dialogmodule;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
var collectionconfigservice_1 = __webpack_require__(185);
var collectionservice_1 = __webpack_require__(186);
//controllers
var collections_1 = __webpack_require__(187);
var createcollection_1 = __webpack_require__(188);
var confirmationcontroller_1 = __webpack_require__(189);
var entity_createcollection_1 = __webpack_require__(190);
//directives
var swcollection_1 = __webpack_require__(191);
var swaddfilterbuttons_1 = __webpack_require__(192);
var swdisplayoptions_1 = __webpack_require__(193);
var swdisplayitem_1 = __webpack_require__(194);
var swdisplayitemaggregate_1 = __webpack_require__(195);
var swcollectiontable_1 = __webpack_require__(196);
var swcolumnitem_1 = __webpack_require__(197);
var swconditioncriteria_1 = __webpack_require__(198);
var swcriteria_1 = __webpack_require__(199);
var swcriteriaboolean_1 = __webpack_require__(200);
var swcriteriadate_1 = __webpack_require__(201);
var swcriteriamanytomany_1 = __webpack_require__(202);
var swcriteriamanytoone_1 = __webpack_require__(203);
var swcriterianumber_1 = __webpack_require__(204);
var swcriteriaonetomany_1 = __webpack_require__(205);
var swcriteriarelatedobject_1 = __webpack_require__(206);
var swcriteriastring_1 = __webpack_require__(207);
var sweditfilteritem_1 = __webpack_require__(208);
var swfiltergroups_1 = __webpack_require__(209);
var swfilteritem_1 = __webpack_require__(210);
var swfiltergroupitem_1 = __webpack_require__(211);
var swrestrictionconfig_1 = __webpack_require__(212);
//filters
var aggregatefilter_1 = __webpack_require__(213);
var CollectionModule = /** @class */ (function () {
    function CollectionModule() {
    }
    CollectionModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                core_module_2.CoreModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], CollectionModule);
    return CollectionModule;
}());
exports.CollectionModule = CollectionModule;
var collectionmodule = angular.module('hibachi.collection', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('collectionPartialsPath', 'collection/components/')
    //controllers
    .controller('collections', collections_1.CollectionController)
    .controller('confirmationController', confirmationcontroller_1.ConfirmationController)
    .controller('createCollection', createcollection_1.CreateCollection)
    .controller('entity_createcollection', entity_createcollection_1.CollectionCreateController)
    //services
    .factory('collectionConfigService', ['rbkeyService', '$hibachi', 'utilityService', 'observerService', function (rbkeyService, $hibachi, utilityService, observerService) { return new collectionconfigservice_1.CollectionConfig(rbkeyService, $hibachi, utilityService, observerService); }])
    .service('collectionService', collectionservice_1.CollectionService)
    //directives
    .directive('swRestrictionConfig', swrestrictionconfig_1.SWRestrictionConfig.Factory())
    .directive('swCollection', swcollection_1.SWCollection.Factory())
    .directive('swAddFilterButtons', swaddfilterbuttons_1.SWAddFilterButtons.Factory())
    .directive('swDisplayOptions', swdisplayoptions_1.SWDisplayOptions.Factory())
    .directive('swDisplayItem', swdisplayitem_1.SWDisplayItem.Factory())
    .directive('swDisplayItemAggregate', swdisplayitemaggregate_1.SWDisplayItemAggregate.Factory())
    .directive('swCollectionTable', swcollectiontable_1.SWCollectionTable.Factory())
    .directive('swColumnItem', swcolumnitem_1.SWColumnItem.Factory())
    .directive('swConditionCriteria', swconditioncriteria_1.SWConditionCriteria.Factory())
    .directive('swCriteria', swcriteria_1.SWCriteria.Factory())
    .directive('swCriteriaBoolean', swcriteriaboolean_1.SWCriteriaBoolean.Factory())
    .directive('swCriteriaDate', swcriteriadate_1.SWCriteriaDate.Factory())
    .directive('swCriteriaManyToMany', swcriteriamanytomany_1.SWCriteriaManyToMany.Factory())
    .directive('swCriteriaManyToOne', swcriteriamanytoone_1.SWCriteriaManyToOne.Factory())
    .directive('swCriteriaNumber', swcriterianumber_1.SWCriteriaNumber.Factory())
    .directive('swCriteriaOneToMany', swcriteriaonetomany_1.SWCriteriaOneToMany.Factory())
    .directive('swCriteriaRelatedObject', swcriteriarelatedobject_1.SWCriteriaRelatedObject.Factory())
    .directive('swCriteriaString', swcriteriastring_1.SWCriteriaString.Factory())
    .directive('swEditFilterItem', sweditfilteritem_1.SWEditFilterItem.Factory())
    .directive('swFilterGroups', swfiltergroups_1.SWFilterGroups.Factory())
    .directive('swFilterItem', swfilteritem_1.SWFilterItem.Factory())
    .directive('swFilterGroupItem', swfiltergroupitem_1.SWFilterGroupItem.Factory())
    //filters
    .filter('aggregateFilter', ['$filter', aggregatefilter_1.AggregateFilter.Factory]);
exports.collectionmodule = collectionmodule;


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __assign; });
/* unused harmony export __rest */
/* unused harmony export __decorate */
/* unused harmony export __param */
/* unused harmony export __metadata */
/* unused harmony export __awaiter */
/* unused harmony export __generator */
/* unused harmony export __exportStar */
/* unused harmony export __values */
/* unused harmony export __read */
/* unused harmony export __spread */
/* unused harmony export __await */
/* unused harmony export __asyncGenerator */
/* unused harmony export __asyncDelegator */
/* unused harmony export __asyncValues */
/* unused harmony export __makeTemplateObject */
/* unused harmony export __importStar */
/* unused harmony export __importDefault */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(7);
var Symbol = root_1.root.Symbol;
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(7);
function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;
//# sourceMappingURL=observable.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(7);
function symbolIteratorPonyfill(root) {
    var Symbol = root.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root_1.root);
/**
 * @deprecated use iterator instead
 */
exports.$$iterator = exports.iterator;
//# sourceMappingURL=iterator.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseobject_1 = __webpack_require__(39);
var BaseTransient = /** @class */ (function (_super) {
    __extends(BaseTransient, _super);
    function BaseTransient($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.errors = {};
        _this.messages = {};
        _this.populate = function (response) {
            var data = response;
            if (response.data) {
                data = response.data;
            }
            data = _this.utilityService.nvpToObject(data);
            var _loop_1 = function () {
                var propertyIdentifier = key.replace(_this.className.toLowerCase() + '.', '');
                var propertyIdentifierArray = propertyIdentifier.split('.');
                var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                var currentEntity = _this;
                angular.forEach(propertyIdentifierArray, function (property, propertyKey) {
                    if (currentEntity.metaData[property]) {
                        //if we are on the last item in the array
                        if (propertyKey === propertyIdentifierArray.length - 1) {
                            //if is json
                            //if(currentEntity.metaData[key]){
                            //if propertyidentifier
                            // }else{
                            if (angular.isObject(data[key]) && currentEntity.metaData[property].fieldtype && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                if (relatedEntity.populate) {
                                    relatedEntity.populate(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                                else {
                                    relatedEntity.$$init(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                            }
                            else if (angular.isArray(data[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                currentEntity[property] = [];
                                angular.forEach(data[key], function (arrayItem, propertyKey) {
                                    var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                    if (relatedEntity.populate) {
                                        relatedEntity.populate(arrayItem);
                                        var hasItem = false;
                                        for (var item in currentEntity[property]) {
                                            if (currentEntity[property][item].$$getID().length > 0 && currentEntity[property][item].$$getID() === relatedEntity.$$getID()) {
                                                hasItem = true;
                                                break;
                                            }
                                        }
                                        if (!hasItem) {
                                            currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                        }
                                    }
                                    else {
                                        relatedEntity.$$init(arrayItem);
                                        currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                    }
                                });
                            }
                            else {
                                currentEntity[property] = data[key];
                            }
                            //}
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property]) || (currentEntity.data[property] && currentEntity.data[property] === null)) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = _this.$hibachi['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    }
                    else {
                        _this[key] = data[key];
                    }
                });
            };
            for (var key in data) {
                _loop_1();
            }
            if (response.errors) {
                _this.errors = response.errors;
                _this.messages = response.messages;
            }
        };
        _this.addError = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            if (angular.isArray(errorMessage)) {
                _this.addErrorsByArray(errorName, errorMessage);
            }
            else if (angular.isObject(errorMessage)) {
                _this.addErrorsByObject(errorName, errorMessage);
            }
            else {
                _this.errors[errorName].push(errorMessage);
            }
        };
        _this.addErrorsByArray = function (errorName, errorMessages) {
            for (var i = 0; i < errorMessages.length; i++) {
                var message = errorMessages[i];
                _this.errors[errorName].push(message);
            }
        };
        _this.addErrorsByObject = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            for (var key in errorMessage) {
                for (var i = 0; i < errorMessage[key].length; i++) {
                    var message = errorMessage[i];
                    _this.errors[errorName].push(message);
                }
            }
        };
        _this.addErrors = function (errors) {
            for (var key in errors) {
                if (!_this.errors[key]) {
                    _this.errors[key] = [];
                }
                for (var message in errors[key]) {
                    _this.errors[key].push(message);
                }
            }
        };
        _this.getError = function (errorName) {
            return _this.getErrorByErrorName(errorName);
        };
        _this.getErrorByErrorName = function (errorName) {
            return _this.errors[errorName];
        };
        _this.hasError = function (errorName) {
            return _this.hasErrorByErrorName(errorName);
        };
        _this.hasErrorByErrorName = function (errorName) {
            return angular.isDefined(_this.errors[errorName]);
        };
        _this.hasErrors = function () {
            return Object.keys(_this.errors).length;
        };
        _this.hasSuccessfulAction = function (action) {
            return;
        };
        _this.$hibachi = _this.getService('$hibachi');
        _this.hibachiValidationService = _this.getService('hibachiValidationService');
        _this.utilityService = _this.getService('utilityService');
        _this.entityService = _this.getService('entityService');
        return _this;
    }
    return BaseTransient;
}(baseobject_1.BaseObject));
exports.BaseTransient = BaseTransient;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var requestservice_1 = __webpack_require__(40);
var utilityservice_1 = __webpack_require__(9);
var formservice_1 = __webpack_require__(43);
var rbkeyservice_1 = __webpack_require__(44);
// interface ISlatwallRootScopeService extends ng.IRootScopeService{
//     loadedResourceBundle:boolean;
// 	loadingResourceBundle:boolean;
// } 
var HibachiService = /** @class */ (function () {
    //@ngInject
    function HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, _config, _jsEntities, _jsEntityInstances) {
        var _this = this;
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = _config;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
        this._deferred = {};
        this._resourceBundle = {};
        this.usePublicRoutes = false;
        this.buildUrl = function (action, queryString) {
            //actionName example: slatAction. defined in FW1 and populated to config
            var actionName = _this.appConfig.action;
            var baseUrl = _this.appConfig.baseURL;
            queryString = queryString || '';
            if (angular.isDefined(queryString) && queryString.length) {
                if (queryString.indexOf('&') !== 0) {
                    queryString = '&' + queryString;
                }
            }
            return baseUrl + '?' + actionName + '=' + action + queryString;
        };
        this.getUrlWithActionPrefix = function () {
            return _this.appConfig.baseURL + '/index.cfm/?' + _this.appConfig.action + "=";
        };
        this.getJsEntities = function () {
            return _this._jsEntities;
        };
        this.setJsEntities = function (jsEntities) {
            _this._jsEntities = jsEntities;
        };
        this.getJsEntityInstances = function () {
            return _this._jsEntityInstances;
        };
        this.setJsEntityInstances = function (jsEntityInstances) {
            _this._jsEntityInstances = jsEntityInstances;
        };
        this.getEntityExample = function (entityName) {
            return _this._jsEntityInstances[entityName];
        };
        this.getEntityMetaData = function (entityName) {
            return _this._jsEntityInstances[entityName].metaData;
        };
        this.getPropertyByEntityNameAndPropertyName = function (entityName, propertyName) {
            return _this.getEntityMetaData(entityName)[propertyName];
        };
        this.getPrimaryIDPropertyNameByEntityName = function (entityName) {
            return _this.getEntityExample(entityName).$$getIDName();
        };
        this.getEntityHasPropertyByEntityName = function (entityName, propertyName) {
            return angular.isDefined(_this.getEntityMetaData(entityName)[propertyName]);
        };
        this.getBaseEntityAliasFromName = function (entityName) {
            return '_' + entityName;
        };
        this.getPropertyIsObjectByEntityNameAndPropertyIdentifier = function (entityName, propertyIdentifier) {
            var lastEntity = _this.getLastEntityNameInPropertyIdentifier(entityName, propertyIdentifier);
            var entityMetaData = _this.getEntityMetaData(lastEntity);
            return angular.isDefined(entityMetaData[_this.utilityService.listLast(propertyIdentifier, '.')].cfc);
        };
        this.getLastEntityNameInPropertyIdentifier = function (entityName, propertyIdentifier) {
            if (!entityName) {
                throw ('No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.');
            }
            //strip alias if it exists and convert everything to be periods
            if (propertyIdentifier.charAt(0) === '_') {
                propertyIdentifier = _this.utilityService.listRest(propertyIdentifier.replace(/_/g, '.'), '.');
            }
            var propertyIdentifierArray = propertyIdentifier.split('.');
            if (propertyIdentifierArray[0] === entityName.toLowerCase()) {
                propertyIdentifierArray.shift();
            }
            if (propertyIdentifierArray.length > 1) {
                var propertiesStruct = _this.getEntityMetaData(entityName);
                var currentProperty = propertyIdentifierArray.shift();
                if (!propertiesStruct[currentProperty] ||
                    !propertiesStruct[currentProperty].cfc) {
                    throw ("The Property Identifier " + propertyIdentifier + " is invalid for the entity " + entityName);
                }
                var currentEntityName = propertiesStruct[currentProperty].cfc;
                var currentPropertyIdentifier = propertyIdentifierArray.join('.');
                return _this.getLastEntityNameInPropertyIdentifier(currentEntityName, currentPropertyIdentifier);
            }
            return entityName;
        };
        //helper method to inflate a new entity with data
        this.populateEntity = function (entityName, data) {
            var newEntity = _this.newEntity(entityName);
            angular.extend(newEntity.data, data);
            return newEntity;
        };
        //service method used to transform collection data to collection objects based on a collectionconfig
        this.populateCollection = function (collectionData, collectionConfig) {
            //create array to hold objects
            var entities = [];
            //loop over all collection data to create objects
            var hibachiService = _this;
            angular.forEach(collectionData, function (collectionItemData, key) {
                //create base Entity
                var entity = hibachiService['new' + collectionConfig.baseEntityName.replace(_this.appConfig.applicationKey, '')]();
                //populate entity with data based on the collectionConfig
                angular.forEach(collectionConfig.columns, function (column, key) {
                    //get objects base properties
                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase(), '');
                    propertyIdentifier = _this.utilityService.replaceAll(propertyIdentifier, '_', '.');
                    if (propertyIdentifier.charAt(0) === '.') {
                        propertyIdentifier = propertyIdentifier.slice(1);
                    }
                    var propertyIdentifierArray = propertyIdentifier.split('.');
                    var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                    var currentEntity = entity;
                    angular.forEach(propertyIdentifierArray, function (property, key) {
                        if (key === propertyIdentifierArray.length - 1) {
                            //if we are on the last item in the array
                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);
                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                            }
                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {
                                    var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                    relatedEntity.$$init(arrayItem);
                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                });
                            }
                            else {
                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];
                            }
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property])) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = hibachiService['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    });
                });
                entities.push(entity);
            });
            return entities;
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getDefer = function (deferKey) {
            return _this._deferred[deferKey];
        };
        this.cancelPromise = function (deferKey) {
            var deferred = _this.getDefer(deferKey);
            if (angular.isDefined(deferred)) {
                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });
            }
        };
        this.newEntity = function (entityName) {
            if (entityName != undefined) {
                var entityServiceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(entityServiceName)) {
                    var entityService = angular.element(document.body).injector().get(entityServiceName);
                    var functionObj = entityService['new' + entityName];
                    if (entityService['new' + entityName] != undefined && !!(functionObj && functionObj.constructor && functionObj.call && functionObj.apply)) {
                        return entityService['new' + entityName]();
                    }
                }
                return new _this._jsEntities[entityName];
            }
        };
        this.getEntityDefinition = function (entityName) {
            return _this._jsEntities[entityName];
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getEntity = function (entityName, options) {
            /*
            *
            * getEntity('Product', '12345-12345-12345-12345');
            * getEntity('Product', {keywords='Hello'});
            *
            */
            var apiSubsystemName = _this.appConfig.apiSubsystemName || "api";
            if (angular.isUndefined(options)) {
                options = {};
            }
            if (angular.isDefined(options.deferKey)) {
                _this.cancelPromise(options.deferKey);
            }
            var params = {};
            if (typeof options === 'string') {
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName + '&entityID=' + options;
            }
            else {
                params['P:Current'] = options.currentPage || 1;
                params['P:Show'] = options.pageShow || 10;
                params.keywords = options.keywords || '';
                params.columnsConfig = options.columnsConfig || '';
                params.filterGroupsConfig = options.filterGroupsConfig || '';
                params.joinsConfig = options.joinsConfig || '';
                params.orderByConfig = options.orderByConfig || '';
                params.groupBysConfig = options.groupBysConfig || '';
                params.isDistinct = options.isDistinct || false;
                params.propertyIdentifiersList = options.propertyIdentifiersList || '';
                params.allRecords = options.allRecords || false;
                params.defaultColumns = options.defaultColumns || true;
                params.processContext = options.processContext || '';
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName;
            }
            if (angular.isDefined(options.id)) {
                urlString += '&entityId=' + options.id;
            }
            var transformResponse = function (data) {
                if (angular.isString(data)) {
                    data = JSON.parse(data);
                }
                return data;
            };
            //check if we are using a service to transform the response
            if (angular.isDefined(options.transformResponse)) {
                transformResponse = function (data) {
                    var data = JSON.parse(data);
                    if (angular.isDefined(data.records)) {
                        data = options.transformResponse(data.records);
                    }
                    return data;
                };
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            if (options.deferKey) {
                _this._deferred[options.deferKey] = request;
            }
            return request.promise;
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs;
            var request = _this.requestService.newPublicRequest(urlString);
            return request.promise;
        };
        this.getEventOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getEventOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getProcessOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getProcessMethodOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.checkUniqueOrNullValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.checkUniqueValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.getPropertyDisplayData = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayData&entityName=' + entityName;
            var params = {};
            params.propertyIdentifiersList = options.propertyIdentifiersList || '';
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyDisplayOptions = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayOptions&entityName=' + entityName;
            var params = {};
            params.property = options.property || options.propertyIdentifier || '';
            if (angular.isDefined(options.argument1)) {
                params.argument1 = options.argument1;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyTitle = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                return metaData.$$getRBKey(propertyMetaData['hb_rbkey']);
            }
            else if (angular.isUndefined(propertyMetaData['persistent'])) {
                if (angular.isDefined(propertyMetaData['fieldtype'])
                    && angular.isDefined(propertyMetaData['cfc'])
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + "." + propertyName + ',entity.' + propertyMetaData.cfc + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["many-to-one"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc);
                }
                return metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            else if (metaData.isProcessObject) {
                if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase() + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase());
                }
                return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            return metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
        };
        this.saveEntity = function (entityName, id, params, context) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.post';
            if (angular.isDefined(entityName)) {
                params.entityName = entityName;
            }
            if (angular.isDefined(id)) {
                params.entityID = id;
            }
            if (angular.isDefined(context)) {
                params.context = context;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getExistingCollectionsByBaseEntity = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getFilterPropertiesByBaseEntityName = function (entityName, includeNonPersistent) {
            if (includeNonPersistent === void 0) { includeNonPersistent = false; }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName + '&includeNonPersistent=' + includeNonPersistent;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.login = function (emailAddress, password) {
            var urlString = _this.appConfig.baseURL + '/index.cfm/api/auth/login';
            var params = {
                emailAddress: emailAddress,
                password: password
            };
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getResourceBundle = function (locale) {
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResourceBundle&instantiationKey=' + _this.appConfig.instantiationKey + '&locale=' + locale;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getCurrencies = function () {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getCurrencies&instantiationKey=' + _this.appConfig.instantiationKey;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getConfig = function () {
            return _this._config;
        };
        this.getConfigValue = function (key) {
            return _this._config[key];
        };
        this.setConfigValue = function (key, value) {
            _this._config[key] = value;
        };
        this.setConfig = function (config) {
            _this._config = config;
        };
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = appConfig;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
    }
    return HibachiService;
}());
exports.HibachiService = HibachiService;
var $Hibachi = /** @class */ (function (_super) {
    __extends($Hibachi, _super);
    function $Hibachi($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbKeyService, appConfig) {
        var _this = _super.call(this, $window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbKeyService, appConfig) || this;
        _this._config = appConfig;
        return _this;
    }
    $Hibachi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("$window")),
        __param(1, core_1.Inject("$q")),
        __param(2, core_1.Inject("$http")),
        __param(3, core_1.Inject("$timeout")),
        __param(4, core_1.Inject("$log")),
        __param(5, core_1.Inject("$rootScope")),
        __param(6, core_1.Inject("$location")),
        __param(7, core_1.Inject("$anchorScroll")),
        __param(12, core_1.Inject("appConfig")),
        __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object, requestservice_1.RequestService,
            utilityservice_1.UtilityService,
            formservice_1.FormService,
            rbkeyservice_1.RbKeyService, Object])
    ], $Hibachi);
    return $Hibachi;
}(HibachiService));
exports.$Hibachi = $Hibachi;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var BaseService = /** @class */ (function () {
    function BaseService() {
    }
    return BaseService;
}());
exports.BaseService = BaseService;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMap_1 = __webpack_require__(68);
var identity_1 = __webpack_require__(72);
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);
}
exports.mergeAll = mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
exports.refCount = refCount;
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=refCount.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncatched exception popping up in devtools
	return Promise.resolve().then(function() {
		throw new Error("Cannot find module '" + req + "'.");
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 37;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var LocalStorageService = /** @class */ (function () {
    //@ngInject
    function LocalStorageService() {
    }
    LocalStorageService.prototype.hasItem = function (key) {
        //try catch to handle safari in private mode which does not allow localstorage
        try {
            return (window.localStorage.getItem(key)
                && window.localStorage.getItem(key) !== null
                && window.localStorage.getItem(key) !== "undefined");
        }
        catch (e) {
            return false;
        }
    };
    LocalStorageService.prototype.getItem = function (key) {
        var value = window.localStorage.getItem(key);
        if (value.charAt(0) === '{' || value.charAt(0) === '[') {
            value = angular.fromJson(value);
        }
        return value;
    };
    LocalStorageService.prototype.setItem = function (key, data) {
        //try catch to handle safari in private mode which does not allow localstorage
        try {
            if (angular.isObject(data) || angular.isArray(data)) {
                data = angular.toJson(data);
            }
            window.localStorage.setItem(key, data);
        }
        catch (e) {
        }
    };
    LocalStorageService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], LocalStorageService);
    return LocalStorageService;
}());
exports.LocalStorageService = LocalStorageService;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var BaseObject = /** @class */ (function () {
    //@ngInject
    function BaseObject($injector) {
        var _this = this;
        this.getService = function (serviceName) {
            //return;
            if (_this.$injector.has(serviceName)) {
                //returns a generic service
                return _this.$injector.get(serviceName);
            }
        };
        this.getHibachiScope = function () {
            return _this.getService('publicService');
        };
        this.getAppConfig = function () {
            return _this.getService('appConfig');
        };
        this.$injector = $injector;
        var constructorString = this.constructor.toString();
        this.className = constructorString.match(/\w+/g)[1];
    }
    return BaseObject;
}());
exports.BaseObject = BaseObject;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var adminrequest_1 = __webpack_require__(91);
var publicrequest_1 = __webpack_require__(92);
var observerservice_1 = __webpack_require__(8);
var RequestService = /** @class */ (function () {
    //@ngInject
    function RequestService($injector, 
    //public $injector:ng.auto.IInjectorService,
    observerService) {
        var _this = this;
        this.$injector = $injector;
        this.observerService = observerService;
        this.newAdminRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new adminrequest_1.AdminRequest(url, data, method, headers, $injector, observerService);
        };
        this.newPublicRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new publicrequest_1.PublicRequest(url, data, method, headers, $injector, observerService);
        };
        this.$injector = $injector;
        this.observerService = observerService;
    }
    RequestService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("$injector")),
        __metadata("design:paramtypes", [Object, observerservice_1.ObserverService])
    ], RequestService);
    return RequestService;
}());
exports.RequestService = RequestService;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var basetransient_1 = __webpack_require__(25);
var Request = /** @class */ (function (_super) {
    __extends(Request, _super);
    function Request(url, data, method, headers, $injector) {
        var _this = _super.call(this, $injector) || this;
        _this.loading = true;
        _this.errors = {};
        _this.processResponse = function (response) {
            _this.loading = false;
            if (response.errors) {
                _this.errors = response.errors;
            }
            if (response.messages) {
                _this.messages = response.messages;
            }
        };
        //returns hibachiAction value from url and data;
        _this.getAction = function () {
            var config = _this.getAppConfig();
            //typically hibachiAction
            var actionName = config.action;
            var params = _this.utilityService.getQueryParamsFromUrl(_this.url);
            if (params[actionName]) {
                return params[actionName];
            }
            if (_this.data && _this.data[actionName]) {
                return _this.data[actionName];
            }
            if (_this.url.indexOf('api/scope/') > 0) {
                return _this.extractPublicAction(_this.url);
            }
        };
        _this.extractPublicAction = function (url) {
            //get in between api/scope and / or ? or end of word
            var regex = /\api\/scope\/(.*?)(?=\/|\?|$)/;
            var arr = regex.exec(url);
            return arr[1];
        };
        _this.processSuccess = function (response) {
            _this.processResponse(response);
        };
        _this.processError = function (response) {
            _this.processResponse(response);
        };
        /** used to turn data into a correct format for the post */
        _this.toFormParams = function (data) {
            if (data) {
                return $.param(data);
            }
            else {
                return "";
            }
            //return data = this.serializeData(data) || "";
        };
        _this.serializeData = function (data) {
            // If this is not an object, defer to native stringification.
            if (!angular.isObject(data)) {
                return ((data == null) ? "" : data.toString());
            }
            var buffer = [];
            // Serialize each key in the object.
            for (var name in data) {
                if (!data.hasOwnProperty(name)) {
                    continue;
                }
                var value = data[name];
                buffer.push(encodeURIComponent(name) + "=" + encodeURIComponent((value == null) ? "" : value));
            }
            // Serialize the buffer and clean it up for transportation.
            var source = buffer.join("&").replace(/%20/g, "+");
            return (source);
        };
        _this.headers = headers;
        _this.$q = _this.getService('$q');
        _this.$http = _this.getService('$http');
        _this.$window = _this.getService('$window');
        _this.url = url;
        _this.data = data;
        _this.method = method;
        _this.utilityService = _this.getService('utilityService');
        if (!method) {
            if (data == undefined) {
                method = "get";
            }
            else {
                method = "post";
            }
        }
        var deferred = _this.$q.defer();
        if (method == "post") {
            if (_this.headers['Content-Type'] !== "application/json") {
                data = _this.toFormParams(data);
            }
            //post
            var promise = _this.$http({
                url: url, data: data, headers: _this.headers, method: 'post'
            })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (response) {
                _this.processError(response);
                deferred.reject(response);
            });
            _this.promise = deferred.promise;
        }
        else {
            //get
            _this.$http({ url: url, method: 'get' })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (reason) {
                _this.processError(reason);
                deferred.reject(reason);
            });
            _this.promise = deferred.promise;
        }
        return _this;
    }
    return Request;
}(basetransient_1.BaseTransient));
exports.Request = Request;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var HistoryService = /** @class */ (function () {
    //ngInject
    function HistoryService() {
        this.histories = {};
    }
    HistoryService.prototype.recordHistory = function (key, data, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        if (angular.isUndefined(this.histories[key]) || overwrite) {
            this.histories[key] = [];
        }
        this.histories[key].push(data);
    };
    HistoryService.prototype.hasHistory = function (key) {
        return angular.isDefined(this.histories[key]);
    };
    HistoryService.prototype.getHistory = function (key) {
        if (angular.isDefined(this.histories[key])) {
            return this.histories[key];
        }
    };
    HistoryService.prototype.deleteHistory = function (key) {
        this.histories[key] = [];
    };
    HistoryService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], HistoryService);
    return HistoryService;
}());
exports.HistoryService = HistoryService;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var Form = /** @class */ (function () {
    //@ngInject
    function Form(name, object, editing) {
        this.$addControl = function (control) { };
        this.$removeControl = function (control) { };
        this.$setValidity = function (validationErrorKey, isValid, control) { };
        this.$setDirty = function () { };
        this.$setPristine = function () { };
        this.$commitViewValue = function () { };
        this.$rollbackViewValue = function () { };
        this.$setSubmitted = function () { };
        this.$setUntouched = function () { };
        this.name = name;
        this.object = object;
        this.editing = editing;
    }
    return Form;
}());
var FormService = /** @class */ (function () {
    function FormService($log) {
        this.$log = $log;
        this._forms = {};
        this._pristinePropertyValue = {};
    }
    FormService.prototype.setPristinePropertyValue = function (property, value) {
        this._pristinePropertyValue[property] = value;
    };
    FormService.prototype.getPristinePropertyValue = function (property) {
        return this._pristinePropertyValue[property];
    };
    FormService.prototype.setForm = function (form) {
        this._forms[form.name] = form;
    };
    FormService.prototype.getForm = function (formName) {
        return this._forms[formName];
    };
    FormService.prototype.getForms = function () {
        return this._forms;
    };
    FormService.prototype.getFormsByObjectName = function (objectName) {
        var forms = [];
        for (var f in this._forms) {
            if (angular.isDefined(this._forms[f].$$swFormInfo.object) && this._forms[f].$$swFormInfo.object.metaData.className === objectName) {
                forms.push(this._forms[f]);
            }
        }
        return forms;
    };
    FormService.prototype.createForm = function (name, object, editing) {
        var _form = new Form(name, object, editing);
        this.setForm(_form);
        return _form;
    };
    FormService.prototype.resetForm = function (form) {
        this.$log.debug('resetting form');
        this.$log.debug(form);
        for (var key in form) {
            if (angular.isDefined(form[key])
                && typeof form[key].$setViewValue == 'function'
                && angular.isDefined(form[key].$viewValue)) {
                this.$log.debug(form[key]);
                if (angular.isDefined(this.getPristinePropertyValue(key))) {
                    form[key].$setViewValue(this.getPristinePropertyValue(key));
                }
                else {
                    form[key].$setViewValue('');
                }
                form[key].$setUntouched(true);
                form[key].$render();
                this.$log.debug(form[key]);
            }
        }
        form.$submitted = false;
        form.$setPristine();
        form.$setUntouched();
    };
    FormService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$log')),
        __metadata("design:paramtypes", [Object])
    ], FormService);
    return FormService;
}());
exports.FormService = FormService;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var RbKeyService = /** @class */ (function () {
    function RbKeyService($http, $q, appConfig, resourceBundles) {
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
        this._resourceBundle = {};
        this._resourceBundleLastModified = '';
        this._loadingResourceBundle = false;
        this._loadedResourceBundle = false;
        this.$q = $q;
        this.$http = $http;
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
    }
    RbKeyService.prototype.getRBLoaded = function () {
        return this._loadedResourceBundle;
    };
    RbKeyService.prototype.rbKey = function (key, replaceStringData) {
        ////$log.debug('rbkey');
        ////$log.debug(key);
        ////$log.debug(this.getConfig().rbLocale);
        var keyValue = this.getRBKey(key, this.appConfig.rbLocale);
        ////$log.debug(keyValue);
        return keyValue;
    };
    RbKeyService.prototype.getRBKey = function (key, locale, checkedKeys, originalKey) {
        ////$log.debug('getRBKey');
        ////$log.debug('loading:'+this._loadingResourceBundle);
        ////$log.debug('loaded'+this._loadedResourceBundle);
        if (this.resourceBundles) {
            key = key.toLowerCase();
            checkedKeys = checkedKeys || "";
            locale = locale || 'en_us';
            ////$log.debug('locale');
            ////$log.debug(locale);
            var keyListArray = key.split(',');
            ////$log.debug('keylistAray');
            ////$log.debug(keyListArray);
            if (keyListArray.length > 1) {
                var keyValue = "";
                for (var i = 0; i < keyListArray.length; i++) {
                    keyValue = this.getRBKey(keyListArray[i], locale, keyValue);
                    //$log.debug('keyvalue:'+keyValue);
                    if (keyValue.slice(-8) != "_missing") {
                        break;
                    }
                }
                return keyValue;
            }
            var bundle = this.resourceBundles[locale];
            if (angular.isDefined(bundle[key])) {
                //$log.debug('rbkeyfound:'+bundle[key]);
                return bundle[key];
            }
            var checkedKeysListArray = checkedKeys.split(',');
            checkedKeysListArray.push(key + '_' + locale + '_missing');
            checkedKeys = checkedKeysListArray.join(",");
            if (angular.isUndefined(originalKey)) {
                originalKey = key;
            }
            //$log.debug('originalKey:'+key);
            //$log.debug(checkedKeysListArray);
            var localeListArray = locale.split('_');
            //$log.debug(localeListArray);
            if (localeListArray.length === 2) {
                bundle = this.resourceBundles[localeListArray[0]];
                if (angular.isDefined(bundle[key])) {
                    //$log.debug('rbkey found:'+bundle[key]);
                    return bundle[key];
                }
                checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');
                checkedKeys = checkedKeysListArray.join(",");
            }
            var keyDotListArray = key.split('.');
            if (keyDotListArray.length >= 3
                && keyDotListArray[keyDotListArray.length - 2] === 'define') {
                var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');
                //$log.debug('newkey1:'+newKey);
                return this.getRBKey(newKey, locale, checkedKeys, originalKey);
            }
            else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {
                var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');
                //$log.debug('newkey:'+newKey);
                return this.getRBKey(newKey, locale, checkedKeys, originalKey);
            }
            //$log.debug(localeListArray);
            if (localeListArray[0] !== "en") {
                return this.getRBKey(originalKey, 'en', checkedKeys);
            }
            return checkedKeys;
        }
        return '';
    };
    RbKeyService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("$http")),
        __param(1, core_1.Inject("$q")),
        __param(2, core_1.Inject("appConfig")),
        __param(3, core_1.Inject("resourceBundles")),
        __metadata("design:paramtypes", [Object, Object, Object, Object])
    ], RbKeyService);
    return RbKeyService;
}());
exports.RbKeyService = RbKeyService;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = __webpack_require__(16);
__webpack_require__(102);
__webpack_require__(115);
var IStore = /** @class */ (function () {
    //@ngInject
    function IStore(initialState, reducer, middleware) {
        var _this = this;
        this.initialState = initialState;
        this.reducer = reducer;
        this.middleware = middleware;
        this.dispatch = function (action) { return _this.actionStream$.next((action)); };
        this.getInstance = function () {
            return _this.store$;
        };
        this.actionStream$ = new Subject_1.Subject();
        this.store$ = this.actionStream$.startWith(initialState).scan(reducer);
        if (middleware) {
            this.store$;
        }
        return this;
    }
    return IStore;
}());
exports.IStore = IStore;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

(function(){
  var crypt = __webpack_require__(150),
      utf8 = __webpack_require__(47).utf8,
      isBuffer = __webpack_require__(151),
      bin = __webpack_require__(47).bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();


/***/ }),
/* 47 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
//components
var swcardlayout_1 = __webpack_require__(178);
var swcardview_1 = __webpack_require__(179);
var swcardheader_1 = __webpack_require__(180);
var swcardbody_1 = __webpack_require__(181);
var swcardicon_1 = __webpack_require__(182);
var swcardprogressbar_1 = __webpack_require__(183);
var swcardlistitem_1 = __webpack_require__(184);
var CardModule = /** @class */ (function () {
    function CardModule() {
    }
    CardModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                core_module_2.CoreModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], CardModule);
    return CardModule;
}());
exports.CardModule = CardModule;
var cardmodule = angular.module('hibachi.card', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('cardPartialsPath', 'card/components/')
    //components
    .directive('swCardLayout', swcardlayout_1.SWCardLayout.Factory())
    .directive('swCardView', swcardview_1.SWCardView.Factory())
    .directive('swCardHeader', swcardheader_1.SWCardHeader.Factory())
    .directive('swCardBody', swcardbody_1.SWCardBody.Factory())
    .directive('swCardIcon', swcardicon_1.SWCardIcon.Factory())
    .directive('swCardProgressBar', swcardprogressbar_1.SWCardProgressBar.Factory())
    .directive('swCardListItem', swcardlistitem_1.SWCardListItem.Factory());
exports.cardmodule = cardmodule;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var collection_module_1 = __webpack_require__(18);
var collection_module_2 = __webpack_require__(18);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
var listingservice_1 = __webpack_require__(214);
//directives
var swlistingdisplay_1 = __webpack_require__(215);
var swlistingdisplaycell_1 = __webpack_require__(216);
var swlistingcontrols_1 = __webpack_require__(217);
var swlistingaggregate_1 = __webpack_require__(218);
var swlistingcolorfilter_1 = __webpack_require__(219);
var swlistingcolumn_1 = __webpack_require__(220);
var swlistingdisablerule_1 = __webpack_require__(221);
var swlistingexpandablerule_1 = __webpack_require__(222);
var swlistingfilter_1 = __webpack_require__(223);
var swlistingfiltergroup_1 = __webpack_require__(224);
var swlistingorderby_1 = __webpack_require__(225);
var swlistingrowsave_1 = __webpack_require__(226);
var swlistingsearch_1 = __webpack_require__(227);
var swlistingglobalsearch_1 = __webpack_require__(228);
var ListingModule = /** @class */ (function () {
    function ListingModule() {
    }
    ListingModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                collection_module_2.CollectionModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], ListingModule);
    return ListingModule;
}());
exports.ListingModule = ListingModule;
var listingmodule = angular.module('hibachi.listing', [collection_module_1.collectionmodule.name])
    .run([function () {
    }])
    //services
    .service('listingService', listingservice_1.ListingService)
    //directives
    .directive('swListingDisplay', swlistingdisplay_1.SWListingDisplay.Factory())
    .directive('swListingControls', swlistingcontrols_1.SWListingControls.Factory())
    .directive('swListingAggregate', swlistingaggregate_1.SWListingAggregate.Factory())
    .directive('swListingColorFilter', swlistingcolorfilter_1.SWListingColorFilter.Factory())
    .directive('swListingColumn', swlistingcolumn_1.SWListingColumn.Factory())
    .directive('swListingDisableRule', swlistingdisablerule_1.SWListingDisableRule.Factory())
    .directive('swListingExpandableRule', swlistingexpandablerule_1.SWListingExpandableRule.Factory())
    .directive('swListingDisplayCell', swlistingdisplaycell_1.SWListingDisplayCell.Factory())
    .directive('swListingFilter', swlistingfilter_1.SWListingFilter.Factory())
    .directive('swListingFilterGroup', swlistingfiltergroup_1.SWListingFilterGroup.Factory())
    .directive('swListingOrderBy', swlistingorderby_1.SWListingOrderBy.Factory())
    .directive('swListingRowSave', swlistingrowsave_1.SWListingRowSave.Factory())
    .directive('swListingSearch', swlistingsearch_1.SWListingSearch.Factory())
    .directive('swListingGlobalSearch', swlistingglobalsearch_1.SWListingGlobalSearch.Factory())
    //constants
    .constant('listingPartialPath', 'listing/components/');
exports.listingmodule = listingmodule;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
// import {AccountService} from "./services/accountservice";
// import {CartService} from "./services/cartservice";
// import {UtilityService} from "./services/utilityservice";
// import {SelectionService} from "./services/selectionservice";
// import {ObserverService} from "./services/observerservice";
// import {FormService} from "./services/formservice";
// import {MetaDataService} from "./services/metadataservice";
//controllers
var otherwisecontroller_1 = __webpack_require__(229);
var routercontroller_1 = __webpack_require__(230);
//directives
var swdetailtabs_1 = __webpack_require__(231);
var swdetail_1 = __webpack_require__(232);
var swlist_1 = __webpack_require__(233);
//modules
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
var EntityModule = /** @class */ (function () {
    function EntityModule() {
    }
    EntityModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                core_module_2.CoreModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], EntityModule);
    return EntityModule;
}());
exports.EntityModule = EntityModule;
var entitymodule = angular.module('hibachi.entity', ['ngRoute', core_module_1.coremodule.name])
    .config(['$routeProvider', '$injector', '$locationProvider', 'appConfig',
    function ($routeProvider, $injector, $locationProvider, appConfig) {
        //detect if we are in hashbang mode
        var vars = {};
        var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {
            vars[key] = value;
        });
        if (vars.ng) {
            $locationProvider.html5Mode(false).hashPrefix('!');
        }
        var snakeToCapitalCase = function (s) {
            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
        };
        $routeProvider.when('/entity/:entityName/', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'ListDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-list></sw-' + params.entityName.toLowerCase() + '-list>';
                }
                else {
                    return '<sw-list></sw-list>';
                }
            },
            controller: 'routerController'
        }).when('/entity/:entityName/:entityID', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'DetailDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-detail></sw-' + params.entityName.toLowerCase() + '-detail>';
                }
                else {
                    return '<sw-detail></sw-detail>';
                }
            },
            controller: 'routerController',
        });
        //        .otherwise({
        //         //controller:'otherwiseController'
        //         templateUrl: appConfig.baseURL + '/admin/client/js/partials/otherwise.html',
        //     });
    }])
    .constant('coreEntityPartialsPath', 'entity/components/')
    //services
    //controllers
    .controller('otherwiseController', otherwisecontroller_1.OtherWiseController)
    .controller('routerController', routercontroller_1.RouterController)
    //filters
    //directives
    .directive('swDetail', swdetail_1.SWDetail.Factory())
    .directive('swDetailTabs', swdetailtabs_1.SWDetailTabs.Factory())
    .directive('swList', swlist_1.SWList.Factory());
exports.entitymodule = entitymodule;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
var paginationservice_1 = __webpack_require__(234);
var swpaginationbar_1 = __webpack_require__(235);
var PaginationModule = /** @class */ (function () {
    function PaginationModule() {
    }
    PaginationModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [
                paginationservice_1.PaginationService
            ],
            imports: [
                core_module_2.CoreModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        })
    ], PaginationModule);
    return PaginationModule;
}());
exports.PaginationModule = PaginationModule;
var paginationmodule = angular.module('hibachi.pagination', [core_module_1.coremodule.name])
    // .config(['$provide','baseURL',($provide,baseURL)=>{
    // 	$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');
    // }])
    .run([function () {
    }])
    //services
    .service('paginationService', static_1.downgradeInjectable(paginationservice_1.PaginationService))
    .directive('swPaginationBar', swpaginationbar_1.SWPaginationBar.Factory())
    //constants
    .constant('partialsPath', 'pagination/components/');
exports.paginationmodule = paginationmodule;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//module
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//services
var fileservice_1 = __webpack_require__(236);
//directives
//  components
//form
var swinput_1 = __webpack_require__(237);
var swfformfield_1 = __webpack_require__(238);
var swform_1 = __webpack_require__(239);
var swfform_1 = __webpack_require__(240);
var swformfield_1 = __webpack_require__(241);
var swformfieldfile_1 = __webpack_require__(242);
var swformfieldjson_1 = __webpack_require__(243);
var swformfieldsearchselect_1 = __webpack_require__(244);
var swformregistrar_1 = __webpack_require__(245);
var swerrordisplay_1 = __webpack_require__(246);
var swaddressform_1 = __webpack_require__(247);
var swpropertydisplay_1 = __webpack_require__(53);
var swfpropertydisplay_1 = __webpack_require__(248);
var swformsubscriber_1 = __webpack_require__(249);
var FormModule = /** @class */ (function () {
    function FormModule() {
    }
    FormModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [
                fileservice_1.FileService
            ],
            imports: [
                common_1.CommonModule,
                static_1.UpgradeModule,
                core_module_2.CoreModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], FormModule);
    return FormModule;
}());
exports.FormModule = FormModule;
var formmodule = angular.module('hibachi.form', ['angularjs-datetime-picker', core_module_1.coremodule.name]).config(function () {
})
    .constant('coreFormPartialsPath', 'form/components/')
    .service('fileService', static_1.downgradeInjectable(fileservice_1.FileService))
    //directives
    .directive('swInput', swinput_1.SWInput.Factory())
    .directive('swfFormField', swfformfield_1.SWFFormField.Factory())
    .directive('swForm', swform_1.SWForm.Factory())
    .directive('swfForm', swfform_1.SWFForm.Factory())
    .directive('swFormField', swformfield_1.SWFormField.Factory())
    .directive('swFormFieldFile', swformfieldfile_1.SWFormFieldFile.Factory())
    .directive('swFormFieldJson', swformfieldjson_1.SWFormFieldJson.Factory())
    .directive('swFormFieldSearchSelect', swformfieldsearchselect_1.SWFormFieldSearchSelect.Factory())
    .directive('swFormRegistrar', swformregistrar_1.SWFormRegistrar.Factory())
    .directive('swfPropertyDisplay', swfpropertydisplay_1.SWFPropertyDisplay.Factory(swfpropertydisplay_1.SWFPropertyDisplay, "swfpropertydisplay.html"))
    .directive('swPropertyDisplay', swpropertydisplay_1.SWPropertyDisplay.Factory(swpropertydisplay_1.SWPropertyDisplay, "propertydisplay.html"))
    .directive('swErrorDisplay', swerrordisplay_1.SWErrorDisplay.Factory())
    .directive('swAddressForm', swaddressform_1.SWAddressForm.Factory())
    .directive('swFormSubscriber', swformsubscriber_1.SWFormSubscriber.Factory());
exports.formmodule = formmodule;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWPropertyDisplayController = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService, listingService) {
        var _this = this;
        this.$filter = $filter;
        this.utilityService = utilityService;
        this.$injector = $injector;
        this.metadataService = metadataService;
        this.observerService = observerService;
        this.listingService = listingService;
        this.saved = false;
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swPropertyDisplayDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i] && _this.swForm && _this.swForm[i]) {
                    _this[i] = _this.swForm[i];
                }
            }
            _this.errors = {};
            _this.edited = false;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.errorName = _this.errorName || _this.name;
            _this.initialValue = _this.object[_this.property];
            _this.propertyDisplayID = _this.utilityService.createID(32);
            if (angular.isUndefined(_this.showSave)) {
                _this.showSave = true;
            }
            if (angular.isUndefined(_this.inListingDisplay)) {
                _this.inListingDisplay = false;
            }
            if (angular.isUndefined(_this.rowSaveEnabled)) {
                _this.rowSaveEnabled = _this.inListingDisplay;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.showRevert)) {
                _this.showRevert = true;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.revertText)) {
                _this.revertText = _this.revertToValue;
            }
            if (angular.isUndefined(_this.showRevert)) {
                _this.showRevert = false;
            }
            if (angular.isUndefined(_this.rawFileTarget)) {
                _this.rawFileTarget = _this.property;
            }
            if (angular.isUndefined(_this.editing)) {
                _this.editing = false;
            }
            if (angular.isUndefined(_this.editable)) {
                _this.editable = true;
            }
            if (angular.isUndefined(_this.isHidden)) {
                _this.isHidden = false;
            }
            if (angular.isUndefined(_this.noValidate)) {
                _this.noValidate = false;
            }
            if (angular.isUndefined(_this.inModal)) {
                _this.inModal = false;
            }
            if (angular.isUndefined(_this.optionsArguments)) {
                _this.optionsArguments = {};
            }
            if ((_this.fieldType !== 'hidden' &&
                angular.isUndefined(_this.inListingDisplay)) ||
                (angular.isDefined(_this.inListingDisplay) && !_this.inListingDisplay)) {
                _this.showLabel = true;
            }
            else {
                _this.showLabel = false;
            }
            if (angular.isDefined(_this.pageRecord) && angular.isUndefined(_this.pageRecord.edited)) {
                _this.pageRecord.edited = false;
            }
            _this.applyFilter = function (model, filter) {
                try {
                    return _this.$filter(filter)(model);
                }
                catch (e) {
                    return model;
                }
            };
            //swfproperty logic
            if (angular.isUndefined(_this.fieldType) && _this.object && _this.object.metaData) {
                _this.fieldType = _this.metadataService.getPropertyFieldType(_this.object, _this.propertyIdentifier);
            }
            if (angular.isUndefined(_this.title) && _this.object && _this.object.metaData) {
                _this.labelText = _this.metadataService.getPropertyTitle(_this.object, _this.propertyIdentifier);
            }
            _this.labelText = _this.labelText || _this.title;
            _this.title = _this.title || _this.labelText;
            _this.fieldType = _this.fieldType || "text";
            _this.class = _this.class || "form-control";
            _this.fieldAttributes = _this.fieldAttributes || "";
            _this.label = _this.label || "true";
            _this.labelText = _this.labelText || "";
            _this.labelClass = _this.labelClass || "";
            _this.name = _this.name || "unnamed";
            _this.value = _this.value || _this.initialValue;
            _this.object = _this.object || _this.swForm.object; //this is the process object
            /** handle options */
            if (_this.options && angular.isString(_this.options)) {
                var optionsArray = [];
                optionsArray = _this.options.toString().split(",");
                angular.forEach(optionsArray, function (o) {
                    var newOption = {
                        name: "",
                        value: ""
                    };
                    newOption.name = o;
                    newOption.value = o;
                    _this.optionValues.push(newOption);
                });
            }
            /** handle turning the options into an array of objects */
            /** handle setting the default value for the yes / no element  */
            if (_this.fieldType == "yesno" && (_this.value && angular.isString(_this.value))) {
                _this.selected == _this.value;
            }
            if (angular.isUndefined(_this.hint) && _this.object && _this.object.metaData) {
                _this.hint = _this.metadataService.getPropertyHintByObjectAndPropertyIdentifier(_this.object, _this.propertyIdentifier);
            }
            if ((_this.hasOnChangeCallback || _this.inListingDisplay || _this.onChangeEvent) &&
                (angular.isDefined(_this.swForm) && angular.isDefined(_this.name))) {
                _this.swInputOnChangeEvent = _this.swForm.name + _this.name + 'change';
                _this.observerService.attach(_this.onChange, _this.swInputOnChangeEvent);
            }
        };
        this.onChange = function (result) {
            _this.edited = true;
            if (_this.saved) {
                _this.saved = false;
            }
            if (_this.hasOnChangeCallback) {
                _this.onChangeCallback(result);
            }
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markEdited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID, _this.save);
            }
            if (angular.isDefined(_this.onChangeEvent)) {
                _this.observerService.notify(_this.onChangeEvent, result);
            }
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.object.data[_this.property] = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.object.data[_this.property] = _this.revertToValue;
            _this.onChange();
        };
        this.save = function () {
            //do this eagerly to hide save will reverse if theres an error
            _this.edited = false;
            _this.saved = true;
            if (!_this.inModal) {
                _this.object.$$save().then(function (response) {
                    if (_this.hasSaveCallback) {
                        _this.saveCallback(response);
                    }
                }, function (reason) {
                    _this.edited = true;
                    _this.saved = false;
                });
            }
            else if (_this.hasModalCallback) {
                _this.modalCallback();
            }
        };
    }
    return SWPropertyDisplayController;
}());
exports.SWPropertyDisplayController = SWPropertyDisplayController;
var SWPropertyDisplay = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.swpropertyPartialPath = swpropertyPartialPath;
        this.require = { swForm: "?^swForm", form: "?^form" };
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            //swfproperty scope
            name: "@?",
            errorName: "@?",
            class: "@?",
            edit: "@?",
            valueObject: "=?",
            valueObjectProperty: "=?",
            propertyIdentifier: "@?",
            valueOptions: "=?",
            fieldAttributes: "@?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            errorText: "@?",
            errorClass: "@?",
            formTemplate: "@?",
            eventAnnouncers: "@",
            hideErrors: '=?',
            value: "@?",
            //swpropertyscope
            property: "@?",
            object: "=?",
            editable: "=?",
            editing: "=?",
            isHidden: "=?",
            title: "=?",
            hint: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            isDirty: "=?",
            onChangeCallback: "&?onChange",
            onChangeEvent: "@?",
            saveCallback: "&?",
            fieldType: "@?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            noValidate: "=?",
            inListingDisplay: "=?",
            inModal: "=?",
            modalCallback: "&?",
            hasModalCallback: "=?",
            rowSaveEnabled: "=?",
            revertToValue: "=?",
            revertText: "@?",
            showRevert: "=?",
            showSave: "=?",
            placeholderText: "@",
            placeholderRbKey: "@",
            inputAttributes: "@?",
            optionValues: "=?",
            eventListeners: "=?",
            context: "@?"
        };
        this.controller = SWPropertyDisplayController;
        this.controllerAs = "swPropertyDisplay";
        this.templateUrlPath = "propertydisplay.html";
        this.link = function ($scope, element, attrs, formController) {
            $scope.frmController = formController;
            $scope.swfPropertyDisplay = $scope.swPropertyDisplay;
            if (angular.isDefined(attrs.onChange)) {
                $scope.swPropertyDisplay.hasOnChangeCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasOnChangeCallback = false;
            }
            if (angular.isDefined(attrs.saveCallback)) {
                $scope.swPropertyDisplay.hasSaveCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasSaveCallback = false;
            }
            if (angular.isDefined($scope.swPropertyDisplay.inListingDisplay) && $scope.swPropertyDisplay.inListingDisplay) {
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                if (angular.isDefined(currentScope["pageRecord"])) {
                    $scope.swPropertyDisplay.pageRecord = currentScope["pageRecord"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
                if (angular.isDefined(currentScope["pageRecordKey"])) {
                    $scope.swPropertyDisplay.pageRecordIndex = currentScope["pageRecordKey"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                if (angular.isDefined(currentScope["swListingDisplay"])) {
                    $scope.swPropertyDisplay.listingID = currentScope["swListingDisplay"].tableID;
                }
            }
            if (angular.isDefined($scope.swPropertyDisplay.inModal) && $scope.swPropertyDisplay.inModal) {
                var modalScope = _this.scopeService.getRootParentScope($scope, "swModalLauncher");
                $scope.swPropertyDisplay.modalName = modalScope.swModalLauncher.modalName;
                if (angular.isFunction(modalScope.swModalLauncher.launchModal)) {
                    $scope.swPropertyDisplay.modalCallback = modalScope.swModalLauncher.launchModal;
                    $scope.swPropertyDisplay.hasModalCallback = true;
                }
            }
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + swpropertyPartialPath;
    }
    SWPropertyDisplay.Factory = function (swpropertyClass, swpropertyPartialPath) {
        var directive = function ($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder) { return new swpropertyClass($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, 
        //not an inejctable don't add to $inject. This is in the form.module Factory implementation
        swpropertyPartialPath); };
        directive.$inject = ['$compile', 'scopeService', 'coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWPropertyDisplay.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
    return SWPropertyDisplay;
}());
exports.SWPropertyDisplay = SWPropertyDisplay;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//components
var swvalidate_1 = __webpack_require__(250);
var swvalidationminlength_1 = __webpack_require__(251);
var swvalidationdatatype_1 = __webpack_require__(252);
var swvalidationeq_1 = __webpack_require__(253);
var swvalidationgte_1 = __webpack_require__(254);
var swvalidationlte_1 = __webpack_require__(255);
var swvalidationmaxlength_1 = __webpack_require__(256);
var swvalidationmaxvalue_1 = __webpack_require__(257);
var swvalidationminvalue_1 = __webpack_require__(258);
var swvalidationneq_1 = __webpack_require__(259);
var swvalidationnumeric_1 = __webpack_require__(260);
var swvalidationregex_1 = __webpack_require__(261);
var swvalidationrequired_1 = __webpack_require__(262);
var swvalidationunique_1 = __webpack_require__(263);
var swvalidationuniqueornull_1 = __webpack_require__(264);
//services
var validationservice_1 = __webpack_require__(265);
//modules
var core_module_1 = __webpack_require__(3);
var core_module_2 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
var ValidationModule = /** @class */ (function () {
    function ValidationModule() {
    }
    ValidationModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                core_module_2.CoreModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], ValidationModule);
    return ValidationModule;
}());
exports.ValidationModule = ValidationModule;
var validationmodule = angular.module('hibachi.validation', [core_module_1.coremodule.name])
    .run([function () {
    }])
    //directives
    .directive('swValidate', swvalidate_1.SWValidate.Factory())
    .directive('swvalidationminlength', swvalidationminlength_1.SWValidationMinLength.Factory())
    .directive('swvalidationdatatype', swvalidationdatatype_1.SWValidationDataType.Factory())
    .directive('swvalidationeq', swvalidationeq_1.SWValidationEq.Factory())
    .directive("swvalidationgte", swvalidationgte_1.SWValidationGte.Factory())
    .directive("swvalidationlte", swvalidationlte_1.SWValidationLte.Factory())
    .directive('swvalidationmaxlength', swvalidationmaxlength_1.SWValidationMaxLength.Factory())
    .directive("swvalidationmaxvalue", swvalidationmaxvalue_1.SWValidationMaxValue.Factory())
    .directive("swvalidationminvalue", swvalidationminvalue_1.SWValidationMinValue.Factory())
    .directive("swvalidationneq", swvalidationneq_1.SWValidationNeq.Factory())
    .directive("swvalidationnumeric", swvalidationnumeric_1.SWValidationNumeric.Factory())
    .directive("swvalidationregex", swvalidationregex_1.SWValidationRegex.Factory())
    .directive("swvalidationrequired", swvalidationrequired_1.SWValidationRequired.Factory())
    .directive("swvalidationunique", swvalidationunique_1.SWValidationUnique.Factory())
    .directive("swvalidationuniqueornull", swvalidationuniqueornull_1.SWValidationUniqueOrNull.Factory())
    //services
    .service("validationService", validationservice_1.ValidationService);
exports.validationmodule = validationmodule;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
var workflowconditionservice_1 = __webpack_require__(266);
var scheduleservice_1 = __webpack_require__(267);
//directives
var swadmincreatesuperuser_1 = __webpack_require__(268);
var swworkflowbasic_1 = __webpack_require__(269);
var swworkflowcondition_1 = __webpack_require__(270);
var swworkflowconditiongroupitem_1 = __webpack_require__(271);
var swworkflowconditiongroups_1 = __webpack_require__(272);
var swworkflowtask_1 = __webpack_require__(273);
var swworkflowtaskactions_1 = __webpack_require__(274);
var swworkflowtasks_1 = __webpack_require__(275);
var swworkflowtrigger_1 = __webpack_require__(276);
var swworkflowtriggers_1 = __webpack_require__(277);
var swworkflowtriggerhistory_1 = __webpack_require__(278);
var swschedulepreview_1 = __webpack_require__(279);
//filters
//modules
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
var WorkflowModule = /** @class */ (function () {
    function WorkflowModule() {
    }
    WorkflowModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], WorkflowModule);
    return WorkflowModule;
}());
exports.WorkflowModule = WorkflowModule;
var workflowmodule = angular.module('hibachi.workflow', ['hibachi.collection']).config(function () {
})
    //constants
    .constant('workflowPartialsPath', 'workflow/components/')
    //services
    .service('workflowConditionService', workflowconditionservice_1.WorkflowConditionService)
    .service('scheduleService', scheduleservice_1.ScheduleService)
    //directives
    .directive('swAdminCreateSuperUser', swadmincreatesuperuser_1.SWAdminCreateSuperUser.Factory())
    .directive('swWorkflowBasic', swworkflowbasic_1.SWWorkflowBasic.Factory())
    .directive('swWorkflowCondition', swworkflowcondition_1.SWWorkflowCondition.Factory())
    .directive('swWorkflowConditionGroupItem', swworkflowconditiongroupitem_1.SWWorkflowConditionGroupItem.Factory())
    .directive('swWorkflowConditionGroups', swworkflowconditiongroups_1.SWWorkflowConditionGroups.Factory())
    .directive('swWorkflowTask', swworkflowtask_1.SWWorkflowTask.Factory())
    .directive('swWorkflowTaskActions', swworkflowtaskactions_1.SWWorkflowTaskActions.Factory())
    .directive('swWorkflowTasks', swworkflowtasks_1.SWWorkflowTasks.Factory())
    .directive('swWorkflowTrigger', swworkflowtrigger_1.SWWorkflowTrigger.Factory())
    .directive('swWorkflowTriggers', swworkflowtriggers_1.SWWorkflowTriggers.Factory())
    .directive('swWorkflowTriggerHistory', swworkflowtriggerhistory_1.SWWorkflowTriggerHistory.Factory())
    .directive('swSchedulePreview', swschedulepreview_1.SWSchedulePreview.Factory());
exports.workflowmodule = workflowmodule;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(57);


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path='../typings/hibachiTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
/*jshint browser:true */
var basebootstrap_1 = __webpack_require__(58);
var hibachi_module_1 = __webpack_require__(177);
var logger_module_1 = __webpack_require__(281);
//custom bootstrapper
var bootstrapper = /** @class */ (function (_super) {
    __extends(bootstrapper, _super);
    function bootstrapper() {
        var _this = this;
        var angular = _this = _super.call(this, [hibachi_module_1.hibachimodule.name, logger_module_1.loggermodule.name]) || this;
        angular.bootstrap();
        return _this;
    }
    return bootstrapper;
}(basebootstrap_1.BaseBootStrapper));
module.exports = new bootstrapper();


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../typings/hibachiTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
var core_module_1 = __webpack_require__(3);
var md5 = __webpack_require__(46);
//generic bootstrapper
var BaseBootStrapper = /** @class */ (function () {
    function BaseBootStrapper(myApplication) {
        var _this = this;
        this._resourceBundle = {};
        this.fetchData = function () {
            var baseURL = hibachiConfig.baseURL;
            if (!baseURL) {
                baseURL = '';
            }
            if (baseURL.length && baseURL.slice(-1) !== '/') {
                baseURL += '/';
            }
            return _this.getInstantiationKey(baseURL).then(function (instantiationKey) {
                _this.instantiationKey = instantiationKey;
                var invalidCache = [];
                try {
                    var hashedData = localStorage.getItem('attributeChecksum');
                    if (hashedData !== null && hibachiConfig.attributeCacheKey === hashedData.toUpperCase()) {
                        core_module_1.coremodule.constant('attributeMetaData', JSON.parse(localStorage.getItem('attributeMetaData')));
                    }
                    else {
                        invalidCache.push('attributeCacheKey');
                    }
                }
                catch (e) {
                    invalidCache.push('attributeCacheKey');
                }
                try {
                    _this.appConfig = JSON.parse(localStorage.getItem('appConfig'));
                    if (hibachiConfig.instantiationKey === _this.appConfig.instantiationKey) {
                        core_module_1.coremodule.constant('appConfig', _this.appConfig);
                        return _this.getResourceBundles();
                    }
                    else {
                        invalidCache.push('instantiationKey');
                    }
                }
                catch (e) {
                    invalidCache.push('instantiationKey');
                }
                return _this.getData(invalidCache);
            });
        };
        this.getInstantiationKey = function (baseURL) {
            return _this.$q(function (resolve, reject) {
                if (hibachiConfig.instantiationKey) {
                    resolve(hibachiConfig.instantiationKey);
                }
                else {
                    _this.$http.get(baseURL + '?' + hibachiConfig.action + '=api:main.getInstantiationKey').then(function (resp) { return resolve(resp.data.data.instantiationKey); });
                }
            });
        };
        this.getData = function (invalidCache) {
            var promises = {};
            for (var i in invalidCache) {
                var invalidCacheName = invalidCache[i];
                var functionName = invalidCacheName.charAt(0).toUpperCase() + invalidCacheName.slice(1);
                promises[invalidCacheName] = _this['get' + functionName + 'Data']();
            }
            return _this.$q.all(promises);
        };
        this.getAttributeCacheKeyData = function () {
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (urlString.length && urlString.slice(-1) !== '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '?' + hibachiConfig.action + '=api:main.getAttributeModel')
                .then(function (resp) {
                core_module_1.coremodule.constant('attributeMetaData', resp.data.data);
                //for safari private mode which has no localStorage
                try {
                    localStorage.setItem('attributeMetaData', JSON.stringify(resp.data.data));
                    localStorage.setItem('attributeChecksum', md5(JSON.stringify(resp.data.data)));
                }
                catch (e) { }
                _this.attributeMetaData = resp.data.data;
            });
        };
        this.getInstantiationKeyData = function () {
            if (!_this.instantiationKey) {
                var d = new Date();
                var n = d.getTime();
                _this.instantiationKey = n.toString();
            }
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (hibachiConfig.baseURL.length && hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length - 1) != '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '/custom/config/config.json?instantiationKey=' + _this.instantiationKey)
                .then(function (resp) {
                var appConfig = resp.data.data;
                if (hibachiConfig.baseURL.length) {
                    appConfig.baseURL = urlString;
                }
                core_module_1.coremodule.constant('appConfig', resp.data.data);
                try {
                    localStorage.setItem('appConfig', JSON.stringify(resp.data.data));
                }
                catch (e) { }
                _this.appConfig = appConfig;
                return _this.getResourceBundles();
            });
        };
        this.getResourceBundle = function (locale) {
            var deferred = _this.$q.defer();
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.appConfig.baseURL + '/custom/config/resourceBundles/' + locale + '.json?instantiationKey=' + _this.appConfig.instantiationKey;
            _this.$http({
                url: urlString,
                method: "GET"
            }).success(function (response, status, headersGetter) {
                _this._resourceBundle[locale] = response;
                deferred.resolve(response);
            }).error(function (response, status) {
                if (status === 404) {
                    _this._resourceBundle[locale] = {};
                    deferred.resolve(response);
                }
                else {
                    deferred.reject(response);
                }
            });
            return deferred.promise;
        };
        this.getResourceBundles = function () {
            var localeListArray = _this.appConfig.rbLocale.split('_');
            var rbPromise;
            var rbPromises = [];
            rbPromise = _this.getResourceBundle(_this.appConfig.rbLocale);
            rbPromises.push(rbPromise);
            if (localeListArray.length === 2) {
                rbPromise = _this.getResourceBundle(localeListArray[0]);
                rbPromises.push(rbPromise);
            }
            if (localeListArray[0] !== 'en') {
                //this.getResourceBundle('en_us');
                _this.getResourceBundle('en');
            }
            return _this.$q.all(rbPromises).then(function (data) {
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            }, function (error) {
                //can enter here due to 404
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            });
        };
        this.myApplication = myApplication;
        var initInjector = angular.injector(["ng"]);
        var $http = initInjector.get("$http");
        var $q = initInjector.get("$q");
        this.$http = $http;
        this.$q = $q;
    }
    return BaseBootStrapper;
}());
exports.BaseBootStrapper = BaseBootStrapper;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var HibachiInterceptor = /** @class */ (function () {
    //@ngInject
    function HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) {
        var _this = this;
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$window = $window;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.observerService = observerService;
        this.urlParam = null;
        this.authHeader = 'Authorization';
        this.authPrefix = 'Bearer ';
        this.getJWTDataFromToken = function (str) {
            // Going backwards: from bytestream, to percent-encoding, to original string.
            str = str.split('.')[1];
            var decodedString = decodeURIComponent(_this.$window.atob(str).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
            var jwtData = angular.fromJson(decodedString);
            var now = +new Date();
            var nowString = now.toString().substr(0, jwtData.exp.toString().length);
            now = +nowString;
            if (jwtData.issuer && jwtData.issuer == _this.$window.location.hostname && jwtData.exp > now) {
                if (!_this.$rootScope.slatwall.account) {
                    _this.$rootScope.slatwall.account = {};
                }
                _this.$rootScope.slatwall.account.accountID = jwtData.accountid;
            }
        };
        this.request = function (config) {
            _this.$log.debug('request');
            //bypass interceptor rules when checking template cache
            if (config.url.charAt(0) !== '/') {
                return config;
            }
            if (config.method == 'GET' && config.url.indexOf('.html') >= 0 && config.url.indexOf('/') >= 0) {
                //all partials are bound to instantiation key
                config.url = config.url + '?instantiationKey=' + _this.appConfig.instantiationKey;
                return config;
            }
            config.cache = true;
            config.headers = config.headers || {};
            if (_this.localStorageService.hasItem('token')) {
                config.headers['Auth-Token'] = 'Bearer ' + _this.localStorageService.getItem('token');
                _this.getJWTDataFromToken(_this.localStorageService.getItem('token'));
            }
            var queryParams = _this.utilityService.getQueryParamsFromUrl(config.url);
            if (config.method == 'GET' && (queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action] === 'api:main.get')) {
                _this.$log.debug(config);
                config.method = 'POST';
                config.data = {};
                var data = {};
                if (angular.isDefined(config.params)) {
                    data = config.params;
                }
                var params = {};
                params.serializedJsonData = angular.toJson(data);
                params.context = "GET";
                config.data = $.param(params);
                delete config.params;
                config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            return config;
        };
        this.requestError = function (rejection) {
            return _this.$q.reject(rejection);
        };
        this.response = function (response) {
            if (response.data.messages) {
                var alerts = _this.alertService.formatMessagesToAlerts(response.data.messages);
                _this.alertService.addAlerts(alerts);
            }
            if (response.data.hasOwnProperty('token')) {
                _this.localStorageService.setItem('token', response.data.token);
            }
            return response;
        };
        this.responseError = function (rejection) {
            if (angular.isDefined(rejection.status) && rejection.status !== 404 && rejection.status !== 403 && rejection.status !== 499) {
                if (rejection.data && rejection.data.messages) {
                    var alerts = _this.alertService.formatMessagesToAlerts(rejection.data.messages);
                    _this.alertService.addAlerts(alerts);
                }
                else {
                    var message = {
                        msg: 'there was error retrieving data',
                        type: 'error'
                    };
                    _this.alertService.addAlert(message);
                }
            }
            if (rejection.status === 403 || rejection.status == 401) {
                _this.observerService.notify('Unauthorized');
            }
            if (rejection.status === 499) {
                // handle the case where the user is not authenticated
                if (rejection.data && rejection.data.messages) {
                    //var deferred = $q.defer();
                    var $http = _this.$injector.get('$http');
                    if (rejection.data.messages[0].message === 'timeout') {
                        //open dialog
                        _this.dialogService.addPageDialog(_this.hibachiPathBuilder.buildPartialsPath('preprocesslogin'), {});
                    }
                    else if (rejection.data.messages[0].message === 'invalid_token') {
                        return $http.get(_this.baseUrl + '?' + _this.appConfig.action + '=api:main.login').then(function (loginResponse) {
                            if (loginResponse.status === 200) {
                                _this.localStorageService.setItem('token', loginResponse.data.token);
                                rejection.config.headers = rejection.config.headers || {};
                                rejection.config.headers['Auth-Token'] = 'Bearer ' + loginResponse.data.token;
                                _this.getJWTDataFromToken(loginResponse.data.token);
                                return $http(rejection.config).then(function (response) {
                                    return response;
                                });
                            }
                        }, function (rejection) {
                            return rejection;
                        });
                    }
                }
            }
            return rejection;
        };
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$window = $window;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.baseUrl = appConfig.baseURL;
    }
    HibachiInterceptor.Factory = function () {
        var eventHandler = function ($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) { return new HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService); };
        eventHandler.$inject = [
            '$location',
            '$q',
            '$log',
            '$rootScope',
            '$window',
            '$injector',
            'localStorageService',
            'alertService',
            'appConfig',
            'dialogService',
            'utilityService',
            'hibachiPathBuilder',
            'observerService'
        ];
        return eventHandler;
    };
    return HibachiInterceptor;
}());
exports.HibachiInterceptor = HibachiInterceptor;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var HibachiPathBuilder = /** @class */ (function () {
    //@ngInject
    function HibachiPathBuilder() {
        var _this = this;
        this.setBaseURL = function (baseURL) {
            _this.baseURL = baseURL;
        };
        this.setBasePartialsPath = function (basePartialsPath) {
            _this.basePartialsPath = basePartialsPath;
        };
        this.setApiSubsystemName = function (apiSubsystemName) {
            _this.apiSubsystemName = apiSubsystemName;
        };
        this.buildPartialsPath = function (componentsPath) {
            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
                return (_this.baseURL + _this.basePartialsPath + componentsPath).replace("//", "/");
            }
            else {
                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
            }
        };
    }
    return HibachiPathBuilder;
}());
exports.HibachiPathBuilder = HibachiPathBuilder;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var localstorageservice_1 = __webpack_require__(38);
var CacheService = /** @class */ (function () {
    //@ngInject
    function CacheService(localStorageService) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.cacheData = {};
        this.fetchOrReload = function (key, expiresTime) {
            if (angular.isDefined(_this.fetch(key))) {
                return _this.fetch(key);
            }
            else {
                _this.reload(key, expiresTime).then(function (response) {
                    return _this.fetch(key);
                }, function (reason) {
                    //throw
                });
            }
        };
        if (localStorageService.hasItem("cacheData")) {
            this.cacheData = localStorageService.getItem("cacheData");
        }
    }
    CacheService.prototype.saveCacheData = function () {
        this.localStorageService.setItem("cacheData", this.cacheData);
    };
    CacheService.prototype.hasKey = function (key) {
        if (angular.isDefined(this.cacheData[key])) {
            return true;
        }
        return false;
    };
    CacheService.prototype.dateExpired = function (key) {
        if (this.cacheData[key].expiresTime == "forever") {
            return false;
        }
        return this.cacheData[key].expiresTime < Date.now();
    };
    CacheService.prototype.put = function (key, dataPromise, dataTarget, expiresTime) {
        var _this = this;
        if (expiresTime === void 0) { expiresTime = "forever"; }
        this.cacheData[key] = {};
        this.cacheData[key].expiresTime = expiresTime;
        this.cacheData[key].dataPromise = dataPromise;
        this.cacheData[key].dataTarget = dataTarget;
        dataPromise.then(function (response) {
            _this.localStorageService.setItem(key, response[dataTarget]);
        }, function (reason) {
            delete _this.cacheData[key];
        });
        this.saveCacheData();
        return dataPromise;
    };
    CacheService.prototype.reload = function (key, expiresTime) {
        var _this = this;
        if (expiresTime === void 0) { expiresTime = "forever"; }
        this.cacheData[key].expiresTime = expiresTime;
        this.cacheData[key].dataPromise.then(function (response) {
            _this.localStorageService.setItem(key, response[_this.cacheData[key].dataTarget]);
        }, function (reason) {
            delete _this.cacheData[key];
        });
        this.saveCacheData();
        return this.cacheData[key].dataPromise;
    };
    CacheService.prototype.fetch = function (key) {
        var _this = this;
        if (this.hasKey(key) && !this.dateExpired(key)) {
            if (this.localStorageService.hasItem(key)) {
                return this.localStorageService.getItem(key);
            }
            this.put(key, this.cacheData[key].dataPromise, this.cacheData[key].dataTarget, this.cacheData[key].expiresTime).finally(function () {
                return _this.localStorageService.getItem(key);
            });
        }
    };
    CacheService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [localstorageservice_1.LocalStorageService])
    ], CacheService);
    return CacheService;
}());
exports.CacheService = CacheService;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subscriber_1 = __webpack_require__(5);
var rxSubscriber_1 = __webpack_require__(20);
var Observer_1 = __webpack_require__(32);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var errorObject_1 = __webpack_require__(31);
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var noop_1 = __webpack_require__(66);
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i - 0] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;
//# sourceMappingURL=pipe.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;
//# sourceMappingURL=noop.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
var ArrayObservable_1 = __webpack_require__(14);
var isScheduler_1 = __webpack_require__(15);
var mergeAll_1 = __webpack_require__(33);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = __webpack_require__(69);
var OuterSubscriber_1 = __webpack_require__(71);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function mergeMapOperatorFunction(source) {
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
    };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(7);
var isArrayLike_1 = __webpack_require__(34);
var isPromise_1 = __webpack_require__(35);
var isObject_1 = __webpack_require__(30);
var Observable_1 = __webpack_require__(1);
var iterator_1 = __webpack_require__(24);
var InnerSubscriber_1 = __webpack_require__(70);
var observable_1 = __webpack_require__(21);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            destination.syncErrorThrowable = true;
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root_1.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator_1.iterator] === 'function') {
        var iterator = result[iterator_1.iterator]();
        do {
            var item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable_1.observable] === 'function') {
        var obs = result[observable_1.observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function identity(x) {
    return x;
}
exports.identity = identity;
//# sourceMappingURL=identity.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var share_1 = __webpack_require__(74);
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 *
 * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.
 * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.
 * Observable.of("test").publish().refCount() will not re-emit "test" on new subscriptions, Observable.of("test").share() will
 * re-emit "test" to new subscriptions.
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return share_1.share()(this);
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__(75);
var refCount_1 = __webpack_require__(36);
var Subject_1 = __webpack_require__(16);
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .multicast(() => new Subject()).refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConnectableObservable_1 = __webpack_require__(76);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
exports.multicast = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(16);
var Observable_1 = __webpack_require__(1);
var Subscriber_1 = __webpack_require__(5);
var Subscription_1 = __webpack_require__(11);
var refCount_1 = __webpack_require__(36);
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(/** @deprecated internal use only */ source, 
        /** @deprecated internal use only */ subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        /** @deprecated internal use only */ this._refCount = 0;
        this._isComplete = false;
    }
    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(11);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PublicService = /** @class */ (function () {
    ///index.cfm/api/scope/
    //@ngInject
    function PublicService($http, $q, $window, $location, $hibachi, $injector, requestService, accountService, cartService, orderService, observerService, appConfig, $timeout) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$window = $window;
        this.$location = $location;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.requestService = requestService;
        this.accountService = accountService;
        this.cartService = cartService;
        this.orderService = orderService;
        this.observerService = observerService;
        this.appConfig = appConfig;
        this.$timeout = $timeout;
        this.requests = {};
        this.errors = {};
        this.baseActionPath = "";
        this.months = [{ name: '01 - JAN', value: 1 }, { name: '02 - FEB', value: 2 }, { name: '03 - MAR', value: 3 }, { name: '04 - APR', value: 4 }, { name: '05 - MAY', value: 5 }, { name: '06 - JUN', value: 6 }, { name: '07 - JUL', value: 7 }, { name: '08 - AUG', value: 8 }, { name: '09 - SEP', value: 9 }, { name: '10 - OCT', value: 10 }, { name: '11 - NOV', value: 11 }, { name: '12 - DEC', value: 12 }];
        this.years = [];
        this.shippingAddress = "";
        this.accountAddressEditFormIndex = [];
        this.showStoreSelector = [];
        this.showEmailSelector = [];
        this.imagePath = {};
        this.successfulActions = [];
        this.failureActions = [];
        // public hasErrors = ()=>{
        //     return this.errors.length;
        // }
        /**
         * Helper methods for getting errors from the cart
         */
        this.getErrors = function () {
            _this.errors = {};
            for (var key in _this.requests) {
                var request = _this.requests[key];
                if (Object.keys(request.errors).length) {
                    _this.errors[key] = request.errors;
                }
            }
            return _this.errors;
        };
        /** grab the valid expiration years for credit cards  */
        this.getExpirationYears = function () {
            var baseDate = new Date();
            var today = baseDate.getFullYear();
            var start = today;
            for (var i = 0; i <= 15; i++) {
                _this.years.push({
                    name: start + i,
                    value: start + i,
                });
            }
        };
        /** accessors for account */
        this.getAccount = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getAccount/';
            if (!_this.accountDataPromise || refresh) {
                _this.accountDataPromise = _this.getData(urlBase, "account", "");
            }
            return _this.accountDataPromise;
        };
        /** accessors for cart */
        this.getCart = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCart/';
            if (!_this.cartDataPromise || refresh) {
                _this.cartDataPromise = _this.getData(urlBase, "cart", "");
            }
            return _this.cartDataPromise;
        };
        /** accessors for countries */
        this.getCountries = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCountries/';
            if (!_this.countryDataPromise || refresh) {
                _this.countryDataPromise = _this.getData(urlBase, "countries", "");
            }
            return _this.countryDataPromise;
        };
        /** accessors for states */
        this.getStates = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            var urlBase = _this.baseActionPath + 'getStateCodeOptionsByCountryCode/';
            if (!_this.getRequestByAction('getStateCodeOptionsByCountryCode') || !_this.getRequestByAction('getStateCodeOptionsByCountryCode').loading || refresh) {
                _this.stateDataPromise = _this.getData(urlBase, "states", "?countryCode=" + countryCode);
                return _this.stateDataPromise;
            }
            return _this.stateDataPromise;
        };
        this.refreshAddressOptions = function (address) {
            _this.getStates(null, address);
            _this.getAddressOptions(null, address);
        };
        this.getStateByStateCode = function (stateCode) {
            if (!angular.isDefined(_this.states) || !angular.isDefined(_this.states.stateCodeOptions) || !angular.isDefined(stateCode)) {
                return;
            }
            for (var state in _this.states.stateCodeOptions) {
                if (_this.states.stateCodeOptions[state].value == stateCode) {
                    return _this.states.stateCodeOptions[state];
                }
            }
        };
        this.getCountryByCountryCode = function (countryCode) {
            if (!angular.isDefined(_this.countries) || !angular.isDefined(_this.countries.countryCodeOptions)) {
                return;
            }
            if (!countryCode) {
                countryCode = 'US';
            }
            for (var country in _this.countries.countryCodeOptions) {
                if (_this.countries.countryCodeOptions[country].value == countryCode) {
                    return _this.countries.countryCodeOptions[country];
                }
            }
        };
        /** accessors for states */
        this.getAddressOptions = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            var urlBase = _this.baseActionPath + 'getAddressOptionsByCountryCode/';
            if (!_this.getRequestByAction('getAddressOptionsByCountryCode') || !_this.getRequestByAction('getAddressOptionsByCountryCode').loading || refresh) {
                _this.addressOptionData = _this.getData(urlBase, "addressOptions", "?countryCode=" + countryCode);
                return _this.addressOptionData;
            }
            return _this.addressOptionData;
        };
        /** accessors for states */
        this.getData = function (url, setter, param) {
            var urlBase = url + param;
            var request = _this.requestService.newPublicRequest(urlBase);
            request.promise.then(function (result) {
                //don't need account and cart for anything other than account and cart calls.
                if (setter.indexOf('account') == -1 || setter.indexOf('cart') == -1) {
                    if (result['account']) {
                        delete result['account'];
                    }
                    if (result['cart']) {
                        delete result['cart'];
                    }
                }
                if (setter == 'cart' || setter == 'account' && _this[setter] && _this[setter].populate) {
                    //cart and account return cart and account info flat
                    _this[setter].populate(result);
                }
                else {
                    //other functions reutrn cart,account and then data
                    if (setter == 'states') {
                        _this[setter] = {};
                        _this.$timeout(function () {
                            _this[setter] = (result);
                        });
                    }
                    else {
                        _this[setter] = (result);
                    }
                }
            }).catch(function (reason) {
            });
            _this.requests[request.getAction()] = request;
            return request.promise;
        };
        /** sets the current shipping address */
        this.setShippingAddress = function (shippingAddress) {
            _this.shippingAddress = shippingAddress;
        };
        /** sets the current shipping address */
        this.setBillingAddress = function (billingAddress) {
            _this.billingAddress = billingAddress;
        };
        /** sets the current billing address */
        this.selectBillingAddress = function (key) {
            if (_this.orderPaymentObject && _this.orderPaymentObject.forms) {
                var address = _this.account.accountAddresses[key].address;
                address.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
                for (var property in address) {
                    for (var form in _this.orderPaymentObject['forms']) {
                        form = _this.orderPaymentObject['forms'][form];
                        if (form['newOrderPayment.billingAddress.' + property] != undefined) {
                            form['newOrderPayment.billingAddress.' + property].$setViewValue(address[property]);
                        }
                    }
                }
                _this.orderPaymentObject.newOrderPayment.billingAddress = address;
            }
        };
        /** this is the generic method used to call all server side actions.
        *  @param action {string} the name of the action (method) to call in the public service.
        *  @param data   {object} the params as key value pairs to pass in the post request.
        *  @return a deferred promise that resolves server response or error. also includes updated account and cart.
        */
        this.doAction = function (action, data, method) {
            //purge angular $ prefixed propertie
            //Prevent sending the same request multiple times in parallel
            if (_this.getRequestByAction(action) && _this.loadingThisRequest(action, data, false))
                return _this.$q.when();
            if (!action) {
                throw "Action is required exception";
            }
            var urlBase = _this.appConfig.baseURL;
            //check if the caller is defining a path to hit, otherwise use the public scope.
            if (action.indexOf(":") !== -1) {
                urlBase = urlBase + action; //any path
            }
            else {
                urlBase = _this.baseActionPath + action; //public path
            }
            if (data) {
                method = "post";
                data.returnJsonObjects = "cart,account";
            }
            else {
                urlBase += (urlBase.indexOf('?') == -1) ? '?' : '&';
                urlBase += "returnJsonObject=cart,account";
            }
            if (method == "post") {
                data.returnJsonObjects = "cart,account";
                //post
                var request_1 = _this.requestService.newPublicRequest(urlBase, data, method);
                request_1.promise.then(function (result) {
                    _this.processAction(result, request_1);
                }).catch(function (response) {
                });
                _this.requests[request_1.getAction()] = request_1;
                return request_1.promise;
            }
            else {
                //get
                var url = urlBase;
                var request_2 = _this.requestService.newPublicRequest(url, data, method);
                request_2.promise.then(function (result) {
                    _this.processAction(result, request_2);
                }).catch(function (reason) {
                });
                _this.requests[request_2.getAction()] = request_2;
                return request_2.promise;
            }
        };
        this.uploadFile = function (action, data) {
            _this.$timeout(function () {
                _this.uploadingFile = true;
            });
            var url = _this.appConfig.baseURL + action;
            var formData = new FormData();
            formData.append("fileName", data.fileName);
            formData.append("uploadFile", data.uploadFile);
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onload = function (result) {
                var response = JSON.parse(xhr.response);
                if (xhr.status === 200) {
                    _this.processAction(response, null);
                    _this.successfulActions = response.successfulActions;
                    _this.failureActions = response.failureActions;
                }
                _this.$timeout(function () {
                    _this.uploadingFile = false;
                });
            };
            xhr.send(formData);
        };
        this.processAction = function (response, request) {
            //Run any specific adjustments needed
            _this.runCheckoutAdjustments(response);
            //if the action that was called was successful, then success is true.
            if (request && request.hasSuccessfulAction()) {
                _this.successfulActions = [];
                for (var action in request.successfulActions) {
                    if (request.successfulActions[action].indexOf('public:cart.placeOrder') !== -1) {
                        _this.$window.location.href = _this.confirmationUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:cart.finalizeCart') !== -1) {
                        _this.$window.location.href = _this.checkoutUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:account.logout') !== -1) {
                        _this.account = _this.$hibachi.newAccount();
                    }
                    _this.successfulActions.push(request.successfulActions[action].split('.')[1]);
                }
            }
            if (request && request.hasFailureAction()) {
                _this.failureActions = [];
                for (var action in request.failureActions) {
                    _this.failureActions.push(request.failureActions[action].split('.')[1]);
                }
            }
            /** update the account and the cart */
            if (response.account) {
                _this.account.populate(response.account);
                _this.account.request = request;
            }
            if (response.cart) {
                _this.cart.populate(response.cart);
                _this.cart.request = request;
            }
            _this.errors = response.errors;
        };
        this.runCheckoutAdjustments = function (response) {
            _this.filterErrors(response);
            if (response.cart) {
                _this.removeInvalidOrderPayments(response.cart);
            }
        };
        this.getRequestByAction = function (action) {
            return _this.requests[action];
        };
        /**
         * Helper methods so that everything in account and cart can be accessed using getters.
         */
        this.userIsLoggedIn = function () {
            return _this.account.userIsLoggedIn();
        };
        this.getActivePaymentMethods = function () {
            var urlString = "/?" + _this.appConfig.action + "=admin:ajax.getActivePaymentMethods";
            var request = _this.requestService.newPublicRequest(urlString)
                .then(function (result) {
                if (angular.isDefined(result.data.paymentMethods)) {
                    _this.paymentMethods = result.data.paymentMethods;
                }
            });
            _this.requests[request.getAction()] = request;
        };
        this.filterErrors = function (response) {
            if (!response || !response.cart || !response.cart.errors)
                return;
            var cartErrors = response.cart.errors;
            if (cartErrors.addOrderPayment) {
                cartErrors.addOrderPayment = cartErrors.addOrderPayment.filter(function (error) { return error != 'billingAddress'; });
            }
        };
        /** Uses getRequestByAction() plus an identifier to distinguish between different functionality using the same route*/
        this.loadingThisRequest = function (action, conditions, strict) {
            var request = _this.getRequestByAction(action);
            if (!request || !request.loading)
                return false;
            for (var identifier in conditions) {
                if (!((conditions[identifier] === true && !strict) || request.data[identifier] == conditions[identifier])) {
                    return false;
                }
            }
            return true;
        };
        this.removeInvalidOrderPayments = function (cart) {
            cart.orderPayments = cart.orderPayments.filter(function (payment) { return !payment.hasErrors; });
        };
        /**
         * Given a payment method name, returns the id.
         */
        this.getPaymentMethodID = function (name) {
            for (var method in _this.paymentMethods) {
                if (_this.paymentMethods[method].paymentMethodName == name && _this.paymentMethods[method].activeFlag == "Yes ") {
                    return _this.paymentMethods[method].paymentMethodID;
                }
            }
        };
        /** Returns a boolean indicating whether or not the order has the named payment method.*/
        this.hasPaymentMethod = function (paymentMethodName) {
            for (var _i = 0, _a = _this.cart.orderPayments; _i < _a.length; _i++) {
                var payment = _a[_i];
                if (payment.paymentMethod.paymentMethodName === paymentMethodName)
                    return true;
            }
            return false;
        };
        this.hasCreditCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Credit Card");
        };
        this.hasPaypalPaymentMethod = function () {
            return _this.hasPaymentMethod("PayPal Express");
        };
        this.hasGiftCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Gift Card");
        };
        this.hasMoneyOrderPaymentMethod = function () {
            return _this.hasPaymentMethod("Money Order");
        };
        this.hasCashPaymentMethod = function () {
            return _this.hasPaymentMethod("Cash");
        };
        /** Returns a boolean indicating whether or not the order has the named fulfillment method.*/
        this.hasFulfillmentMethod = function (fulfillmentMethodName) {
            for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                var fulfillment = _a[_i];
                if (fulfillment.fulfillmentMethod.fulfillmentMethodName === fulfillmentMethodName)
                    return true;
            }
            return false;
        };
        this.hasShippingFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Shipping");
        };
        this.hasEmailFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Email");
        };
        this.hasPickupFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Pickup");
        };
        this.getFulfillmentType = function (fulfillment) {
            return fulfillment.fulfillmentMethod.fulfillmentMethodType;
        };
        this.isShippingFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'shipping';
        };
        this.isEmailFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'email';
        };
        this.isPickupFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'pickup';
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasShippingAddress = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isShippingFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress.addressID);
        };
        this.hasShippingMethodOptions = function (fulfillmentIndex) {
            var shippingMethodOptions = _this.cart.orderFulfillments[fulfillmentIndex].shippingMethodOptions;
            return shippingMethodOptions && shippingMethodOptions.length && (shippingMethodOptions.length > 1 || (shippingMethodOptions[0].value && shippingMethodOptions[0].value.length));
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasPickupLocation = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isPickupFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].pickupLocation);
        };
        /** Returns true if the order requires a fulfillment */
        this.orderRequiresFulfillment = function () {
            return _this.cart.orderRequiresFulfillment();
        };
        /**
         *  Returns true if the order requires a account
         *  Either because the user is not logged in, or because they don't have one.
         *
         */
        this.orderRequiresAccount = function () {
            return _this.cart.orderRequiresAccount();
        };
        /** Returns true if the payment tab should be active */
        this.hasShippingAddressAndMethod = function () {
            return _this.cart.hasShippingAddressAndMethod();
        };
        /**
         * Returns true if the user has an account and is logged in.
         */
        this.hasAccount = function () {
            if (_this.account.accountID) {
                return true;
            }
            return false;
        };
        /** Redirects to the passed in URL
        */
        this.redirectExact = function (url) {
            _this.$window.location.href = url;
        };
        // /** Returns true if a property on an object is undefined or empty. */
        this.isUndefinedOrEmpty = function (object, property) {
            if (!angular.isDefined(object[property]) || object[property] == "") {
                return true;
            }
            return false;
        };
        /** A simple method to return the quantity sum of all orderitems in the cart. */
        this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.cart)) {
                return _this.cart.getOrderItemQuantitySum();
            }
            return totalQuantity;
        };
        /** Returns the index of the state from the list of states */
        this.getSelectedStateIndexFromStateCode = function (stateCode, states) {
            for (var state in states) {
                if (states[state].value == stateCode) {
                    return state;
                }
            }
        };
        /**
         * Returns true if on a mobile device. This is important for placeholders.
         */
        this.isMobile = function () {
            if (_this.$window.innerWidth <= 800 && _this.$window.innerHeight <= 600) {
                return true;
            }
            return false;
        };
        /** returns true if the shipping method option passed in is the selected shipping method
        */
        this.isSelectedShippingMethod = function (option, fulfillmentIndex) {
            // DEPRECATED LOGIC
            if (typeof option === 'number' || typeof option === 'string') {
                var index = option, value = fulfillmentIndex;
                var orderFulfillment = void 0;
                for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                    var fulfillment = _a[_i];
                    if (_this.isShippingFulfillment(fulfillment)) {
                        orderFulfillment = fulfillment;
                    }
                }
                if (_this.cart.fulfillmentTotal &&
                    value == orderFulfillment.shippingMethod.shippingMethodID ||
                    orderFulfillment.shippingMethodOptions.length == 1) {
                    return true;
                }
                return false;
            }
            //NEW LOGIC
            return (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID == option.value) ||
                (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethodOptions.length == 1);
        };
        /** Select a shipping method - temporarily changes the selected method on the front end while awaiting official change from server
        */
        this.selectShippingMethod = function (option, fulfillmentIndex) {
            var data = {
                'shippingMethodID': option.value,
                'fulfillmentID': _this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentID
            };
            _this.doAction('addShippingMethodUsingShippingMethodID', data);
            if (!_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod) {
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod = {};
            }
            _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID = option.value;
        };
        /** Removes promotional code from order*/
        this.removePromoCode = function (code) {
            _this.doAction('removePromotionCode', { promotionCode: code });
        };
        //gets the calcuated total minus the applied gift cards.
        this.getTotalMinusGiftCards = function () {
            var total = _this.getAppliedGiftCardTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Format saved payment method info for display in list*/
        this.formatPaymentMethod = function (paymentMethod) {
            return (paymentMethod.accountPaymentMethodName || paymentMethod.nameOnCreditCard) + ' - ' + paymentMethod.creditCardType + ' *' + paymentMethod.creditCardLastFour + ' exp. ' + ('0' + paymentMethod.expirationMonth).slice(-2) + '/' + paymentMethod.expirationYear.toString().slice(-2);
        };
        this.getOrderItemSkuIDs = function (cart) {
            return cart.orderItems.map(function (item) {
                return item.sku.skuID;
            }).join(',');
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            _this.loading = true;
            if (profileName == undefined) {
                profileName = "medium";
            }
            _this.doAction('getResizedImageByProfileName', { profileName: profileName, skuIds: skuIDs }).then(function (result) {
                if (!angular.isDefined(_this.imagePath)) {
                    _this.imagePath = {};
                }
                if (result.resizedImagePaths) {
                    for (var skuID in result.resizedImagePaths) {
                        _this.imagePath[skuID] = result.resizedImagePaths[skuID];
                    }
                }
            });
        };
        /** Returns the amount total of giftcards added to this order.*/
        this.getPaymentTotals = function () {
            //
            var total = 0;
            for (var index in _this.cart.orderPayments) {
                total = total + Number(_this.cart.orderPayments[index]['amount'].toFixed(2));
            }
            return total;
        };
        /** Gets the calcuated total minus the applied gift cards. */
        this.getTotalMinusPayments = function () {
            var total = _this.getPaymentTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Boolean indicating whether the total balance has been accounted for by order payments.*/
        this.paymentsEqualTotalBalance = function () {
            return _this.getTotalMinusPayments() == 0;
        };
        /**View logic - Opens review panel if no more payments are due.*/
        this.checkIfFinalPayment = function () {
            if ((_this.getRequestByAction('addOrderPayment') && _this.getRequestByAction('addOrderPayment').hasSuccessfulAction() ||
                _this.getRequestByAction('addGiftCardOrderPayment') && _this.getRequestByAction('addGiftCardOrderPayment').hasSuccessfulAction()) && _this.paymentsEqualTotalBalance()) {
                _this.edit = 'review';
            }
        };
        this.getAddressEntity = function (address) {
            var addressEntity = _this.$hibachi.newAddress();
            if (address) {
                for (var key in address) {
                    if (address.hasOwnProperty(key)) {
                        addressEntity[key] = address[key];
                    }
                }
            }
            return addressEntity;
        };
        this.resetRequests = function (request) {
            delete _this.requests[request];
        };
        /** Returns true if the addresses match. */
        this.addressesMatch = function (address1, address2) {
            if (angular.isDefined(address1) && angular.isDefined(address2)) {
                if ((address1.streetAddress == address2.streetAddress &&
                    address1.street2Address == address2.street2Address &&
                    address1.city == address2.city &&
                    address1.postalCode == address2.postalCode &&
                    address1.stateCode == address2.stateCode &&
                    address1.countrycode == address2.countrycode)) {
                    return true;
                }
            }
            return false;
        };
        /**
       *  Returns true when the fulfillment body should be showing
       *  Show if we don't need an account but do need a fulfillment
       *
       */
        this.showFulfillmentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1) && !_this.edit ||
                (_this.edit == 'fulfillment')) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true when the fulfillment body should be showing
         *  Show if we don't need an account,fulfillment, and don't have a payment - or
         *  we have a payment but are editting the payment AND nothing else is being edited
         *
         */
        this.showPaymentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if (((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') != -1) && !_this.edit) ||
                ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.edit == 'payment'))) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true if the review tab body should be showing.
         *  Show if we don't need an account,fulfillment,payment, but not if something else is being edited
         *
         */
        this.showReviewTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&
                ((!_this.edit) || (_this.edit == 'review'))) {
                return true;
            }
            return false;
        };
        /** Returns true if the fulfillment tab should be active */
        this.fulfillmentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'fulfillment') ||
                (!_this.edit && ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1))) {
                return true;
            }
            return false;
        };
        /** Returns true if the payment tab should be active */
        this.paymentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'payment') ||
                (!_this.edit &&
                    (_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('payment') != -1))) {
                return true;
            }
            return false;
        };
        this.isCreatingAccount = function () {
            return !_this.hasAccount() && _this.showCreateAccount;
        };
        this.isSigningIn = function () {
            return !_this.hasAccount() && !_this.showCreateAccount;
        };
        this.loginError = function () {
            if (_this.account.processObjects && _this.account.processObjects.login && _this.account.processObjects.login.hasErrors) {
                return _this.account.processObjects.login.errors.emailAddress['0'];
            }
            ;
        };
        this.createAccountError = function () {
            if (_this.account.processObjects && _this.account.processObjects.create && _this.account.processObjects.create.hasErrors) {
                return _this.account.processObjects.create.errors;
            }
        };
        this.forgotPasswordNotSubmitted = function () {
            return !_this.account.processObjects || (!_this.account.hasErrors && !_this.account.processObjects.forgotPassword);
        };
        this.forgotPasswordSubmitted = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword;
        };
        this.forgotPasswordHasNoErrors = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword && !_this.account.processObjects.forgotPassword.hasErrors;
        };
        this.forgotPasswordError = function () {
            if (_this.forgotPasswordSubmitted() && !_this.forgotPasswordHasNoErrors()) {
                return _this.account.processObjects.forgotPassword.errors.emailAddress['0'];
            }
        };
        /** Consolidate response errors on cart.errors.runPlaceOrderTransaction*/
        this.placeOrderFailure = function () {
            var errors = [];
            for (var key in _this.cart.errors) {
                var errArray = _this.cart.errors[key];
                errors = errors.concat(errArray);
            }
            _this.cart.errors.runPlaceOrderTransaction = errors;
            _this.edit = '';
        };
        /** Returns errors from placeOrder request*/
        this.placeOrderError = function () {
            if (_this.cart.hasErrors && _this.cart.errors.runPlaceOrderTransaction) {
                return _this.cart.errors.runPlaceOrderTransaction;
            }
        };
        /** Returns errors from addOrderPayment request. */
        this.addOrderPaymentError = function () {
            if (_this.cart.errors.addOrderPayment)
                return _this.cart.errors.addOrderPayment;
            if (_this.cart.errors.runPlaceOrderTransaction)
                return _this.cart.errors.runPlaceOrderTransaction;
            return angular.isDefined(_this.errors) ? _this.errors['ADDORDERPAYMENT'] : false;
        };
        /** Returns errors from addBillingAddress request. */
        this.addBillingAddressError = function () {
            if (_this.loadingThisRequest('addOrderPayment', {}, false))
                return false;
            if (_this.errors && _this.errors.copied)
                return _this.addBillingAddressErrors;
            _this.addBillingAddressErrors = _this.cart.errors.addBillingAddress || (angular.isDefined(_this.errors) ? _this.errors['addBillingAddress'] : false);
            if (!_this.billingAddressEditFormIndex && _this.errors && _this.hasFailureAction('addBillingAddress')) {
                var addressProperties = _this.$hibachi.newAddress().data;
                for (var property in _this.errors) {
                    if (addressProperties.hasOwnProperty(property)) {
                        _this.addBillingAddressErrors = _this.addBillingAddressErrors || [];
                        _this.errors[property].forEach(function (error) {
                            _this.addBillingAddressErrors.push(error);
                        });
                    }
                }
                _this.errors.copied = 1;
            }
            return _this.addBillingAddressErrors;
        };
        /** Returns errors from addGiftCard request. */
        this.giftCardError = function () {
            if (_this.cart.processObjects &&
                _this.cart.processObjects.addOrderPayment &&
                _this.cart.processObjects.addOrderPayment.errors &&
                _this.cart.processObjects.addOrderPayment.errors.giftCardID) {
                return _this.cart.processObjects.addOrderPayment.errors.giftCardID[0];
            }
        };
        this.editAccountAddress = function (key, fulfillmentIndex) {
            _this.clearShippingAddressErrors();
            _this.accountAddressEditFormIndex[fulfillmentIndex] = key;
            _this.editingAccountAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
            _this.editingAccountAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
            _this.editingAccountAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
        };
        this.editBillingAddress = function (key, formName) {
            _this.clearMessages();
            _this.billingAddressEditFormIndex = key;
            _this.selectedBillingAddress = null;
            if (formName) {
                _this[formName + 'BillingAddress'] = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this[formName + 'BillingAddress'].accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this[formName + 'BillingAddress'].accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
            else {
                _this.billingAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this.billingAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this.billingAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
        };
        this.clearShippingAddressErrors = function () {
            _this.clearMessages();
            _this.shippingAddressErrors = undefined;
        };
        this.clearMessages = function () {
            _this.successfulActions = [];
            _this.failureActions = [];
        };
        /**Hides shipping address form, clears shipping address errors*/
        this.hideAccountAddressForm = function (fulfillmentIndex) {
            _this.accountAddressEditFormIndex[fulfillmentIndex] = undefined;
        };
        this.hideBillingAddressForm = function () {
            if (_this.billingAddressEditFormIndex != undefined) {
                var index = _this.billingAddressEditFormIndex;
                if (_this.billingAddressEditFormIndex == 'new') {
                    index = _this.account.accountAddresses.length - 1;
                }
                _this.selectBillingAddress(index);
            }
            _this.billingAddressEditFormIndex = undefined;
            _this.billingAddress = {};
        };
        this.editingDifferentAccountAddress = function (fulfillmentIndex) {
            for (var index = 0; index < _this.cart.orderFulfillments.length; index++) {
                if (index !== fulfillmentIndex && _this.accountAddressEditFormIndex[index] != undefined) {
                    return true;
                }
            }
        };
        this.showEditAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] != undefined && _this.accountAddressEditFormIndex[fulfillmentIndex] != 'new';
        };
        this.showNewAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] == 'new';
        };
        this.showNewBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == 'new';
        };
        this.showEditBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex != undefined && _this.billingAddressEditFormIndex != 'new';
        };
        /** Adds errors from response to cart errors.*/
        this.addBillingErrorsToCartErrors = function () {
            var cartErrors = _this.cart.errors;
            if (cartErrors.addOrderPayment) {
                var deleteIndex = cartErrors.addOrderPayment.indexOf('billingAddress');
                if (deleteIndex > -1) {
                    cartErrors.addOrderPayment.splice(deleteIndex, 1);
                }
                if (cartErrors.addOrderPayment.length == 0) {
                    cartErrors.addOrderPayment = null;
                }
            }
            cartErrors.addBillingAddress = [];
            for (var key in _this.errors) {
                _this.cart.errors.addBillingAddress = _this.cart.errors.addBillingAddress.concat(_this.errors[key]);
            }
        };
        this.accountAddressIsSelectedShippingAddress = function (key, fulfillmentIndex) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress &&
                !_this.cart.orderFulfillments[fulfillmentIndex].shippingAddress.hasErrors) {
                return _this.addressesMatch(_this.account.accountAddresses[key].address, _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress);
            }
            return false;
        };
        this.accountAddressIsSelectedBillingAddress = function (key) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.orderPaymentObject &&
                _this.orderPaymentObject.newOrderPayment &&
                _this.orderPaymentObject.newOrderPayment.billingAddress) {
                return _this.account.accountAddresses[key].accountAddressID == _this.orderPaymentObject.newOrderPayment.billingAddress.accountAddressID;
            }
            return false;
        };
        /** Returns true if order requires email fulfillment and email address has been chosen.*/
        this.hasEmailFulfillmentAddress = function (fulfillmentIndex) {
            return Boolean(_this.cart.orderFulfillments[fulfillmentIndex].emailAddress);
        };
        this.getEligiblePaymentMethodsForPaymentMethodType = function (paymentMethodType) {
            return _this.cart.eligiblePaymentMethodDetails.filter(function (paymentMethod) {
                return paymentMethod.paymentMethod.paymentMethodType == paymentMethodType;
            });
        };
        this.getEligibleCreditCardPaymentMethods = function () {
            return _this.getEligiblePaymentMethodsForPaymentMethodType('creditCard');
        };
        this.getPickupLocation = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].pickupLocation;
        };
        this.getShippingAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].data.shippingAddress;
        };
        this.getEmailFulfillmentAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].emailAddress;
        };
        this.getPickupLocations = function () {
            var locations = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'pickup' && fulfillment.pickupLocation && fulfillment.pickupLocation.locationID) {
                    fulfillment.pickupLocation.fulfillmentIndex = index;
                    locations.push(fulfillment.pickupLocation);
                }
            });
            return locations;
        };
        this.getShippingAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'shipping' && fulfillment.data.shippingAddress && fulfillment.data.shippingAddress.addressID) {
                    fulfillment.data.shippingAddress.fulfillmentIndex = index;
                    addresses.push(fulfillment.data.shippingAddress);
                }
            });
            return addresses;
        };
        this.getEmailFulfillmentAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'email' && fulfillment.emailAddress) {
                    fulfillment.fulfillmentIndex = index;
                    addresses.push(fulfillment);
                }
            });
            return addresses;
        };
        /** Returns true if any action in comma-delimited list exists in this.successfulActions */
        this.hasSuccessfulAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.successfulActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        /** Returns true if any action in comma-delimited list exists in this.failureActions */
        this.hasFailureAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.failureActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        this.shippingUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress,addShippingAddress');
        };
        this.shippingMethodUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingMethodUsingShippingMethodID');
        };
        this.updatedBillingAddress = function () {
            return _this.hasSuccessfulAction('updateAddress') && !_this.hasSuccessfulAction('addShippingAddress');
        };
        this.addedBillingAddress = function () {
            return _this.hasSuccessfulAction('addNewAccountAddress') && !_this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');
        };
        this.addedShippingAddress = function () {
            return _this.hasSuccessfulAction('addNewAccountAddress') && _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');
        };
        this.emailFulfillmentUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        this.pickupLocationUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        /** Returns true if selected pickup location has no name.*/
        this.namelessPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return false;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress != undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        /** Returns true if no pickup location has been selected.*/
        this.noPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return true;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress == undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        this.disableContinueToPayment = function () {
            return _this.cart.orderRequirementsList.indexOf('fulfillment') != -1;
        };
        this.hasAccountPaymentMethods = function () {
            return _this.account && _this.account.accountPaymentMethods && _this.account.accountPaymentMethods.length;
        };
        this.showBillingAccountAddresses = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == undefined;
        };
        this.hasNoCardInfo = function () {
            return !_this.newCardInfo || !_this.newCardInfo.nameOnCreditCard || !_this.newCardInfo.cardNumber || !_this.newCardInfo.cvv;
        };
        this.isGiftCardPayment = function (payment) {
            return payment.giftCard && payment.giftCard.giftCardCode;
        };
        this.isPurchaseOrderPayment = function (payment) {
            return payment.purchaseOrderNumber;
        };
        //Not particularly robust, needs to be modified for each project
        this.isCheckOrMoneyOrderPayment = function (payment) {
            return payment.paymentMethod.paymentMethodName == "Check or Money Order";
        };
        this.orderHasNoPayments = function () {
            var activePayments = _this.cart.orderPayments.filter(function (payment) { return payment.amount != 0; });
            return !activePayments.length;
        };
        this.hasProductNameAndNoSkuName = function (orderItem) {
            return !orderItem.sku.skuName && orderItem.sku.product && orderItem.sku.product.productName;
        };
        this.cartHasNoItems = function () {
            return !_this.getRequestByAction('getCart').loading && _this.hasAccount() && _this.cart && _this.cart.orderItems && !_this.cart.orderItems.length && !_this.loading && !_this.orderPlaced;
        };
        this.hasAccountAndCartItems = function () {
            return _this.hasAccount() && !_this.cartHasNoItems();
        };
        this.hideStoreSelector = function (fulfillmentIndex) {
            _this.showStoreSelector[fulfillmentIndex] = false;
        };
        this.hideEmailSelector = function (fulfillmentIndex) {
            _this.showEmailSelector[fulfillmentIndex] = false;
        };
        this.incrementItemQuantity = function (orderItem, amount) {
            if (amount === void 0) { amount = 1; }
            orderItem.quantity += amount;
            if (orderItem.quantity < 0) {
                orderItem.quantity = 0;
            }
            _this.updateOrderItemQuantity(orderItem);
        };
        this.updateOrderItemQuantity = function (event) {
            event.swForm.submit();
        };
        this.getOrderAttributeValues = function (allowedAttributeSets) {
            var attributeValues = {};
            var orderAttributeModel = JSON.parse(localStorage.attributeMetaData)["Order"];
            for (var attributeSetCode in orderAttributeModel) {
                var attributeSet = orderAttributeModel[attributeSetCode];
                if (allowedAttributeSets.indexOf(attributeSetCode) !== -1) {
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attributeValues[attribute.attributeCode] = {
                            attributeCode: attribute.attributeCode,
                            attributeName: attribute.attributeName,
                            attributeValue: _this.cart[attribute.attributeCode],
                            inputType: attribute.attributeInputType,
                            requiredFlag: attribute.requiredFlag
                        };
                    }
                }
            }
            return attributeValues;
        };
        this.binder = function (self, fn) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return fn.bind.apply(fn, [self].concat(args));
        };
        /*********************************************************************************/
        /*******************                                    **************************/
        /*******************         DEPRECATED METHODS         **************************/
        /*******************                                    **************************/
        /*********************************************************************************/
        /** DEPRECATED
        */
        this.getSelectedShippingIndex = function (index, value) {
            for (var i = 0; i <= this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length; i++) {
                if (this.cart.fulfillmentTotal == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge) {
                    return i;
                }
            }
        };
        /** simple validation just to ensure data is present and accounted for.
        */
        this.validateNewOrderPayment = function (newOrderPayment) {
            var newOrderPaymentErrors = {};
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.streetAddress')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.countrycode')) {
                newOrderPaymentErrors['countrycode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                    newOrderPaymentErrors['statecode'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                    newOrderPaymentErrors['city'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                    newOrderPaymentErrors['locality'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.postalcode')) {
                newOrderPaymentErrors['postalCode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.nameOnCreditCard')) {
                newOrderPaymentErrors['nameOnCreditCard'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationMonth')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationYear')) {
                newOrderPaymentErrors['expirationYear'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.creditCardNumber')) {
                newOrderPaymentErrors['creditCardNumber'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.securityCode')) {
                newOrderPaymentErrors['securityCode'] = 'Required *';
            }
            if (Object.keys(newOrderPaymentErrors).length) {
                //this.cart.orderPayments.hasErrors = true;
                //this.cart.orderPayments.errors = newOrderPaymentErrors;
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPayment = function (formdata) {
            //reset the form errors.
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            var processObject = _this.orderService.newOrder_AddOrderPayment();
            data = {
                'newOrderPayment.billingAddress.addressID': '',
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCreditCard,
                'newOrderPayment.billingAddress.name': billingAddress.nameOnCreditCard,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //processObject.populate(data);
            //Make sure we have required fields for a newOrderPayment.
            _this.validateNewOrderPayment(data);
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.doAction('addOrderPayment', data, 'post').then(function (result) {
                var serverData = result;
                if (serverData.cart.hasErrors || angular.isDefined(_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors']) && !_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors'].hasErrors) {
                    _this.cart.hasErrors = true;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
                else {
                    _this.editPayment = false;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
            });
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addGiftCardOrderPayments = function (redeemGiftCardToAccount) {
            //reset the form errors.
            _this.cart.hasErrors = false;
            _this.cart.orderPayments.errors = {};
            _this.cart.orderPayments.hasErrors = false;
            //Grab all the data
            var giftCards = _this.account.giftCards;
            var data = {};
            data = {
                'newOrderPayment.paymentMethod.paymentMethodID': '50d8cd61009931554764385482347f3a',
                'newOrderPayment.redeemGiftCardToAccount': redeemGiftCardToAccount,
            };
            //add the amounts from the gift cards
            for (var card in giftCards) {
                if (giftCards[card].applied == true) {
                    data['newOrderPayment.giftCardNumber'] = giftCards[card].giftCardCode;
                    if (giftCards[card].calculatedTotal < _this.cart.calculatedTotal) {
                        data['newOrderPayment.amount'] = giftCards[card].calculatedBalanceAmount; //will use once we have amount implemented.
                    }
                    else {
                        data['newOrderPayment.amount'] = _this.cart.calculatedTotal; //this is so it doesn't throw the 100% error
                    }
                    data['copyFromType'] = "";
                    //Post the new order payment and set errors as needed.
                    _this.$q.all([_this.doAction('addOrderPayment', data, 'post')]).then(function (result) {
                        var serverData;
                        if (angular.isDefined(result['0'])) {
                            serverData = result['0'].data;
                        }
                        if (serverData.cart.hasErrors || angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length - 1]['errors']) && !this.cart.orderPayments['' + (this.cart.orderPayments.length - 1)]['errors'].hasErrors) {
                            this.cart.hasErrors = true;
                            this.readyToPlaceOrder = true;
                            this.edit = '';
                        }
                        else {
                        }
                    });
                }
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPaymentAndPlaceOrder = function (formdata) {
            //reset the form errors.
            _this.orderPlaced = false;
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            data = {
                'orderid': _this.cart.orderID,
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCard || accountFirst + ' ' + accountLast,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //Make sure we have required fields for a newOrderPayment.
            //this.validateNewOrderPayment( data );
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.$q.all([_this.doAction('addOrderPayment,placeOrder', data, 'post')]).then(function (result) {
                var serverData;
                if (angular.isDefined(result['0'])) {
                    serverData = result['0'].data;
                }
                else {
                } //|| angular.isDefined(serverData.cart.orderPayments[serverData.cart.orderPayments.length-1]['errors']) && slatwall.cart.orderPayments[''+slatwall.cart.orderPayments.length-1]['errors'].hasErrors
                if (serverData.cart.hasErrors || (angular.isDefined(serverData.failureActions) && serverData.failureActions.length && serverData.failureActions[0] == "public:cart.addOrderPayment")) {
                    if (serverData.failureActions.length) {
                        for (var action in serverData.failureActions) {
                            //
                        }
                    }
                    this.edit = '';
                    return true;
                }
                else if (serverData.successfulActions.length) {
                    //
                    this.cart.hasErrors = false;
                    this.editPayment = false;
                    this.edit = '';
                    for (var action in serverData.successfulActions) {
                        //
                        if (serverData.successfulActions[action].indexOf("placeOrder") != -1) {
                            //if there are no errors then redirect.
                            this.orderPlaced = true;
                            this.redirectExact('/order-confirmation/');
                        }
                    }
                }
                else {
                    this.edit = '';
                }
            });
        };
        //Applies a giftcard from the user account onto the payment.
        this.applyGiftCard = function (giftCardCode) {
            _this.finding = true;
            //find the code already on the account.
            var found = false;
            for (var giftCard in _this.account.giftCards) {
                if (_this.account.giftCards[giftCard].balanceAmount == 0) {
                    _this.account.giftCards[giftCard]['error'] = "The balance is $0.00 for this card.";
                    found = false;
                }
                if (_this.account.giftCards[giftCard].giftCardCode == giftCardCode) {
                    _this.account.giftCards[giftCard].applied = true;
                    found = true;
                }
            }
            if (found) {
                _this.finding = false;
                _this.addGiftCardOrderPayments(false);
            }
            else {
                _this.finding = false;
                _this.addGiftCardOrderPayments(true);
            }
        };
        //returns the amount total of giftcards added to this account.
        this.getAppliedGiftCardTotals = function () {
            //
            var total = 0;
            for (var payment in _this.cart.orderPayments) {
                if (_this.cart.orderPayments[payment].giftCardNumber != "") {
                    total = total + parseInt(_this.cart.orderPayments[payment]['amount']);
                }
            }
            return total;
        };
        this.orderService = orderService;
        this.cartService = cartService;
        this.accountService = accountService;
        this.requestService = requestService;
        this.appConfig = appConfig;
        this.baseActionPath = this.appConfig.baseURL + "/index.cfm/api/scope/"; //default path
        this.confirmationUrl = "/order-confirmation";
        this.checkoutUrl = "/checkout";
        this.$http = $http;
        this.$location = $location;
        this.$q = $q;
        this.$injector = $injector;
        this.getExpirationYears();
        this.$window = $window;
        this.$hibachi = $hibachi;
        this.cart = this.cartService.newCart();
        this.account = this.accountService.newAccount();
        this.observerService = observerService;
        this.$timeout = $timeout;
    }
    PublicService.prototype.getOrderFulfillmentItemList = function (fulfillmentIndex) {
        return this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentItems.map(function (item) { return item.sku.skuName ? item.sku.skuName : item.sku.product.productName; }).join(', ');
    };
    //Use with bind, assigning 'this' as the temporary order item
    //a.k.a. slatwall.bind(tempOrderItem,slatwall.copyOrderItem,originalOrderItem);
    //gets you tempOrderItem.orderItem == originalOrderItem;
    PublicService.prototype.copyOrderItem = function (orderItem) {
        this.orderItem = { orderItemID: orderItem.orderItemID,
            quantity: orderItem.quantity };
        return this;
    };
    return PublicService;
}());
exports.PublicService = PublicService;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var AccountService = /** @class */ (function (_super) {
    __extends(AccountService, _super);
    //@ngInject
    function AccountService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Account') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return AccountService;
}(baseentityservice_1.BaseEntityService));
exports.AccountService = AccountService;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var account_1 = __webpack_require__(82);
exports.Account = account_1.Account;
var address_1 = __webpack_require__(83);
exports.Address = address_1.Address;
var cart_1 = __webpack_require__(84);
exports.Cart = cart_1.Cart;
var orderitem_1 = __webpack_require__(85);
exports.OrderItem = orderitem_1.OrderItem;
var orderpayment_1 = __webpack_require__(86);
exports.OrderPayment = orderpayment_1.OrderPayment;
var sku_1 = __webpack_require__(87);
exports.Sku = sku_1.Sku;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(12);
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.giftCards = [];
        _this.userIsLoggedIn = function () {
            if (_this.accountID !== '') {
                return true;
            }
            return false;
        };
        return _this;
    }
    return Account;
}(baseentity_1.BaseEntity));
exports.Account = Account;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(12);
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address($injector) {
        return _super.call(this, $injector) || this;
    }
    return Address;
}(baseentity_1.BaseEntity));
exports.Address = Address;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(12);
var Cart = /** @class */ (function (_super) {
    __extends(Cart, _super);
    //deprecated
    function Cart($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.orderRequirementsList = "";
        _this.orderPayments = [];
        _this.orderItems = [];
        _this.orderFulfillments = [];
        _this.hasShippingAddressAndMethod = function () {
            if (_this.orderRequirementsList.indexOf('fulfillment') == -1) {
                return true;
            }
            return false;
        };
        _this.orderRequiresAccount = function () {
            if (_this.orderRequirementsList.indexOf('account') != -1 || !_this.account.accountID) {
                return true;
            }
            return false;
        };
        _this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.orderItems)) {
                for (var orderItem in _this.orderItems) {
                    totalQuantity = totalQuantity + _this.orderItems[orderItem].quantity;
                }
                return totalQuantity;
            }
            return totalQuantity;
        };
        return _this;
    }
    return Cart;
}(baseentity_1.BaseEntity));
exports.Cart = Cart;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var baseentity_1 = __webpack_require__(12);
var OrderItem = /** @class */ (function (_super) {
    __extends(OrderItem, _super);
    function OrderItem($injector) {
        return _super.call(this, $injector) || this;
    }
    return OrderItem;
}(baseentity_1.BaseEntity));
exports.OrderItem = OrderItem;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var OrderPayment = /** @class */ (function () {
    function OrderPayment() {
    }
    return OrderPayment;
}());
exports.OrderPayment = OrderPayment;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(12);
var Sku = /** @class */ (function (_super) {
    __extends(Sku, _super);
    function Sku($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.setNewQOH = function (value) {
            _this.newQOH = value;
        };
        _this.getNewQOH = function () {
            return _this.newQOH;
        };
        return _this;
    }
    return Sku;
}(baseentity_1.BaseEntity));
exports.Sku = Sku;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var order_addorderpayment_1 = __webpack_require__(89);
exports.Order_AddOrderPayment = order_addorderpayment_1.Order_AddOrderPayment;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseprocess_1 = __webpack_require__(90);
var Order_AddOrderPayment = /** @class */ (function (_super) {
    __extends(Order_AddOrderPayment, _super);
    function Order_AddOrderPayment($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        return _this;
    }
    return Order_AddOrderPayment;
}(baseprocess_1.BaseProcess));
exports.Order_AddOrderPayment = Order_AddOrderPayment;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(25);
var BaseProcess = /** @class */ (function (_super) {
    __extends(BaseProcess, _super);
    function BaseProcess($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseProcess;
}(basetransient_1.BaseTransient));
exports.BaseProcess = BaseProcess;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(41);
var AdminRequest = /** @class */ (function (_super) {
    __extends(AdminRequest, _super);
    function AdminRequest(url, data, method, headers, $injector, observerService) {
        if (method === void 0) { method = "post"; }
        if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            //identify that it is an object save
            if (url.indexOf('api:main.post') != -1 && data.entityName) {
                var eventNameBase = data.entityName + data.context.charAt(0).toUpperCase() + data.context.slice(0);
                if (result.errors) {
                    _this.observerService.notify(eventNameBase + 'Failure', result.data);
                }
                else {
                    _this.observerService.notify(eventNameBase + 'Success', result.data);
                }
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return AdminRequest;
}(request_1.Request));
exports.AdminRequest = AdminRequest;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(41);
var PublicRequest = /** @class */ (function (_super) {
    __extends(PublicRequest, _super);
    function PublicRequest(url, data, method, headers, $injector, observerService) {
        if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.failureActions = [];
        _this.successfulActions = [];
        _this.messages = [];
        _this.hasSuccessfulAction = function () {
            return _this.successfulActions.length > 0;
        };
        _this.hasFailureAction = function () {
            return _this.failureActions.length > 0;
        };
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            _this.successfulActions = result.successfulActions;
            for (var i in _this.successfulActions) {
                var successfulAction = _this.successfulActions[i];
                _this.observerService.notify(successfulAction.split('.')[1] + 'Success', result.data);
            }
            _this.failureActions = result.failureActions;
            for (var i in _this.failureActions) {
                var failureAction = _this.failureActions[i];
                _this.observerService.notify(failureAction.split('.')[1] + 'Failure', result.data);
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return PublicRequest;
}(request_1.Request));
exports.PublicRequest = PublicRequest;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var CartService = /** @class */ (function (_super) {
    __extends(CartService, _super);
    //@ngInject
    //@ngInject
    function CartService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order', 'Cart') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return CartService;
}(baseentityservice_1.BaseEntityService));
exports.CartService = CartService;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var DraggableService = /** @class */ (function () {
    //ngInject
    function DraggableService() {
    }
    DraggableService.prototype.isDropAllowed = function (event) {
        //todo implement
        return true;
    };
    DraggableService.prototype.isMouseInFirstHalf = function (event, targetNode, relativeToParent, horizontal) {
        var mousePointer = horizontal ? (event.offsetX || event.layerX)
            : (event.offsetY || event.layerY);
        var targetSize = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;
        var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;
        targetPosition = relativeToParent ? targetPosition : 0;
        return mousePointer < targetPosition + targetSize / 2;
    };
    DraggableService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], DraggableService);
    return DraggableService;
}());
exports.DraggableService = DraggableService;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(27);
var core_1 = __webpack_require__(0);
var observerservice_1 = __webpack_require__(8);
var SelectionService = /** @class */ (function (_super) {
    __extends(SelectionService, _super);
    function SelectionService(observerService) {
        var _this = _super.call(this) || this;
        _this.observerService = observerService;
        _this._selection = {};
        return _this;
    }
    /* add current selectionid to main selection object*/
    SelectionService.prototype.createSelections = function (selectionid) {
        this._selection[selectionid] = {
            allSelected: false,
            ids: []
        };
    };
    ;
    SelectionService.prototype.radioSelection = function (selectionid, selection) {
        this.createSelections(selectionid);
        this._selection[selectionid].ids.push(selection);
        this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
        this.getSelections(selectionid);
        this.getSelectionCount(selectionid);
    };
    ;
    SelectionService.prototype.addSelection = function (selectionid, selection) {
        /*if allSelected flag is true addSelection will remove selection*/
        if (this.isAllSelected(selectionid)) {
            var index = this._selection[selectionid].ids.indexOf(selection);
            if (index > -1) {
                this._selection[selectionid].ids.splice(index, 1);
                this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
            }
        }
        else if (!this.hasSelection(selectionid, selection)) {
            this._selection[selectionid].ids.push(selection);
            this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
        }
        console.info(this._selection[selectionid]);
    };
    ;
    SelectionService.prototype.setSelection = function (selectionid, selections) {
        if (angular.isUndefined(this._selection[selectionid])) {
            this.createSelections(selectionid);
        }
        this._selection[selectionid].ids = selections;
    };
    ;
    SelectionService.prototype.removeSelection = function (selectionid, selection) {
        if (angular.isUndefined(this._selection[selectionid])) {
            return;
        }
        if (!this.isAllSelected(selectionid)) {
            var index = this._selection[selectionid].ids.indexOf(selection);
            if (index > -1) {
                this._selection[selectionid].ids.splice(index, 1);
                this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
            }
            /*if allSelected flag is true removeSelection will add selection*/
        }
        else if (!this.hasSelection(selectionid, selection)) {
            this._selection[selectionid].ids.push(selection);
            this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
        }
        console.info(this._selection[selectionid]);
    };
    ;
    SelectionService.prototype.hasSelection = function (selectionid, selection) {
        if (angular.isUndefined(this._selection[selectionid])) {
            return false;
        }
        return this._selection[selectionid].ids.indexOf(selection) > -1;
    };
    ;
    SelectionService.prototype.getSelections = function (selectionid) {
        if (angular.isUndefined(this._selection[selectionid])) {
            this.createSelections(selectionid);
        }
        return this._selection[selectionid].ids;
    };
    ;
    SelectionService.prototype.getSelectionCount = function (selectionid) {
        if (angular.isUndefined(this._selection[selectionid])) {
            this.createSelections(selectionid);
        }
        return this._selection[selectionid].ids.length;
    };
    ;
    SelectionService.prototype.clearSelection = function (selectionid) {
        this.createSelections(selectionid);
        this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'clear' });
        console.info(this._selection[selectionid]);
    };
    ;
    SelectionService.prototype.selectAll = function (selectionid) {
        this._selection[selectionid] = {
            allSelected: true,
            ids: []
        };
        this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'selectAll' });
        console.info(this._selection[selectionid]);
    };
    ;
    SelectionService.prototype.isAllSelected = function (selectionid) {
        if (angular.isUndefined(this._selection[selectionid])) {
            this.createSelections(selectionid);
        }
        return this._selection[selectionid].allSelected;
    };
    SelectionService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [observerservice_1.ObserverService])
    ], SelectionService);
    return SelectionService;
}(baseservice_1.BaseService));
exports.SelectionService = SelectionService;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var OrderService = /** @class */ (function (_super) {
    __extends(OrderService, _super);
    //@ngInject
    function OrderService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.newOrder_AddOrderPayment = function () {
            return _this.newProcessObject('Order_AddOrderPayment');
        };
        return _this;
    }
    return OrderService;
}(baseentityservice_1.BaseEntityService));
exports.OrderService = OrderService;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var OrderPaymentService = /** @class */ (function (_super) {
    __extends(OrderPaymentService, _super);
    //@ngInject
    function OrderPaymentService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'OrderPayment') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return OrderPaymentService;
}(baseentityservice_1.BaseEntityService));
exports.OrderPaymentService = OrderPaymentService;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var FilterService = /** @class */ (function () {
    //ngInject
    function FilterService() {
    }
    FilterService.prototype.filterMatch = function (valueToCompareAgainst, comparisonOperator, comparisonValue) {
        switch (comparisonOperator) {
            case "!=":
                if (valueToCompareAgainst != comparisonValue) {
                    return true;
                }
                break;
            case ">":
                if (valueToCompareAgainst > comparisonValue) {
                    return true;
                }
                break;
            case ">=":
                if (valueToCompareAgainst >= comparisonValue) {
                    return true;
                }
                break;
            case "<":
                if (valueToCompareAgainst < comparisonValue) {
                    return true;
                }
                break;
            case "<=":
                if (valueToCompareAgainst <= comparisonValue) {
                    return true;
                }
                break;
            case "is":
                if (valueToCompareAgainst == comparisonValue) {
                    return true;
                }
                break;
            case "is not":
                if (valueToCompareAgainst != comparisonValue) {
                    return true;
                }
                break;
            default:
                //= case
                if (valueToCompareAgainst == comparisonValue) {
                    return true;
                }
                break;
        }
        return false;
    };
    FilterService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], FilterService);
    return FilterService;
}());
exports.FilterService = FilterService;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var ExpandableService = /** @class */ (function () {
    //ngInject
    function ExpandableService() {
        this.recordStates = {};
    }
    ExpandableService.prototype.addRecord = function (recordID, state) {
        if (angular.isUndefined(state)) {
            state = { isLoaded: true };
        }
        this.recordStates[recordID] = state;
    };
    ExpandableService.prototype.updateState = function (recordID, state) {
        if (angular.isUndefined(this.recordStates[recordID])) {
            this.recordStates[recordID] = {};
        }
        for (var key in state) {
            this.recordStates[recordID][key] = state[key];
        }
    };
    ExpandableService.prototype.getState = function (recordID, key) {
        if (angular.isDefined(this.recordStates[recordID]) && angular.isDefined(key)) {
            var dataToReturn = this.recordStates[recordID][key];
        }
        else {
            var dataToReturn = this.recordStates[recordID];
        }
        if (angular.isDefined(dataToReturn)) {
            return dataToReturn;
        }
        return false;
    };
    ExpandableService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], ExpandableService);
    return ExpandableService;
}());
exports.ExpandableService = ExpandableService;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var MetaDataService = /** @class */ (function () {
    function MetaDataService($filter, $log) {
        var _this = this;
        this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        this.$filter = $filter;
        this.$log = $log;
        this._propertiesList = {};
        this._orderBy = $filter('orderBy');
    }
    MetaDataService.prototype.getPropertyHintByObjectAndPropertyIdentifier = function (object, propertyIdentifier) {
        var hint = "";
        if (this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
            if (this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                hint = object.metaData && object.metaData[propertyIdentifier].attributeHint;
            }
            else {
                hint = object.metaData.$$getPropertyHint(propertyIdentifier);
            }
        }
        return hint;
    };
    MetaDataService.prototype.getPropertyTitle = function (object, propertyIdentifier) {
        var title = "";
        if (this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
            if (this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                title = object.metaData && object.metaData[propertyIdentifier].attributeName;
            }
            else {
                title = object.metaData.$$getPropertyTitle(propertyIdentifier);
            }
        }
        return title;
    };
    MetaDataService.prototype.getPropertyFieldType = function (object, propertyIdentifier) {
        var fieldType = "";
        if (this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
            if (this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                fieldType = object.metaData && object.metaData[propertyIdentifier].attributeInputType;
            }
            else {
                fieldType = object.metaData.$$getPropertyFieldType(propertyIdentifier);
            }
        }
        return fieldType;
    };
    MetaDataService.prototype.isAttributePropertyByEntityAndPropertyIdentifier = function (object, propertyIdentifier) {
        return object.metaData && object.metaData[propertyIdentifier] && object.metaData[propertyIdentifier].attributeCode == propertyIdentifier;
    };
    MetaDataService.prototype.hasPropertyByEntityNameAndPropertyIdentifier = function (object, propertyIdentifier) {
        return object.metaData && object.metaData[propertyIdentifier];
    };
    MetaDataService.prototype.getPropertiesList = function () {
        return this._propertiesList;
    };
    MetaDataService.prototype.getPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
        return this._propertiesList[baseEntityAlias];
    };
    MetaDataService.prototype.setPropertiesList = function (value, key) {
        this._propertiesList[key] = value;
    };
    MetaDataService.prototype.formatPropertiesList = function (propertiesList, propertyIdentifier) {
        if (!propertiesList) {
            propertiesList = {};
        }
        if (!propertiesList.data) {
            propertiesList.data = [];
        }
        var simpleGroup = {
            $$group: 'simple',
        };
        propertiesList.data.push(simpleGroup);
        var drillDownGroup = {
            $$group: 'drilldown',
        };
        propertiesList.data.push(drillDownGroup);
        var compareCollections = {
            $$group: 'compareCollections',
        };
        propertiesList.data.push(compareCollections);
        var attributeCollections = {
            $$group: 'attribute',
        };
        propertiesList.data.push(attributeCollections);
        for (var i in propertiesList.data) {
            if (angular.isDefined(propertiesList.data[i].ormtype)) {
                if (angular.isDefined(propertiesList.data[i].attributeID)) {
                    propertiesList.data[i].$$group = 'attribute';
                }
                else {
                    propertiesList.data[i].$$group = 'simple';
                }
            }
            if (angular.isDefined(propertiesList.data[i].fieldtype)) {
                if (propertiesList.data[i].fieldtype === 'id') {
                    propertiesList.data[i].$$group = 'simple';
                }
                if (propertiesList.data[i].fieldtype === 'many-to-one') {
                    propertiesList.data[i].$$group = 'drilldown';
                }
                if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {
                    propertiesList.data[i].$$group = 'compareCollections';
                }
            }
            var divider = '_';
            if (propertiesList.data[i].$$group == 'simple' || propertiesList.data[i].$$group == 'attribute') {
                divider = '.';
            }
            propertiesList.data[i].propertyIdentifier = propertyIdentifier + divider + propertiesList.data[i].name;
        }
        //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);
        //--------------------------------Removes empty lines from dropdown.
        var temp = [];
        for (var i_1 = 0; i_1 <= propertiesList.data.length - 1; i_1++) {
            if (propertiesList.data[i_1].propertyIdentifier.indexOf(".undefined") != -1 || propertiesList.data[i_1].propertyIdentifier.indexOf("_undefined") != -1) {
                this.$log.debug("removing: " + propertiesList.data[i_1].displayPropertyIdentifier);
                propertiesList.data[i_1].displayPropertyIdentifier = "hide";
            }
            else {
                temp.push(propertiesList.data[i_1]);
                this.$log.debug(propertiesList.data[i_1]);
            }
        }
        temp.sort;
        propertiesList.data = temp;
        this.$log.debug("----------------------PropertyList\n\n\n\n\n");
        propertiesList.data = this._orderBy(propertiesList.data, ['propertyIdentifier'], false);
        //--------------------------------End remove empty lines.
    };
    MetaDataService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$filter')),
        __param(1, core_1.Inject('$log')),
        __metadata("design:paramtypes", [Object, Object])
    ], MetaDataService);
    return MetaDataService;
}());
exports.MetaDataService = MetaDataService;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../../../../../node_modules/typescript/lib/lib.es6.d.ts" />
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var TypeaheadStore = __webpack_require__(45);
var core_1 = __webpack_require__(0);
var observerservice_1 = __webpack_require__(8);
var TypeaheadService = /** @class */ (function () {
    //@ngInject
    function TypeaheadService($timeout, observerService) {
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.typeaheadData = {};
        this.typeaheadPromises = {};
        //The state of the store
        this.typeaheadStates = {};
        this.state = {
            typeaheadInstances: this.typeaheadStates
        };
        this.typeaheadStore = new TypeaheadStore.IStore(this.state, this.typeaheadStateReducer); //.combineLatest(this.loggerEpic)
    }
    /**
     * The reducer is responsible for modifying the state of the state object into a new state.
     */
    TypeaheadService.prototype.typeaheadStateReducer = function (state, action) {
        switch (action.type) {
            case 'TYPEAHEAD_QUERY':
                //modify the state.
                return __assign({}, state, { action: action });
            case 'TYPEAHEAD_USER_SELECTION':
                //passthrough - no state change. anyone subscribed can handle this.
                return __assign({}, state, { action: action });
            default:
                return state;
        }
    };
    TypeaheadService.prototype.getTypeaheadSelectionUpdateEvent = function (key) {
        return "typeaheadSelectionUpdated" + key;
    };
    TypeaheadService.prototype.attachTypeaheadSelectionUpdateEvent = function (key, callback) {
        this.observerService.attach(callback, this.getTypeaheadSelectionUpdateEvent(key));
    };
    TypeaheadService.prototype.notifyTypeaheadSelectionUpdateEvent = function (key, data) {
        this.observerService.notify(this.getTypeaheadSelectionUpdateEvent(key), data);
    };
    TypeaheadService.prototype.setTypeaheadState = function (key, state) {
        this.typeaheadStates[key] = state;
    };
    TypeaheadService.prototype.getTypeaheadState = function (key) {
        return this.typeaheadStates[key];
    };
    TypeaheadService.prototype.getTypeaheadPrimaryIDPropertyName = function (key) {
        return this.getTypeaheadState(key).primaryIDPropertyName;
    };
    TypeaheadService.prototype.getIndexOfSelection = function (key, data) {
        for (var j = 0; j < this.getData(key).length; j++) {
            if (angular.isDefined(data[this.getTypeaheadPrimaryIDPropertyName(key)]) &&
                data[this.getTypeaheadPrimaryIDPropertyName(key)] == this.getData(key)[j][this.getTypeaheadPrimaryIDPropertyName(key)]) {
                return j;
            }
            else if (this.checkAgainstFallbackProperties(key, this.getData(key)[j], data)) {
                return j;
            }
        }
        return -1;
    };
    TypeaheadService.prototype.addSelection = function (key, data) {
        if (angular.isUndefined(this.typeaheadData[key])) {
            this.typeaheadData[key] = [];
        }
        this.typeaheadData[key].push(data);
        this.notifyTypeaheadSelectionUpdateEvent(key, data);
    };
    TypeaheadService.prototype.removeSelection = function (key, index, data) {
        if (angular.isUndefined(index) &&
            angular.isDefined(data)) {
            index = this.getIndexOfSelection(key, data);
        }
        if (angular.isDefined(index) &&
            angular.isDefined(this.typeaheadData[key]) &&
            index != -1) {
            this.updateSelections(key);
            var removedItem = this.typeaheadData[key].splice(index, 1)[0]; //this will always be an array of 1 element
            this.notifyTypeaheadSelectionUpdateEvent(key, removedItem);
            return removedItem;
        }
    };
    TypeaheadService.prototype.initializeSelections = function (key, selectedCollectionConfig) {
        var _this = this;
        selectedCollectionConfig.setAllRecords(true);
        this.typeaheadPromises[key] = selectedCollectionConfig.getEntity();
        this.typeaheadPromises[key].then(function (data) {
            for (var j = 0; j < data.records.length; j++) {
                _this.addSelection(key, data.records[j]);
            }
        }, function (reason) {
            throw ("typeaheadservice had trouble intializing selections for " + key + " because " + reason);
        });
    };
    TypeaheadService.prototype.updateSelections = function (key) {
        if (angular.isDefined(this.getData(key)) && this.getData(key).length) {
            for (var j = 0; j < this.getTypeaheadState(key).results.length; j++) {
                for (var i = 0; i < this.getData(key).length; i++) {
                    if (this.getData(key)[i][this.getTypeaheadPrimaryIDPropertyName(key)] == this.getTypeaheadState(key).results[j][this.getTypeaheadPrimaryIDPropertyName(key)]) {
                        this.markResultSelected(this.getTypeaheadState(key).results[j], i);
                        break;
                    }
                    var found = this.checkAgainstFallbackProperties(key, this.getData(key)[i], this.getTypeaheadState(key).results[j], i);
                    if (found) {
                        break;
                    }
                }
            }
        }
    };
    TypeaheadService.prototype.markResultSelected = function (result, index) {
        result.selected = true;
        result.selectedIndex = index;
    };
    TypeaheadService.prototype.checkAgainstFallbackProperties = function (key, selection, result, selectionIndex) {
        var resultPrimaryID = result[this.getTypeaheadPrimaryIDPropertyName(key)];
        //is there a singular property to compare against
        if (angular.isDefined(this.getTypeaheadState(key).propertyToCompare) &&
            this.getTypeaheadState(key).propertyToCompare.length) {
            if (angular.isDefined(selection[this.getTypeaheadState(key).propertyToCompare]) &&
                selection[this.getTypeaheadState(key).propertyToCompare] == resultPrimaryID) {
                if (angular.isDefined(selectionIndex)) {
                    this.markResultSelected(result, selectionIndex);
                }
                return true;
            }
            if (angular.isDefined(selection[this.getTypeaheadState(key).propertyToCompare]) &&
                angular.isDefined(result[this.getTypeaheadState(key).propertyToCompare]) &&
                selection[this.getTypeaheadState(key).propertyToCompare] == result[this.getTypeaheadState(key).propertyToCompare]) {
                if (angular.isDefined(selectionIndex)) {
                    this.markResultSelected(result, selectionIndex);
                }
                return true;
            }
        }
        //check the defined fallback properties to see if theres a match
        if (this.getTypeaheadState(key).fallbackPropertyArray.length > 0) {
            for (var j = 0; j < this.getTypeaheadState(key).fallbackPropertyArray.length; j++) {
                var property = this.getTypeaheadState(key).fallbackPropertyArray[j];
                if (angular.isDefined(selection[property])) {
                    if (selection[property] == resultPrimaryID) {
                        if (angular.isDefined(selectionIndex)) {
                            this.markResultSelected(result, selectionIndex);
                        }
                        return true;
                    }
                    if (angular.isDefined(result[property]) &&
                        selection[property] == result[property]) {
                        if (angular.isDefined(selectionIndex)) {
                            this.markResultSelected(result, selectionIndex);
                        }
                        return true;
                    }
                }
            }
        }
        return false;
    };
    TypeaheadService.prototype.updateSelectionList = function (key) {
        var selectionIDArray = [];
        if (angular.isDefined(this.getData(key))) {
            for (var j = 0; j < this.getData(key).length; j++) {
                var selection = this.getData(key)[j];
                var primaryID = selection[this.getTypeaheadPrimaryIDPropertyName(key)];
                if (angular.isDefined(primaryID)) {
                    selectionIDArray.push(primaryID);
                }
                else if (angular.isDefined(this.getTypeaheadState(key).propertyToCompare) &&
                    angular.isDefined(selection[this.getTypeaheadState(key).propertyToCompare])) {
                    selectionIDArray.push(selection[this.getTypeaheadState(key).propertyToCompare]);
                }
                else if (angular.isDefined(this.getTypeaheadState(key).fallbackPropertyArray)) {
                    var fallbackPropertyArray = this.getTypeaheadState(key).fallbackPropertyArray;
                    for (var i = 0; i < fallbackPropertyArray.length; i++) {
                        var fallbackProperty = fallbackPropertyArray[i];
                        if (angular.isDefined(selection[fallbackProperty])) {
                            selectionIDArray.push(selection[fallbackProperty]);
                            break;
                        }
                    }
                }
            }
        }
        return selectionIDArray.join(",");
    };
    TypeaheadService.prototype.getData = function (key) {
        var _this = this;
        if (key in this.typeaheadPromises) {
            //wait until it's been intialized
            this.typeaheadPromises[key].then().finally(function () {
                return _this.typeaheadData[key] || [];
            });
            delete this.typeaheadPromises[key];
        }
        else {
            return this.typeaheadData[key] || [];
        }
    };
    //strips out dangerous directives that cause infinite compile errors 
    // - this probably belongs in a different service but is used for typeahead only at the moment
    TypeaheadService.prototype.stripTranscludedContent = function (transcludedContent) {
        for (var i = 0; i < transcludedContent.length; i++) {
            if (angular.isDefined(transcludedContent[i].localName) &&
                transcludedContent[i].localName == 'ng-transclude') {
                transcludedContent = transcludedContent.children();
            }
        }
        //prevent collection config from being recompiled
        for (var i = 0; i < transcludedContent.length; i++) {
            if (angular.isDefined(transcludedContent[i].localName) &&
                transcludedContent[i].localName == 'sw-collection-config') {
                transcludedContent.splice(i, 1);
            }
        }
        return transcludedContent;
    };
    TypeaheadService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("$timeout")),
        __metadata("design:paramtypes", [Object, observerservice_1.ObserverService])
    ], TypeaheadService);
    return TypeaheadService;
}());
exports.TypeaheadService = TypeaheadService;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
var startWith_1 = __webpack_require__(103);
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var startWith_1 = __webpack_require__(104);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    return startWith_1.startWith.apply(void 0, array)(this);
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__(14);
var ScalarObservable_1 = __webpack_require__(22);
var EmptyObservable_1 = __webpack_require__(23);
var concat_1 = __webpack_require__(105);
var isScheduler_1 = __webpack_require__(15);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1) {
            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);
        }
        else if (len > 1) {
            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);
        }
        else {
            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);
        }
    };
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isScheduler_1 = __webpack_require__(15);
var of_1 = __webpack_require__(106);
var from_1 = __webpack_require__(107);
var concatAll_1 = __webpack_require__(114);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from_1.from(observables[0]);
    }
    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__(14);
exports.of = ArrayObservable_1.ArrayObservable.of;
//# sourceMappingURL=of.js.map

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromObservable_1 = __webpack_require__(108);
exports.from = FromObservable_1.FromObservable.create;
//# sourceMappingURL=from.js.map

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(29);
var isArrayLike_1 = __webpack_require__(34);
var isPromise_1 = __webpack_require__(35);
var PromiseObservable_1 = __webpack_require__(109);
var IteratorObservable_1 = __webpack_require__(110);
var ArrayObservable_1 = __webpack_require__(14);
var ArrayLikeObservable_1 = __webpack_require__(111);
var iterator_1 = __webpack_require__(24);
var Observable_1 = __webpack_require__(1);
var observeOn_1 = __webpack_require__(112);
var observable_1 = __webpack_require__(21);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = (function (_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable_1.observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray_1.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike_1.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable_1.observable]().subscribe(subscriber);
        }
        else {
            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable));
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(7);
var Observable_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = (function (_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {PromiseLike<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
//# sourceMappingURL=PromiseObservable.js.map

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(7);
var Observable_1 = __webpack_require__(1);
var iterator_1 = __webpack_require__(24);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = (function (_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function (iterator, scheduler) {
        return new IteratorObservable(iterator, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        var result = iterator.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            if (typeof iterator.return === 'function') {
                iterator.return();
            }
            return;
        }
        this.schedule(state);
    };
    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index, iterator: iterator, subscriber: subscriber
            });
        }
        else {
            do {
                var result = iterator.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator.return === 'function') {
                        iterator.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable));
exports.IteratorObservable = IteratorObservable;
var StringIterator = (function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = str.length; }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}());
var ArrayIterator = (function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = toLength(arr); }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}());
function getIterator(obj) {
    var i = obj[iterator_1.iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator_1.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}
//# sourceMappingURL=IteratorObservable.js.map

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
var ScalarObservable_1 = __webpack_require__(22);
var EmptyObservable_1 = __webpack_require__(23);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = (function (_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state) {
        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable));
exports.ArrayLikeObservable = ArrayLikeObservable;
//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
var Notification_1 = __webpack_require__(113);
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;
//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeAll_1 = __webpack_require__(33);
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
var scan_1 = __webpack_require__(116);
Observable_1.Observable.prototype.scan = scan_1.scan;
//# sourceMappingURL=scan.js.map

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var scan_1 = __webpack_require__(117);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    if (arguments.length >= 2) {
        return scan_1.scan(accumulator, seed)(this);
    }
    return scan_1.scan(accumulator)(this);
}
exports.scan = scan;
//# sourceMappingURL=scan.js.map

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
exports.scan = scan;
var ScanOperator = (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=scan.js.map

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiServiceDecorator = /** @class */ (function () {
    //@ngInject
    function HibachiServiceDecorator($delegate, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $q, utilityService, formService, rbkeyService, appConfig, observerService, hibachiValidationService, attributeMetaData) {
        var _deferred = {};
        var _config = appConfig;
        var _jsEntities = {};
        var _jsEntityInstances = {};
        var entities = appConfig.modelConfig.entities, validations = appConfig.modelConfig.validations, defaultValues = appConfig.modelConfig.defaultValues;
        angular.forEach(entities, function (entity) {
            if (attributeMetaData && attributeMetaData[entity.className]) {
                var relatedAttributes = attributeMetaData[entity.className];
                for (var attributeSetCode in relatedAttributes) {
                    var attributeSet = relatedAttributes[attributeSetCode];
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attribute.attributeSet = attributeSet;
                        attribute.isAttribute = true;
                        $.extend(entity[attributeCode], attribute);
                    }
                }
            }
            $delegate['get' + entity.className] = function (options) {
                var entityInstance = $delegate.newEntity(entity.className);
                var entityDataPromise = $delegate.getEntity(entity.className, options);
                entityDataPromise.then(function (response) {
                    if (angular.isDefined(response.processData)) {
                        entityInstance.$$init(response.data);
                        var processObjectInstance = $delegate['new' + entity.className + '_' + options.processContext.charAt(0).toUpperCase() + options.processContext.slice(1)]();
                        processObjectInstance.$$init(response.processData);
                        processObjectInstance.data[entity.className.charAt(0).toLowerCase() + entity.className.slice(1)] = entityInstance;
                        entityInstance.processObject = processObjectInstance;
                    }
                    else {
                        if (entityInstance.populate) {
                            entityInstance.populate(response);
                        }
                        else {
                            entityInstance.$$init(response);
                        }
                    }
                });
                return {
                    promise: entityDataPromise,
                    value: entityInstance
                };
            };
            $delegate['new' + entity.className] = function () {
                //if we have the service then get the new instance from that
                var entityName = entity.className;
                var serviceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(serviceName)) {
                    var entityService = angular.element(document.body).injector().get(serviceName);
                    if (entityService['new' + entity.className]) {
                        return entityService['new' + entity.className]();
                    }
                }
                return $delegate.newEntity(entity.className);
            };
            entity.isProcessObject = entity.className.indexOf('_') >= 0;
            _jsEntities[entity.className] = function () {
                this.validations = validations[entity.className];
                this.metaData = entity;
                this.metaData.className = entity.className;
                if (relatedAttributes) {
                    this.attributeMetaData = relatedAttributes;
                }
                if (entity.hb_parentPropertyName) {
                    this.metaData.hb_parentPropertyName = entity.hb_parentPropertyName;
                }
                if (entity.hb_childPropertyName) {
                    this.metaData.hb_childPropertyName = entity.hb_childPropertyName;
                }
                this.metaData.$$getRBKey = function (rbKey, replaceStringData) {
                    return rbkeyService.rbKey(rbKey, replaceStringData);
                };
                this.metaData.$$getPropertyTitle = function (propertyName) {
                    return _getPropertyTitle(propertyName, this);
                };
                this.metaData.$$getPropertyHint = function (propertyName) {
                    return _getPropertyHint(propertyName, this);
                };
                this.metaData.$$getManyToManyName = function (singularname) {
                    var metaData = this;
                    for (var i in metaData) {
                        if (metaData[i].singularname === singularname) {
                            return metaData[i].name;
                        }
                    }
                };
                this.metaData.$$getPropertyFieldType = function (propertyName) {
                    return _getPropertyFieldType(propertyName, this);
                };
                this.metaData.$$getPropertyFormatType = function (propertyName) {
                    if (this[propertyName])
                        return _getPropertyFormatType(propertyName, this);
                };
                this.metaData.$$getDetailTabs = function () {
                    var deferred = $q.defer();
                    var urlString = _config.baseURL + '/index.cfm/?' + appConfig.action + '=api:main.getDetailTabs&entityName=' + this.className;
                    var detailTabs = [];
                    $http.get(urlString)
                        .success(function (data) {
                        deferred.resolve(data);
                    }).error(function (reason) {
                        deferred.reject(reason);
                    });
                    return deferred.promise;
                };
                this.$$getFormattedValue = function (propertyName, formatType) {
                    return _getFormattedValue(propertyName, formatType, this);
                };
                this.data = {};
                this.modifiedData = {};
                var jsEntity = this;
                if (entity.isProcessObject) {
                    (function (entity) {
                        _jsEntities[entity.className].prototype = {
                            $$getID: function () {
                                return '';
                            },
                            $$getIDName: function () {
                                var IDNameString = '';
                                return IDNameString;
                            }
                        };
                    })(entity);
                }
                angular.forEach(entity, function (property) {
                    if (angular.isObject(property) && angular.isDefined(property.name)) {
                        if (defaultValues && defaultValues[entity.className] && defaultValues[entity.className][property.name] != null) {
                            jsEntity.data[property.name] = angular.copy(defaultValues[entity.className][property.name]);
                        }
                        else {
                            jsEntity.data[property.name] = undefined;
                        }
                    }
                });
            };
            _jsEntities[entity.className].prototype = {
                $$getPropertyByName: function (propertyName) {
                    return this['$$get' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1)]();
                },
                $$isPersisted: function () {
                    return this.$$getID() !== '';
                },
                $$init: function (data) {
                    _init(this, data);
                },
                $$save: function () {
                    return _save(this);
                },
                $$delete: function () {
                    return _delete(this);
                },
                $$getValidationsByProperty: function (property) {
                    return _getValidationsByProperty(this, property);
                },
                $$getValidationByPropertyAndContext: function (property, context) {
                    return _getValidationByPropertyAndContext(this, property, context);
                },
                $$getTitleByPropertyIdentifier: function (propertyIdentifier) {
                    if (propertyIdentifier.split('.').length > 1) {
                        var listFirst = utilityService.listFirst(propertyIdentifier, '.');
                        var relatedEntityName = this.metaData[listFirst].cfc;
                        var exampleEntity = $delegate.newEntity(relatedEntityName);
                        return exampleEntity.$$getTitleByPropertyIdentifier(propertyIdentifier.replace(listFirst, ''));
                    }
                    return this.metaData.$$getPropertyTitle(propertyIdentifier);
                },
                $$getMetaData: function (propertyName) {
                    if (propertyName === undefined) {
                        return this.metaData;
                    }
                    else {
                        if (angular.isDefined(this.metaData[propertyName].name) && angular.isUndefined(this.metaData[propertyName].nameCapitalCase)) {
                            this.metaData[propertyName].nameCapitalCase = this.metaData[propertyName].name.charAt(0).toUpperCase() + this.metaData[propertyName].name.slice(1);
                        }
                        if (angular.isDefined(this.metaData[propertyName].cfc) && angular.isUndefined(this.metaData[propertyName].cfcProperCase)) {
                            this.metaData[propertyName].cfcProperCase = this.metaData[propertyName].cfc.charAt(0).toLowerCase() + this.metaData[propertyName].cfc.slice(1);
                        }
                        return this.metaData[propertyName];
                    }
                }
            };
            angular.forEach(relatedAttributes, function (attributeSet) {
                angular.forEach(attributeSet.attributes, function (attribute) {
                    if (attribute && attribute.attributeCode) {
                        Object.defineProperty(_jsEntities[entity.className].prototype, attribute.attributeCode, {
                            configurable: true,
                            enumerable: false,
                            get: function () {
                                if (attribute != null && this.data[attribute.attributeCode] == null) {
                                    return undefined;
                                }
                                return this.data[attribute.attributeCode];
                            },
                            set: function (value) {
                                this.data[attribute.attributeCode] = value;
                            }
                        });
                    }
                });
            });
            angular.forEach(entity, function (property) {
                if (angular.isObject(property) && angular.isDefined(property.name)) {
                    //if(angular.isUndefined(property.persistent)){
                    if (angular.isDefined(property.fieldtype)) {
                        if (['many-to-one'].indexOf(property.fieldtype) >= 0) {
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)]())) {
                                    var options = {
                                        columnsConfig: angular.toJson([
                                            {
                                                "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        joinsConfig: angular.toJson([
                                            {
                                                "associationName": property.name,
                                                "alias": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(entity.className, options);
                                    collectionPromise.then(function (response) {
                                        for (var i in response.records) {
                                            var entityInstance = $delegate.newEntity(thisEntityInstance.metaData[property.name].cfc);
                                            //Removed the array index here at the end of local.property.name.
                                            if (angular.isArray(response.records[i][property.name])) {
                                                entityInstance.$$init(response.records[i][property.name][0]);
                                            }
                                            else {
                                                entityInstance.$$init(response.records[i][property.name]); //Shouldn't have the array index'
                                            }
                                            thisEntityInstance['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](entityInstance);
                                        }
                                    });
                                    return collectionPromise;
                                }
                                return null;
                            };
                            _jsEntities[entity.className].prototype['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function (entityInstance) {
                                var thisEntityInstance = this;
                                var metaData = this.metaData;
                                var manyToManyName = '';
                                //if entityInstance is not passed in, clear related object
                                if (angular.isUndefined(entityInstance)) {
                                    if (angular.isDefined(thisEntityInstance.data[property.name])) {
                                        delete thisEntityInstance.data[property.name];
                                    }
                                    if (!thisEntityInstance.parents) {
                                        return;
                                    }
                                    for (var i = 0; i <= thisEntityInstance.parents.length; i++) {
                                        if (angular.isDefined(thisEntityInstance.parents[i]) && thisEntityInstance.parents[i].name == property.name.charAt(0).toLowerCase() + property.name.slice(1)) {
                                            thisEntityInstance.parents.splice(i, 1);
                                        }
                                    }
                                    return;
                                }
                                if (property.name === 'parent' + this.metaData.className) {
                                    var childName = 'child' + this.metaData.className;
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(childName);
                                }
                                else if (entityInstance.metaData) {
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                }
                                // else{
                                //     manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                // }
                                if (angular.isUndefined(thisEntityInstance.parents)) {
                                    thisEntityInstance.parents = [];
                                }
                                thisEntityInstance.parents.push(thisEntityInstance.metaData[property.name]);
                                if (angular.isDefined(manyToManyName) && manyToManyName.length) {
                                    if (angular.isUndefined(entityInstance.children)) {
                                        entityInstance.children = [];
                                    }
                                    var child = entityInstance.metaData[manyToManyName];
                                    if (entityInstance.children.indexOf(child) === -1) {
                                        entityInstance.children.push(child);
                                    }
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(thisEntityInstance);
                                }
                                thisEntityInstance.data[property.name] = entityInstance;
                            };
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](value);
                                    }
                                });
                            }
                        }
                        else if (['one-to-many', 'many-to-many'].indexOf(property.fieldtype) >= 0) {
                            if (!property.singularname) {
                                throw ('need to define a singularname for ' + property.fieldtype);
                            }
                            _jsEntities[entity.className].prototype['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)] = function (entityInstance) {
                                if (angular.isUndefined(entityInstance)) {
                                    var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                }
                                var metaData = this.metaData;
                                if (metaData[property.name].fieldtype === 'one-to-many') {
                                    entityInstance.data[metaData[property.name].fkcolumn.slice(0, -2)] = this;
                                }
                                else if (metaData[property.name].fieldtype === 'many-to-many') {
                                    var manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + this.metaData.className.slice(1));
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(this);
                                }
                                if (angular.isDefined(metaData[property.name])) {
                                    if (angular.isDefined(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)])) {
                                        if (angular.isUndefined(entityInstance.parents)) {
                                            entityInstance.parents = [];
                                        }
                                        entityInstance.parents.push(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)]);
                                    }
                                    if (angular.isUndefined(this.children)) {
                                        this.children = [];
                                    }
                                    var child = metaData[property.name];
                                    if (this.children.indexOf(child) === -1) {
                                        this.children.push(child);
                                    }
                                }
                                if (angular.isUndefined(this.data[property.name])) {
                                    this.data[property.name] = [];
                                }
                                this.data[property.name].push(entityInstance);
                                return entityInstance;
                            };
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)])) {
                                    var options = {
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + property.cfc.toLowerCase() + "." + property.fkcolumn.replace('ID', '') + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(property.cfc, options);
                                    collectionPromise.then(function (response) {
                                        var entityInstances = [];
                                        for (var i in response.records) {
                                            var entityInstance = thisEntityInstance['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)]();
                                            entityInstance.$$init(response.records[i]);
                                            if (angular.isUndefined(thisEntityInstance[property.name])) {
                                                thisEntityInstance[property.name] = [];
                                            }
                                            entityInstances.push(entityInstance);
                                        }
                                        thisEntityInstance.data[property.name] = entityInstances;
                                    });
                                    return collectionPromise;
                                }
                            };
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = [];
                                    if (angular.isArray(value)) {
                                        for (var i = 0; i < value.length; i++) {
                                            var item = value[i];
                                            var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                            entityInstance.$$init(item);
                                            this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                        }
                                    }
                                    else {
                                        var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                        entityInstance.$$init(value);
                                        this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                    }
                                }
                            });
                        }
                        else {
                            if (['id'].indexOf(property.fieldtype) >= 0) {
                                _jsEntities[entity.className].prototype['$$getID'] = function () {
                                    //this should retreive id from the metadata
                                    return this.data[this.$$getIDName()];
                                };
                                _jsEntities[entity.className].prototype['$$getIDName'] = function () {
                                    var IDNameString = property.name;
                                    return IDNameString;
                                };
                            }
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this.data[property.name] = value;
                                    }
                                });
                            }
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                return this.data[property.name];
                            };
                        }
                    }
                    else {
                        if (property.name !== 'data' && property.name !== 'validations') {
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = value;
                                }
                            });
                        }
                        _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                            return this.data[property.name];
                        };
                    }
                    //}
                }
            });
        });
        $delegate.setJsEntities(_jsEntities);
        angular.forEach(_jsEntities, function (jsEntity) {
            var jsEntityInstance = new jsEntity;
            _jsEntityInstances[jsEntityInstance.metaData.className] = jsEntityInstance;
        });
        $delegate.setJsEntityInstances(_jsEntityInstances);
        var _init = function (entityInstance, data) {
            hibachiValidationService.init(entityInstance, data);
        };
        var _getPropertyTitle = function (propertyName, metaData) {
            return $delegate.getPropertyTitle(propertyName, metaData);
        };
        var _getPropertyHint = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            var keyValue = '';
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                keyValue = metaData.$$getRBKey(propertyMetaData['hb_rbkey'] + '_hint');
            }
            else if (angular.isUndefined(propertyMetaData['persistent']) || (angular.isDefined(propertyMetaData['persistent']) && propertyMetaData['persistent'] === true)) {
                keyValue = metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '_hint');
            }
            else {
                keyValue = metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            if (keyValue.slice(-8) !== '_missing') {
                return keyValue;
            }
            return '';
        };
        var _getPropertyFieldType = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_formfieldtype'])) {
                return propertyMetaData['hb_formfieldtype'];
            }
            if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if ("array" === dataType) {
                    return "select";
                }
                else if ("struct" === dataType) {
                    return "checkboxgroup";
                }
                else if (propertyName.indexOf('password') > -1) {
                    return "password";
                }
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-one') {
                return 'select';
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'one-to-many') {
                return 'There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for ' + propertyName;
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-many') {
                return "listingMultiselect";
            }
            return "text";
        };
        var _getPropertyFormatType = function (propertyName, metaData) {
            if (!propertyName || !metaData) {
                return 'none';
            }
            var propertyMetaData = metaData[propertyName];
            if (propertyMetaData['hb_formattype']) {
                return propertyMetaData['hb_formattype'];
            }
            else if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if (["big_decimal"].indexOf(dataType) > -1 && propertyName.slice(-6) === 'weight') {
                    return "weight";
                }
                else if (["big_decimal"].indexOf(dataType) > -1) {
                    return "currency";
                }
            }
            return 'none';
        };
        var _isSimpleValue = function (value) {
            return !!(angular.isString(value) || angular.isNumber(value)
                || angular.isDate(value) || value === false || value === true);
        };
        var _getFormattedValue = function (propertyName, formatType, entityInstance) {
            var value = entityInstance.$$getPropertyByName(propertyName);
            if (angular.isUndefined(formatType)) {
                formatType = entityInstance.metaData.$$getPropertyFormatType(propertyName);
            }
            if (formatType === "custom") {
                //to be implemented
                //return entityInstance['$$get'+propertyName+Formatted]();
            }
            else if (formatType === "rbkey") {
                if (angular.isDefined(value)) {
                    return entityInstance.$$getRBKey('entity.' + entityInstance.metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '.' + value);
                }
                else {
                    return '';
                }
            }
            if (angular.isUndefined(value)) {
                var propertyMeta = entityInstance.metaData[propertyName];
                if (angular.isDefined(propertyMeta['hb_nullRBKey'])) {
                    return entityInstance.$$getRbKey(propertyMeta['hb_nullRBKey']);
                }
                return "";
            }
            else if (_isSimpleValue(value)) {
                var formatDetails = {};
                if (angular.isDefined(entityInstance.data['currencyCode'])) {
                    formatDetails.currencyCode = entityInstance.$$getCurrencyCode();
                }
                return utilityService.formatValue(value, formatType, formatDetails, entityInstance);
            }
        };
        var _delete = function (entityInstance) {
            var entityName = entityInstance.metaData.className;
            var entityID = entityInstance.$$getID();
            var context = 'delete';
            return $delegate.saveEntity(entityName, entityID, {}, context);
        };
        var _setValueByPropertyPath = function (obj, path, value) {
            var a = path.split('.');
            var context = obj;
            var selector;
            var myregexp = /([a-zA-Z]+)(\[(\d)\])+/; // matches:  item[0]
            var match = null;
            for (var i = 0; i < a.length - 1; i += 1) {
                match = myregexp.exec(a[i]);
                if (match !== null)
                    context = context[match[1]][match[3]];
                else
                    context = context[a[i]];
            }
            // check for ending item[xx] syntax
            match = myregexp.exec([a[a.length - 1]]);
            if (match !== null)
                context[match[1]][match[3]] = value;
            else
                context[a[a.length - 1]] = value;
        };
        var _getValueByPropertyPath = function (obj, path) {
            var paths = path.split('.'), current = obj, i;
            for (i = 0; i < paths.length; ++i) {
                if (current[paths[i]] == undefined) {
                    return undefined;
                }
                else {
                    current = current[paths[i]];
                }
            }
            return current;
        };
        var _addReturnedIDs = function (returnedIDs, entityInstance) {
            for (var key in returnedIDs) {
                if (angular.isArray(returnedIDs[key])) {
                    var arrayItems = returnedIDs[key];
                    var entityInstanceArray = entityInstance.data[key];
                    for (var i in arrayItems) {
                        var arrayItem = arrayItems[i];
                        var entityInstanceArrayItem = entityInstance.data[key][i];
                        _addReturnedIDs(arrayItem, entityInstanceArrayItem);
                    }
                }
                else if (angular.isObject(returnedIDs[key])) {
                    for (var k in returnedIDs[key]) {
                        _addReturnedIDs(returnedIDs[key][k], entityInstance.data[key][k]);
                    }
                }
                else {
                    entityInstance.data[key] = returnedIDs[key];
                }
            }
        };
        var _save = function (entityInstance) {
            var deferred = $q.defer();
            $timeout(function () {
                //$log.debug('save begin');
                //$log.debug(entityInstance);
                var entityID = entityInstance.$$getID();
                var modifiedData = _getModifiedData(entityInstance);
                //$log.debug('modifiedData complete');
                //$log.debug(modifiedData);
                //timeoutPromise.valid = modifiedData.valid;
                if (modifiedData.valid) {
                    var params = {};
                    params.serializedJsonData = utilityService.toJson(modifiedData.value);
                    //if we have a process object then the context is different from the standard save
                    var entityName = '';
                    var context = 'save';
                    if (entityInstance.metaData.isProcessObject === 1) {
                        var processStruct = modifiedData.objectLevel.metaData.className.split('_');
                        entityName = processStruct[0];
                        context = processStruct[1];
                    }
                    else {
                        entityName = modifiedData.objectLevel.metaData.className;
                    }
                    var savePromise = $delegate.saveEntity(entityName, entityID, params, context);
                    savePromise.then(function (response) {
                        var returnedIDs = response.data;
                        if ((angular.isDefined(response.SUCCESS) && response.SUCCESS === true)
                            || (angular.isDefined(response.success) && response.success === true)) {
                            if ($location.url() == '/entity/' + entityName + '/create' && response.data[modifiedData.objectLevel.$$getIDName()]) {
                                $location.path('/entity/' + entityName + '/' + response.data[modifiedData.objectLevel.$$getIDName()], false);
                            }
                            _addReturnedIDs(returnedIDs, modifiedData.objectLevel);
                            deferred.resolve(returnedIDs);
                            observerService.notify('saveSuccess', returnedIDs);
                            observerService.notify('saveSuccess' + entityName, returnedIDs);
                        }
                        else {
                            deferred.reject(angular.isDefined(response.messages) ? response.messages : response);
                            observerService.notify('saveFailed', response);
                            observerService.notify('saveFailed' + entityName, response);
                        }
                    }, function (reason) {
                        deferred.reject(reason);
                        observerService.notify('saveFailed', reason);
                        observerService.notify('saveFailed' + entityName, reason);
                    });
                }
                else {
                    //select first, visible, and enabled input with a class of ng-invalid
                    var target = $('input.ng-invalid:first:visible:enabled');
                    if (angular.isDefined(target)) {
                        target.focus();
                        var targetID = target.attr('id');
                        $anchorScroll();
                    }
                    deferred.reject('Input is invalid.');
                    observerService.notify('validationFailed');
                    observerService.notify('validationFailed' + entityName);
                }
            });
            //return timeoutPromise;
            return deferred.promise;
            /*

            */
        };
        var _getModifiedData = function (entityInstance) {
            var modifiedData = {};
            modifiedData = getModifiedDataByInstance(entityInstance);
            return modifiedData;
        };
        var getObjectSaveLevel = function (entityInstance) {
            return hibachiValidationService.getObjectSaveLevel(entityInstance);
        };
        var validateObject = function (entityInstance) {
            return hibachiValidationService.validateObject;
        };
        var validateChildren = function (entityInstance) {
            return hibachiValidationService.validateChildren(entityInstance);
        };
        var processChild = function (entityInstance, entityInstanceParent) {
            return hibachiValidationService.processChild(entityInstance, entityInstanceParent);
        };
        var processParent = function (entityInstance) {
            return hibachiValidationService.processParent(entityInstance);
        };
        var processForm = function (form, entityInstance) {
            return hibachiValidationService.processForm(form, entityInstance);
        };
        var getDataFromParents = function (entityInstance, entityInstanceParents) {
            return hibachiValidationService.getDataFromParents(entityInstance, entityInstanceParents);
        };
        var getDataFromChildren = function (entityInstance) {
            return hibachiValidationService.getDataFromChildren(entityInstance);
        };
        var getModifiedDataByInstance = function (entityInstance) {
            return hibachiValidationService.getModifiedDataByInstance(entityInstance);
        };
        var _getValidationsByProperty = function (entityInstance, property) {
            return hibachiValidationService.getValidationsByProperty(entityInstance, property);
        };
        var _getValidationByPropertyAndContext = function (entityInstance, property, context) {
            return hibachiValidationService.getValidationByPropertyAndContext(entityInstance, property, context);
        };
        return $delegate;
    }
    return HibachiServiceDecorator;
}());
exports.HibachiServiceDecorator = HibachiServiceDecorator;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var HibachiScope = /** @class */ (function () {
    //@ngInject
    function HibachiScope(appConfig) {
        this.appConfig = appConfig;
        this.loginDisplayed = false;
        this.isValidToken = true;
        this.config = appConfig;
    }
    HibachiScope.prototype.setToken = function (token) {
        this.token = token;
        var stringArray = token.split('.');
        try {
            this.jwtInfo = angular.fromJson(window.atob(stringArray[0]).trim());
            this.session = angular.fromJson(window.atob(stringArray[1]).trim());
        }
        catch (err) {
            this.isValidToken = false;
        }
    };
    HibachiScope = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("appConfig")),
        __metadata("design:paramtypes", [Object])
    ], HibachiScope);
    return HibachiScope;
}());
exports.HibachiScope = HibachiScope;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var ScopeService = /** @class */ (function () {
    //ngInject
    function ScopeService() {
    }
    ScopeService.prototype.getRootParentScope = function (scope, targetScopeName) {
        var currentScope = scope;
        while (currentScope != null && angular.isUndefined(currentScope[targetScopeName])) {
            if (angular.isDefined(currentScope.$parent)) {
                currentScope = currentScope.$parent;
            }
            else {
                break;
            }
        }
        if (currentScope != null && angular.isDefined(currentScope[targetScopeName])) {
            return currentScope;
        }
    };
    ScopeService.prototype.hasParentScope = function (scope, targetScopeName) {
        if (this.getRootParentScope(scope, targetScopeName) != null) {
            return true;
        }
        return false;
    };
    ScopeService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], ScopeService);
    return ScopeService;
}());
exports.ScopeService = ScopeService;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var SkuService = /** @class */ (function (_super) {
    __extends(SkuService, _super);
    //@ngInject
    function SkuService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Sku') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return SkuService;
}(baseentityservice_1.BaseEntityService));
exports.SkuService = SkuService;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var core_1 = __webpack_require__(0);
var HibachiValidationService = /** @class */ (function () {
    function HibachiValidationService($log) {
        this.$log = $log;
    }
    HibachiValidationService.prototype.getObjectSaveLevel = function (entityInstance) {
        var _this = this;
        var objectLevel = entityInstance;
        var entityID = entityInstance.$$getID();
        angular.forEach(entityInstance.parents, function (parentObject) {
            if (angular.isDefined(entityInstance.data[parentObject.name]) && entityInstance.data[parentObject.name].$$getID() === '' && (angular.isUndefined(entityID) || !entityID.trim().length)) {
                var parentEntityInstance = entityInstance.data[parentObject.name];
                var parentEntityID = parentEntityInstance.$$getID();
                if (parentEntityID === '' && parentEntityInstance.forms) {
                    objectLevel = _this.getObjectSaveLevel(parentEntityInstance);
                }
            }
        });
        return objectLevel;
    };
    ;
    HibachiValidationService.prototype.getModifiedDataByInstance = function (entityInstance) {
        var modifiedData = {};
        var objectSaveLevel = this.getObjectSaveLevel(entityInstance);
        this.$log.debug('objectSaveLevel : ' + objectSaveLevel);
        var valueStruct = this.validateObject(objectSaveLevel);
        this.$log.debug('validateObject data');
        this.$log.debug(valueStruct.value);
        modifiedData = {
            objectLevel: objectSaveLevel,
            value: valueStruct.value,
            valid: valueStruct.valid
        };
        return modifiedData;
    };
    HibachiValidationService.prototype.getValidationByPropertyAndContext = function (entityInstance, property, context) {
        var validations = this.getValidationsByProperty(entityInstance, property);
        for (var i in validations) {
            var contexts = validations[i].contexts.split(',');
            for (var j in contexts) {
                if (contexts[j] === context) {
                    return validations[i];
                }
            }
        }
    };
    HibachiValidationService.prototype.getValidationsByProperty = function (entityInstance, property) {
        return entityInstance.validations.properties[property];
    };
    ;
    HibachiValidationService.prototype.validateObject = function (entityInstance) {
        var modifiedData = {};
        var valid = true;
        var forms = entityInstance.forms;
        this.$log.debug('process base level data');
        for (var f in forms) {
            var form = forms[f];
            form.$setSubmitted(); //Sets the form to submitted for the validation errors to pop up.
            if (form.$dirty && form.$valid) {
                for (var key in form) {
                    this.$log.debug('key:' + key);
                    if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                        var inputField = form[key];
                        if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                            inputField.$dirty = true;
                        }
                        if (angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                            if (angular.isDefined(entityInstance.metaData[key])
                                && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype)
                                && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                                modifiedData[key] = angular.toJson(inputField.$modelValue);
                            }
                            else {
                                modifiedData[key] = inputField.$modelValue;
                            }
                        }
                    }
                }
            }
            else {
                if (!form.$valid) {
                    valid = false;
                }
            }
        }
        modifiedData[entityInstance.$$getIDName()] = entityInstance.$$getID();
        this.$log.debug(modifiedData);
        this.$log.debug('process parent data');
        if (angular.isDefined(entityInstance.parents)) {
            for (var p in entityInstance.parents) {
                var parentObject = entityInstance.parents[p];
                var parentInstance = entityInstance.data[parentObject.name];
                if (angular.isUndefined(modifiedData[parentObject.name])) {
                    modifiedData[parentObject.name] = {};
                }
                var forms = parentInstance.forms;
                for (var f in forms) {
                    var form = forms[f];
                    form.$setSubmitted();
                    if (form.$dirty && form.$valid) {
                        for (var key in form) {
                            if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                                var inputField = form[key];
                                if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                                    inputField.$dirty = true;
                                }
                                if (angular.isDefined(inputField) && angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                                    if (angular.isDefined(parentInstance.metaData[key])
                                        && angular.isDefined(parentInstance.metaData[key].hb_formfieldtype)
                                        && parentInstance.metaData[key].hb_formfieldtype === 'json') {
                                        modifiedData[parentObject.name][key] = angular.toJson(inputField.$modelValue);
                                    }
                                    else {
                                        modifiedData[parentObject.name][key] = inputField.$modelValue;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (!form.$valid) {
                            valid = false;
                        }
                    }
                }
                modifiedData[parentObject.name][parentInstance.$$getIDName()] = parentInstance.$$getID();
            }
        }
        this.$log.debug(modifiedData);
        this.$log.debug('begin child data');
        var childrenData = this.validateChildren(entityInstance);
        this.$log.debug('child Data');
        this.$log.debug(childrenData);
        angular.extend(modifiedData, childrenData);
        return {
            valid: valid,
            value: modifiedData
        };
    };
    HibachiValidationService.prototype.validateChildren = function (entityInstance) {
        var data = {};
        if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
            data = this.getDataFromChildren(entityInstance);
        }
        return data;
    };
    HibachiValidationService.prototype.init = function (entityInstance, data) {
        for (var key in data) {
            if (key.charAt(0) !== '$' && angular.isDefined(entityInstance.metaData[key])) {
                var propertyMetaData = entityInstance.metaData[key];
                if (angular.isDefined(propertyMetaData) && angular.isDefined(propertyMetaData.hb_formfieldtype) && propertyMetaData.hb_formfieldtype === 'json') {
                    if (data[key].trim() !== '') {
                        entityInstance.data[key] = angular.fromJson(data[key]);
                    }
                }
                else {
                    entityInstance.data[key] = data[key];
                }
            }
        }
    };
    HibachiValidationService.prototype.processForm = function (form, entityInstance) {
        this.$log.debug('begin process form');
        var data = {};
        form.$setSubmitted();
        for (var key in form) {
            if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                var inputField = form[key];
                if (inputField.$modelValue) {
                    inputField.$dirty = true;
                }
                if (angular.isDefined(inputField) && angular.isDefined(inputField) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                    if (angular.isDefined(entityInstance.metaData[key]) && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype) && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                        data[key] = angular.toJson(inputField.$modelValue);
                    }
                    else {
                        data[key] = inputField.$modelValue;
                    }
                }
            }
        }
        data[entityInstance.$$getIDName()] = entityInstance.$$getID();
        this.$log.debug('process form data');
        this.$log.debug(data);
        return data;
    };
    HibachiValidationService.prototype.processParent = function (entityInstance) {
        var data = {};
        if (entityInstance.$$getID() !== '') {
            data[entityInstance.$$getIDName()] = entityInstance.$$getID();
        }
        this.$log.debug('processParent');
        this.$log.debug(entityInstance);
        var forms = entityInstance.forms;
        for (var f in forms) {
            var form = forms[f];
            data = angular.extend(data, this.processForm(form, entityInstance));
        }
        return data;
    };
    HibachiValidationService.prototype.processChild = function (entityInstance, entityInstanceParent) {
        var data = {};
        var forms = entityInstance.forms;
        for (var f in forms) {
            var form = forms[f];
            angular.extend(data, this.processForm(form, entityInstance));
        }
        if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
            var childData = this.getDataFromChildren(entityInstance);
            angular.extend(data, childData);
        }
        if (angular.isDefined(entityInstance.parents) && entityInstance.parents.length) {
            var parentData = this.getDataFromParents(entityInstance, entityInstanceParent);
            angular.extend(data, parentData);
        }
        return data;
    };
    HibachiValidationService.prototype.getDataFromParents = function (entityInstance, entityInstanceParent) {
        var data = {};
        for (var c in entityInstance.parents) {
            var parentMetaData = entityInstance.parents[c];
            if (angular.isDefined(parentMetaData)) {
                var parent = entityInstance.data[parentMetaData.name];
                if (angular.isObject(parent) && entityInstanceParent !== parent && parent.$$getID() !== '') {
                    if (angular.isUndefined(data[parentMetaData.name])) {
                        data[parentMetaData.name] = {};
                    }
                    var parentData = this.processParent(parent);
                    this.$log.debug('parentData:' + parentMetaData.name);
                    this.$log.debug(parentData);
                    angular.extend(data[parentMetaData.name], parentData);
                }
                else {
                }
            }
        }
        ;
        return data;
    };
    HibachiValidationService.prototype.getDataFromChildren = function (entityInstance) {
        var _this = this;
        var data = {};
        this.$log.debug('childrenFound');
        this.$log.debug(entityInstance.children);
        for (var c in entityInstance.children) {
            var childMetaData = entityInstance.children[c];
            var children = entityInstance.data[childMetaData.name];
            this.$log.debug(childMetaData);
            this.$log.debug(children);
            if (angular.isArray(entityInstance.data[childMetaData.name])) {
                if (angular.isUndefined(data[childMetaData.name])) {
                    data[childMetaData.name] = [];
                }
                angular.forEach(entityInstance.data[childMetaData.name], function (child, key) {
                    _this.$log.debug('process child array item');
                    var childData = _this.processChild(child, entityInstance);
                    _this.$log.debug('process child return');
                    _this.$log.debug(childData);
                    data[childMetaData.name].push(childData);
                });
            }
            else {
                if (angular.isUndefined(data[childMetaData.name])) {
                    data[childMetaData.name] = {};
                }
                var child = entityInstance.data[childMetaData.name];
                this.$log.debug('begin process child');
                var childData = this.processChild(child, entityInstance);
                this.$log.debug('process child return');
                this.$log.debug(childData);
                angular.extend(data, childData);
            }
        }
        this.$log.debug('returning child data');
        this.$log.debug(data);
        return data;
    };
    HibachiValidationService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$log')),
        __metadata("design:paramtypes", [Object])
    ], HibachiValidationService);
    return HibachiValidationService;
}());
exports.HibachiValidationService = HibachiValidationService;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(6);
var core_1 = __webpack_require__(0);
var hibachiservice_1 = __webpack_require__(26);
var utilityservice_1 = __webpack_require__(9);
var EntityService = /** @class */ (function (_super) {
    __extends(EntityService, _super);
    //@ngInject
    function EntityService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    EntityService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject("$injector")),
        __metadata("design:paramtypes", [Object, hibachiservice_1.$Hibachi,
            utilityservice_1.UtilityService])
    ], EntityService);
    return EntityService;
}(baseentityservice_1.BaseEntityService));
exports.EntityService = EntityService;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var GlobalSearchController = /** @class */ (function () {
    //@ngInject
    function GlobalSearchController($scope, $log, $window, $timeout, $hibachi, rbkeyService) {
        $scope.keywords = '';
        $scope.searchResultsOpen = false;
        $scope.sidebarClass = 'sidebar';
        $scope.loading = false; //Set loading wheel to false
        $scope.resultsFound = true; // Set the results Found to true because no search has been done yet
        $scope.searchResults = {
            'product': {
                'title': 'Products',
                'resultNameFilter': function (data) {
                    return data['productName'];
                },
                'results': [],
                'id': function (data) {
                    return data['productID'];
                }
            },
            'order': {
                'title': rbkeyService.getRBKey('entity.order_plural'),
                'resultNameFilter': function (data) {
                    return data['orderNumber'];
                },
                'results': [],
                'id': function (data) {
                    return data['orderID'];
                }
            },
            'brand': {
                'title': rbkeyService.getRBKey('entity.brand_plural'),
                'resultNameFilter': function (data) {
                    return data['brandName'];
                },
                'results': [],
                'id': function (data) {
                    return data['brandID'];
                }
            },
            'account': {
                'title': 'Accounts',
                'resultNameFilter': function (data) {
                    return data['firstName'] + ' ' + data['lastName'];
                },
                'results': [],
                'id': function (data) {
                    return data['accountID'];
                }
            },
            'vendor': {
                'title': 'Vendors',
                'resultNameFilter': function (data) {
                    return data['vendorName'];
                },
                'results': [],
                'id': function (data) {
                    return data['vendorID'];
                }
            }
        };
        var _timeoutPromise;
        var _loadingCount = 0;
        $scope.updateSearchResults = function () {
            $scope.loading = true;
            $scope.showResults();
            if (_timeoutPromise) {
                $timeout.cancel(_timeoutPromise);
            }
            _timeoutPromise = $timeout(function () {
                // If no keywords, then set everything back to their defaults
                if ($scope.keywords === '') {
                    $scope.hideResults();
                    // Otherwise performe the search
                }
                else {
                    $scope.showResults();
                    // Set the loadingCount to the number of AJAX Calls we are about to do
                    _loadingCount = Object.keys($scope.searchResults).length;
                    for (var entityName in $scope.searchResults) {
                        (function (entityName) {
                            var searchPromise = $hibachi.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: 'global-search-' + entityName });
                            searchPromise.then(function (data) {
                                // Clear out the old Results
                                $scope.searchResults[entityName].results = [];
                                $scope.searchResults[entityName].title = rbkeyService.getRBKey('entity.' + entityName.toLowerCase() + '_plural');
                                // push in the new results
                                for (var i in data.pageRecords) {
                                    $scope.searchResults[entityName].results.push({
                                        'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),
                                        'link': $hibachi.buildUrl('entity.detail' + entityName) + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i]),
                                    });
                                }
                                // Increment Down The Loading Count
                                _loadingCount--;
                                // If the loadingCount drops to 0, then we can update scope
                                if (_loadingCount == 0) {
                                    $scope.loading = false;
                                    var _foundResults = false;
                                    for (var _thisEntityName in $scope.searchResults) {
                                        if ($scope.searchResults[_thisEntityName].results.length) {
                                            _foundResults = true;
                                            break;
                                        }
                                    }
                                    $scope.resultsFound = _foundResults;
                                }
                            });
                        })(entityName);
                    }
                }
            }, 500);
        };
        $scope.showResults = function () {
            $scope.searchResultsOpen = true;
            $scope.sidebarClass = 'sidebar s-search-width';
            $window.onclick = function (event) {
                var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');
                if (!_targetClassOfSearch) {
                    $scope.hideResults();
                    $scope.$apply();
                }
            };
        };
        $scope.hideResults = function () {
            $scope.searchResultsOpen = false;
            $scope.sidebarClass = 'sidebar';
            $scope.search.$setPristine();
            $scope.keywords = "";
            $window.onclick = null;
            $scope.loading = false;
            $scope.resultsFound = true;
            for (var entityName in $scope.searchResults) {
                $scope.searchResults[entityName].results = [];
            }
        };
    }
    return GlobalSearchController;
}());
exports.GlobalSearchController = GlobalSearchController;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PercentageFilter = /** @class */ (function () {
    function PercentageFilter() {
    }
    PercentageFilter.Factory = function () {
        return function (input, decimals, suffix) {
            decimals = angular.isNumber(decimals) ? decimals : 3;
            suffix = suffix || '%';
            if (isNaN(input)) {
                return '';
            }
            return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;
        };
    };
    return PercentageFilter;
}());
exports.PercentageFilter = PercentageFilter;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var EntityRBKey = /** @class */ (function () {
    function EntityRBKey() {
    }
    //@ngInject
    EntityRBKey.Factory = function (rbkeyService) {
        return function (text) {
            if (angular.isDefined(text) && angular.isString(text)) {
                text = text.replace('_', '').toLowerCase();
                text = rbkeyService.getRBKey('entity.' + text);
            }
            return text;
        };
    };
    return EntityRBKey;
}());
exports.EntityRBKey = EntityRBKey;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTrim = /** @class */ (function () {
    function SWTrim() {
    }
    //@ngInject
    SWTrim.Factory = function (rbkeyService) {
        return function (text, max, wordwise, tail) {
            if (wordwise === void 0) { wordwise = true; }
            if (tail === void 0) { tail = "..."; }
            if (angular.isDefined(text) && angular.isString(text)) {
                if (!text)
                    return '';
                max = parseInt(max, 10);
                if (!max)
                    return text;
                if (text.length <= max)
                    return text;
                text = text.substr(0, max);
                if (wordwise) {
                    var lastSpace = text.lastIndexOf(' ');
                    if (lastSpace != -1) {
                        text = text.substr(0, lastSpace);
                    }
                }
                return text + tail;
            }
            return text;
        };
    };
    return SWTrim;
}());
exports.SWTrim = SWTrim;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWUnique = /** @class */ (function () {
    function SWUnique() {
    }
    //@ngInject
    SWUnique.Factory = function () {
        var filterStub;
        filterStub = function (items, filterOn) {
            if (filterOn === false) {
                return items;
            }
            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var hashCheck = {}, newItems = [];
                var extractValueToCompare = function (item) {
                    if (angular.isDefined(item) && item[filterOn] != null) {
                        return item[filterOn];
                    }
                    return item;
                };
                angular.forEach(items, function (item) {
                    var isDuplicate = false;
                    for (var i = 0; i < newItems.length; i++) {
                        if (extractValueToCompare(newItems[i]) == extractValueToCompare(item)) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }
                });
            }
            return newItems;
        };
        //filterStub.$stateful = true;
        return filterStub;
    };
    return SWUnique;
}());
exports.SWUnique = SWUnique;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var DateFilter = /** @class */ (function () {
    function DateFilter() {
    }
    //@ngInject
    DateFilter.Factory = function ($filter) {
        return function (date, dateString) {
            if (date.trim().length === 0) {
                return '';
            }
            return $filter('date')(new Date(date), dateString);
        };
    };
    return DateFilter;
}());
exports.DateFilter = DateFilter;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerController = /** @class */ (function () {
    //@ngInject
    function SWActionCallerController($scope, $element, $templateRequest, $compile, $timeout, corePartialsPath, utilityService, observerService, $hibachi, rbkeyService, hibachiPathBuilder) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$onInit = function () {
            //Check if is NOT a ngRouter
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = _this.utilityService.isAngularRoute();
            }
            if (!_this.isAngularRoute) {
                _this.actionUrl = _this.$hibachi.buildUrl(_this.action, _this.queryString);
            }
            else {
                _this.actionUrl = '#!/entity/' + _this.action + '/' + _this.queryString.split('=')[1];
            }
            //            this.class = this.utilityService.replaceAll(this.utilityService.replaceAll(this.getAction(),':',''),'.','') + ' ' + this.class;
            _this.type = _this.type || 'link';
            if (angular.isDefined(_this.titleRbKey)) {
                _this.title = _this.rbkeyService.getRBKey(_this.titleRbKey);
            }
            if (angular.isUndefined(_this.text)) {
                _this.text = _this.title;
            }
            if (_this.type == "button") {
                //handle submit.
                /** in order to attach the correct controller to local vm, we need a watch to bind */
                var unbindWatcher = _this.$scope.$watch(function () { return _this.formController; }, function (newValue, oldValue) {
                    if (newValue !== undefined) {
                        _this.formController = newValue;
                    }
                    unbindWatcher();
                });
            }
            //            this.actionItem = this.getActionItem();
            //            this.actionItemEntityName = this.getActionItemEntityName();
            //            this.text = this.getText();
            //            if(this.getDisabled()){
            //                this.getDisabledText();
            //            }else if(this.getConfirm()){
            //                this.getConfirmText();
            //            }
            //
            //            if(this.modalFullWidth && !this.getDisabled()){
            //                this.class = this.class + " modalload-fullwidth";
            //            }
            //
            //            if(this.modal && !this.getDisabled() && !this.modalFullWidth){
            //                this.class = this.class + " modalload";
            //            }
            /*need authentication lookup by api to disable
            <cfif not attributes.hibachiScope.authenticateAction(action=attributes.action)>
                <cfset attributes.class &= " disabled" />
            </cfif>
            */
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.submit = function () {
            _this.$timeout(function () {
                if (!_this.form) {
                    _this.$scope.$root.slatwall.doAction(_this.action);
                }
                else if (_this.form.$valid) {
                    _this.formController.submit(_this.action);
                }
            });
        };
        this.getAction = function () {
            return _this.action || '';
        };
        this.getActionItem = function () {
            return _this.utilityService.listLast(_this.getAction(), '.');
        };
        this.getActionItemEntityName = function () {
            var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
            var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
            var minus4letters = _this.utilityService.right(_this.actionItem, 4);
            var minus6letters = _this.utilityService.right(_this.actionItem, 6);
            var actionItemEntityName = "";
            if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            return actionItemEntityName;
        };
        this.getTitle = function () {
            //if title is undefined then use text
            if (angular.isUndefined(_this.title) || !_this.title.length) {
                _this.title = _this.getText();
            }
            return _this.title;
        };
        this.getTextByRBKeyByAction = function (actionItemType, plural) {
            if (plural === void 0) { plural = false; }
            var navRBKey = _this.rbkeyService.getRBKey('admin.define.' + actionItemType + '_nav');
            var entityRBKey = '';
            var replaceKey = '';
            if (plural) {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName + '_plural');
                replaceKey = '${itemEntityNamePlural}';
            }
            else {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName);
                replaceKey = '${itemEntityName}';
            }
            return _this.utilityService.replaceAll(navRBKey, replaceKey, entityRBKey);
        };
        this.getText = function () {
            //if we don't have text then make it up based on rbkeys
            if (angular.isUndefined(_this.text) || (angular.isDefined(_this.text) && !_this.text.length)) {
                _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", ".") + '_nav');
                var minus8letters = _this.utilityService.right(_this.text, 8);
                //if rbkey is still missing. then can we infer it
                if (minus8letters === '_missing') {
                    var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
                    var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
                    var minus4letters = _this.utilityService.right(_this.actionItem, 4);
                    var minus6letters = _this.utilityService.right(_this.actionItem, 6);
                    if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('list', true);
                    }
                    else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('edit', false);
                    }
                    else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('save', false);
                    }
                    else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('create', false);
                    }
                    else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('detail', false);
                    }
                    else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('delete', false);
                    }
                }
                if (_this.utilityService.right(_this.text, 8)) {
                    _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", "."));
                }
            }
            if (!_this.title || (_this.title && !_this.title.length)) {
                _this.title = _this.text;
            }
            return _this.text;
        };
        this.getDisabled = function () {
            //if item is disabled
            if (angular.isDefined(_this.disabled) && _this.disabled) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getDisabledText = function () {
            if (_this.getDisabled()) {
                //and no disabled text specified
                if (angular.isUndefined(_this.disabledtext) || !_this.disabledtext.length) {
                    var disabledrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_disabled';
                    _this.disabledtext = _this.rbkeyService.getRBKey(disabledrbkey);
                }
                //add disabled class
                _this.class += " btn-disabled";
                _this.confirm = false;
                return _this.disabledtext;
            }
            return "";
        };
        this.getConfirm = function () {
            if (angular.isDefined(_this.confirm) && _this.confirm) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getConfirmText = function () {
            if (_this.getConfirm()) {
                if (angular.isUndefined(_this.confirmtext) && _this.confirmtext.length) {
                    var confirmrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_confirm';
                    _this.confirmtext = _this.rbkeyService.getRBKey(confirmrbkey);
                    /*<cfif right(attributes.confirmtext, "8") eq "_missing">
                        <cfset attributes.confirmtext = replace(attributes.hibachiScope.rbKey("admin.define.delete_confirm"),'${itemEntityName}', attributes.hibachiScope.rbKey('entity.#actionItemEntityName#'), "all") />
                    </cfif>*/
                }
                _this.class += " alert-confirm";
                return _this.confirm;
            }
            return "";
        };
        this.$scope = $scope;
        this.$element = $element;
        this.$timeout = $timeout;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "actioncaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)($scope);
            //need to perform init after promise completes
            //this.init();
        });
    }
    return SWActionCallerController;
}());
exports.SWActionCallerController = SWActionCallerController;
var SWActionCaller = /** @class */ (function () {
    function SWActionCaller(partialsPath, utiltiyService, $hibachi) {
        this.partialsPath = partialsPath;
        this.utiltiyService = utiltiyService;
        this.$hibachi = $hibachi;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            action: "@",
            text: "@",
            type: "@",
            queryString: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "@",
            iconOnly: "=",
            name: "@",
            confirm: "=",
            confirmtext: "@",
            disabled: "=",
            disabledtext: "@",
            modal: "=",
            modalFullWidth: "=",
            id: "@",
            isAngularRoute: "=?",
            eventListeners: '=?'
        };
        this.require = { formController: "^?swForm", form: "^?form" };
        this.controller = SWActionCallerController;
        this.controllerAs = "swActionCaller";
        this.link = function (scope, element, attrs) {
            if (angular.isDefined(scope.swActionCaller.formController)) {
                scope.formController = scope.swActionCaller.formController;
            }
        };
    }
    SWActionCaller.Factory = function () {
        var directive = function (partialsPath, utiltiyService, $hibachi) { return new SWActionCaller(partialsPath, utiltiyService, $hibachi); };
        directive.$inject = [
            'partialsPath',
            'utilityService',
            '$hibachi'
        ];
        return directive;
    };
    return SWActionCaller;
}());
exports.SWActionCaller = SWActionCaller;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearchController($scope, $q, $transclude, $hibachi, $timeout, utilityService, observerService, rbkeyService, collectionConfigService, typeaheadService, $http, requestService) {
        var _this = this;
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        this.typeaheadService = typeaheadService;
        this.$http = $http;
        this.requestService = requestService;
        this.results = [];
        this.columns = [];
        this.filters = [];
        this.searchableColumns = [];
        this.initialSearchableColumnsState = [];
        this.searchableColumnSelection = 'All';
        this.fallbackPropertyArray = [];
        this.clearSearch = function () {
            _this.searchText = "";
            _this.hideSearch = true;
            if (angular.isDefined(_this.addFunction)) {
                _this.addFunction()(undefined);
            }
        };
        this.toggleDropdown = function () {
            _this.dropdownOpen = !_this.dropdownOpen;
        };
        this.toggleOptions = function () {
            if (_this.hideSearch && (!_this.searchText || !_this.searchText.length)) {
                _this.search(_this.searchText);
            }
            _this.hideSearch = !_this.hideSearch;
        };
        /**
         * The actionCreator function for searching.
         */
        this.rSearch = function (search) {
            /**
             * Fire off an action that a search is happening.
             * Example action function. The dispatch takes a function, that sends data in a payload
             * to the reducer.
             */
            _this.typeaheadService.typeaheadStore.dispatch({
                "type": "TYPEAHEAD_QUERY",
                "payload": {
                    "searchText": search
                }
            });
        };
        this.search = function (search) {
            if (!search.length) {
                _this.closeThis();
                return;
            }
            _this.rSearch(search);
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this.collectionConfig.setKeywords(search);
            if (angular.isDefined(_this.filterGroupsConfig)) {
                //allows for filtering on search text
                var filterConfig = _this.filterGroupsConfig.replace("replaceWithSearchString", search);
                filterConfig = filterConfig.trim();
                _this.collectionConfig.loadFilterGroups(JSON.parse(filterConfig));
            }
            _this._timeoutPromise = _this.$timeout(function () {
                var promise;
                if (_this.searchEndpoint) {
                    promise = _this.requestService.newPublicRequest('/' + _this.searchEndpoint, {
                        search: search,
                        options: _this.collectionConfig.getOptions(),
                        entityName: _this.collectionConfig.baseEntityName
                    }, 'post', {
                        'Content-Type': 'application/json'
                    }).promise;
                }
                else {
                    promise = _this.collectionConfig.getEntity();
                }
                promise.then(function (response) {
                    _this.results = response.pageRecords || response.records;
                    _this.updateSelections();
                }).finally(function () {
                    _this.resultsDeferred.resolve();
                    _this.hideSearch = (_this.results.length == 0);
                });
            }, 500);
        };
        this.updateSelections = function () {
            _this.typeaheadService.updateSelections(_this.typeaheadDataKey);
        };
        this.updateSearchableProperties = function (column) {
            if (angular.isString(column) && column == 'all') {
                angular.copy(_this.initialSearchableColumnsState, _this.searchableColumns); //need to insure that these changes are actually on the collectionconfig
                _this.searchableColumnSelection = 'All';
            }
            else {
                angular.forEach(_this.searchableColumns, function (value, key) {
                    value.isSearchable = false;
                });
                column.isSearchable = true;
                _this.searchableColumnSelection = column.title;
            }
            //probably need to refetch the collection
        };
        this.addOrRemoveItem = function (item) {
            var remove = item.selected || false;
            if (!_this.hideSearch && !_this.multiselectMode) {
                _this.hideSearch = true;
            }
            if (!_this.multiselectMode) {
                if (angular.isDefined(_this.propertyToShow)) {
                    _this.searchText = item[_this.propertyToShow];
                }
                else if (angular.isDefined(_this.columns) &&
                    _this.columns.length &&
                    angular.isDefined(_this.columns[0].propertyIdentifier)) {
                    _this.searchText = item[_this.columns[0].propertyIdentifier];
                }
            }
            if (!remove && angular.isDefined(_this.addFunction)) {
                _this.addFunction()(item);
            }
            if (remove && angular.isDefined(_this.removeFunction)) {
                _this.removeFunction()(item.selectedIndex);
                item.selected = false;
                item.selectedIndex = undefined;
            }
            _this.updateSelections();
        };
        this.addButtonItem = function () {
            if (!_this.hideSearch) {
                _this.hideSearch = true;
            }
            if (angular.isDefined(_this.addButtonFunction)) {
                _this.addButtonFunction()(_this.searchText);
            }
        };
        this.viewButtonClick = function () {
            _this.viewFunction()();
        };
        this.closeThis = function (clickOutsideArgs) {
            _this.hideSearch = true;
            if (angular.isDefined(clickOutsideArgs)) {
                for (var callBackAction in clickOutsideArgs.callBackActions) {
                    clickOutsideArgs.callBackActions[callBackAction]();
                }
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.dropdownOpen = false;
        this.requestService = requestService;
        //populates all needed variables
        this.$transclude($scope, function () { });
        this.resultsDeferred = $q.defer();
        this.resultsPromise = this.resultsDeferred.promise;
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = false;
        }
        if (angular.isUndefined(this.searchText) || this.searchText == null) {
            this.searchText = "";
        }
        else {
            this.search(this.searchText);
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        if (angular.isUndefined(this.hideSearch)) {
            this.hideSearch = true;
        }
        if (angular.isUndefined(this.collectionConfig)) {
            if (angular.isDefined(this.entity)) {
                this.collectionConfig = collectionConfigService.newCollectionConfig(this.entity);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadSearch");
            }
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.primaryIDPropertyName = $hibachi.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName);
        }
        if (angular.isDefined(this.fallbackPropertiesToCompare) &&
            this.fallbackPropertiesToCompare.length) {
            this.fallbackPropertyArray = this.fallbackPropertiesToCompare.split(",");
        }
        if (angular.isDefined(this.placeholderRbKey)) {
            this.placeholderText = this.rbkeyService.getRBKey(this.placeholderRbKey);
        }
        else if (angular.isUndefined(this.placeholderText)) {
            this.placeholderText = this.rbkeyService.getRBKey('define.search');
        }
        //init timeoutPromise for link
        this._timeoutPromise = this.$timeout(function () { }, 500);
        if (angular.isDefined(this.propertiesToDisplay)) {
            this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(","));
        }
        angular.forEach(this.columns, function (column) {
            _this.collectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isUndefined(this.allRecords)) {
            this.allRecords = this.collectionConfig.allRecords;
        }
        this.collectionConfig.setAllRecords(this.allRecords);
        if (angular.isUndefined(this.maxRecords)) {
            this.maxRecords = 10;
        }
        this.collectionConfig.setPageShow(this.maxRecords);
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.initialEntityCollectionConfig = collectionConfigService.newCollectionConfig(this.collectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);
            var primaryIDProperty = $hibachi.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.addFilter(primaryIDProperty, this.initialEntityId, "=");
            var promise = this.initialEntityCollectionConfig.getEntity();
            promise.then(function (response) {
                _this.results = response.pageRecords;
                if (_this.results.length) {
                    _this.addOrRemoveItem(_this.results[0]);
                }
            });
        }
        angular.forEach(this.collectionConfig.columns, function (value, key) {
            if (value.isSearchable) {
                _this.searchableColumns.push(value);
            }
        });
        //need to insure that these changes are actually on the collectionconfig
        angular.copy(this.searchableColumns, this.initialSearchableColumnsState);
        this.typeaheadService.setTypeaheadState(this.typeaheadDataKey, this);
        this.observerService.attach(this.clearSearch, this.typeaheadDataKey + 'clearSearch');
        this.$http = $http;
    }
    return SWTypeaheadSearchController;
}());
exports.SWTypeaheadSearchController = SWTypeaheadSearchController;
var SWTypeaheadSearch = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            entity: "@?",
            properties: "@?",
            propertiesToDisplay: "@?",
            filterGroupsConfig: "@?",
            placeholderText: "@?",
            placeholderRbKey: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            searchText: "=?",
            results: "=?",
            addFunction: "&?",
            removeFunction: "&?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            showAddButton: "=?",
            showViewButton: "=?",
            validateRequired: "=?",
            uniqueResults: "<?",
            clickOutsideArguments: "=?",
            propertyToShow: "=?",
            hideSearch: "=?",
            allRecords: "=?",
            maxRecords: "=?",
            disabled: "=?",
            initialEntityId: "@",
            multiselectMode: "=?",
            typeaheadDataKey: "@?",
            rightContentPropertyIdentifier: "@?",
            searchEndpoint: "@?",
            allResultsEndpoint: "@?",
            titleText: '@?',
            urlBase: '@?',
            urlProperty: '@?'
        };
        this.controller = SWTypeaheadSearchController;
        this.controllerAs = "swTypeaheadSearch";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.addButtonFunction) && angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = true;
                    }
                    else if (angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = false;
                    }
                    if (angular.isDefined(attrs.viewFunction) && angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = true;
                    }
                    else if (angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = false;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".dropdown-menu");
                    var uniqueFilter = '';
                    if ($scope.swTypeaheadSearch.uniqueResults) {
                        uniqueFilter = " | unique:'" + _this.typeaheadService.getTypeaheadPrimaryIDPropertyName($scope.swTypeaheadSearch.typeaheadDataKey) + "'";
                    }
                    var listItemTemplateString = "\n                    <li ng-repeat=\"item in swTypeaheadSearch.results" + uniqueFilter + "\" class=\"dropdown-item\" ng-class=\"{'s-selected':item.selected}\"></li>\n                ";
                    var anchorTemplateString = "\n                    <a \n                ";
                    if (angular.isDefined($scope.swTypeaheadSearch.urlBase) &&
                        angular.isDefined($scope.swTypeaheadSearch.urlProperty)) {
                        anchorTemplateString += 'href="' + $scope.swTypeaheadSearch.urlBase + '{{item.' + $scope.swTypeaheadSearch.urlProperty + '}}">';
                    }
                    else {
                        anchorTemplateString += 'ng-click="swTypeaheadSearch.addOrRemoveItem(item)">';
                    }
                    if (angular.isDefined($scope.swTypeaheadSearch.rightContentPropertyIdentifier)) {
                        var rightContentTemplateString = "\n                        <span class=\"s-right-content\" ng-bind=\"item[swTypeaheadSearch.rightContentPropertyIdentifier]\"></span></a>\n                    ";
                    }
                    else {
                        var rightContentTemplateString = "</a>";
                    }
                    if (angular.isDefined($scope.swTypeaheadSearch.allResultsEndpoint)) {
                        var searchAllListItemTemplate = "\n                        <li class=\"dropdown-item see-all-results\" ng-if=\"swTypeaheadSearch.results.length == swTypeaheadSearch.maxRecords\"><a href=\"{{swTypeaheadSearch.allResultsEndpoint}}?keywords={{swTypeaheadSearch.searchText}}\">See All Results</a></li>\n                    ";
                    }
                    anchorTemplateString = anchorTemplateString + rightContentTemplateString;
                    var listItemTemplate = angular.element(listItemTemplateString);
                    var anchorTemplate = angular.element(anchorTemplateString);
                    anchorTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    listItemTemplate.append(anchorTemplate);
                    $scope.swTypeaheadSearch.resultsPromise.then(function () {
                        target.append(_this.$compile(listItemTemplate)($scope));
                        if (searchAllListItemTemplate != null) {
                            target.append(_this.$compile(searchAllListItemTemplate)($scope));
                        }
                    });
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadsearch.html";
    }
    SWTypeaheadSearch.Factory = function () {
        var directive = function ($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "typeaheadService", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadSearch;
}());
exports.SWTypeaheadSearch = SWTypeaheadSearch;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadInputFieldController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputFieldController($scope, $transclude, collectionConfigService, typeaheadService, $rootScope, observerService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.collectionConfigService = collectionConfigService;
        this.typeaheadService = typeaheadService;
        this.$rootScope = $rootScope;
        this.observerService = observerService;
        this.columns = [];
        this.filters = [];
        this.addFunction = function (value) {
            _this.typeaheadService.typeaheadStore.dispatch({
                "type": "TYPEAHEAD_USER_SELECTION",
                "payload": {
                    name: _this.fieldName || "",
                    data: value[_this.propertyToSave] || ""
                }
            });
            _this.modelValue = value[_this.propertyToSave];
            if (_this.action) {
                var data = {};
                if (_this.variables) {
                    data = _this.variables();
                }
                data['value'] = _this.modelValue;
                _this.$root.slatwall.doAction(_this.action, data);
            }
        };
        this.$root = $rootScope;
        if (angular.isUndefined(this.typeaheadCollectionConfig)) {
            if (angular.isDefined(this.entityName)) {
                this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(this.entityName);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadInputField");
            }
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        //get the collection config
        this.$transclude($scope, function () { });
        if (angular.isUndefined(this.propertyToSave)) {
            throw ("You must select a property to save for the input field directive");
        }
        if (angular.isDefined(this.propertiesToLoad)) {
            this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad);
        }
        angular.forEach(this.columns, function (column) {
            _this.typeaheadCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.typeaheadCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.modelValue = this.initialEntityId;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWTypeaheadInputFieldController;
}());
exports.SWTypeaheadInputFieldController = SWTypeaheadInputFieldController;
var SWTypeaheadInputField = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            fieldName: "@",
            entityName: "@",
            typeaheadCollectionConfig: "=?",
            propertiesToLoad: "@?",
            placeholderRbKey: "@?",
            propertyToShow: "@",
            propertyToSave: "@",
            initialEntityId: "@",
            allRecords: "=?",
            validateRequired: "=?",
            maxRecords: "@",
            action: "@",
            variables: '&?',
            eventListeners: '=?',
            placeholderText: '@?',
            searchEndpoint: '@?',
            titleText: '@?'
        };
        this.controller = SWTypeaheadInputFieldController;
        this.controllerAs = "swTypeaheadInputField";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadinputfield.html";
    }
    SWTypeaheadInputField.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadInputField;
}());
exports.SWTypeaheadInputField = SWTypeaheadInputField;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadMultiselectController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselectController($scope, $transclude, $hibachi, listingService, typeaheadService, utilityService, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.addSelection = function (item) {
            _this.typeaheadService.addSelection(_this.typeaheadDataKey, item);
            if (_this.inListingDisplay) {
                _this.listingService.insertListingPageRecord(_this.listingId, item);
            }
        };
        this.removeSelection = function (index) {
            var itemRemoved = _this.typeaheadService.removeSelection(_this.typeaheadDataKey, index);
            if (_this.inListingDisplay) {
                _this.listingService.removeListingPageRecord(_this.listingId, itemRemoved);
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.updateSelectionList = function () {
            _this.selectionList = _this.typeaheadService.updateSelectionList(_this.typeaheadDataKey);
        };
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.showSelections)) {
            this.showSelections = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = true;
        }
        if (angular.isUndefined(this.hasAddButtonFunction)) {
            this.hasAddButtonFunction = false;
        }
        if (angular.isUndefined(this.hasViewFunction)) {
            this.hasViewFunction = false;
        }
        if (angular.isDefined(this.selectedCollectionConfig)) {
            this.typeaheadService.initializeSelections(this.typeaheadDataKey, this.selectedCollectionConfig);
        }
        this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey, this.updateSelectionList);
    }
    return SWTypeaheadMultiselectController;
}());
exports.SWTypeaheadMultiselectController = SWTypeaheadMultiselectController;
var SWTypeaheadMultiselect = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            placeholderRbKey: "@",
            collectionConfig: "=?",
            selectedCollectionConfig: "=?",
            typeaheadDataKey: "@?",
            multiselectModeOn: "=?multiselectMode",
            showSelections: "=?",
            dataTarget: "=?",
            dataTargetIndex: "=?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            inListingDisplay: "=?",
            listingId: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            rightContentPropertyIdentifier: "@?",
            selectionFieldName: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadMultiselectController;
        this.controllerAs = "swTypeaheadMultiselect";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    //because callbacks are defined even when they're not passed in, this needs to be communicated to the typeahead
                    if (angular.isDefined(attrs.addButtonFunction)) {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = false;
                    }
                    if (angular.isDefined(attrs.viewFunction)) {
                        $scope.swTypeaheadMultiselect.viewFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.viewFunction = false;
                    }
                    if (angular.isUndefined($scope.swTypeaheadMultiselect.inListingDisplay)) {
                        $scope.swTypeaheadMultiselect.inListingDisplay = false;
                    }
                    if ($scope.swTypeaheadMultiselect.inListingDisplay && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swTypeaheadMultiselect.listingId = listingDisplayScope.tableID;
                        listingDisplayScope.typeaheadDataKey = $scope.swTypeaheadMultiselect.typeaheadDataKey;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".s-selected-list");
                    var selectedItemTemplate = angular.element('<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">');
                    var closeButton = angular.element('<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>');
                    selectedItemTemplate.append(closeButton);
                    selectedItemTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    target.append(_this.$compile(selectedItemTemplate)($scope));
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadmultiselect.html";
    }
    SWTypeaheadMultiselect.Factory = function () {
        var directive = function ($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "typeaheadService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadMultiselect;
}());
exports.SWTypeaheadMultiselect = SWTypeaheadMultiselect;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchLineItemController = /** @class */ (function () {
    function SWTypeaheadSearchLineItemController() {
    }
    return SWTypeaheadSearchLineItemController;
}());
exports.SWTypeaheadSearchLineItemController = SWTypeaheadSearchLineItemController;
var SWTypeaheadSearchLineItem = /** @class */ (function () {
    //@ngInject
    function SWTypeaheadSearchLineItem($compile) {
        this.$compile = $compile;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            isSearchable: "@?",
        };
        this.controller = SWTypeaheadSearchLineItemController;
        this.controllerAs = "swTypeaheadSearchLineItem";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function (scope, element, attrs) {
                    var innerHTML = element[0].innerHTML;
                    element[0].innerHTML = '';
                    var span = '<span ng-if="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '.toString().trim().length">' + ' ' + innerHTML + '</span> <span ng-bind="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '"></span>';
                    element.append(span);
                },
                post: function (scope, element, attrs) { }
            };
        };
    }
    SWTypeaheadSearchLineItem.Factory = function () {
        var directive = function ($compile) { return new SWTypeaheadSearchLineItem($compile); };
        directive.$inject = [
            '$compile'
        ];
        return directive;
    };
    return SWTypeaheadSearchLineItem;
}());
exports.SWTypeaheadSearchLineItem = SWTypeaheadSearchLineItem;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadRemoveSelectionController = /** @class */ (function () {
    function SWTypeaheadRemoveSelectionController($scope, listingService, scopeService, typeaheadService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.updatePageRecord = function () {
            if (_this.scopeService.hasParentScope(_this.$scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(_this.$scope, "pageRecord")["pageRecord"];
                _this.pageRecord = pageRecordScope;
            }
        };
        this.removeSelection = function () {
            if (!_this.disabled) {
                _this.typeaheadService.removeSelection(_this.typeaheadDataKey, undefined, _this.pageRecord);
                _this.listingService.removeListingPageRecord(_this.listingId, _this.pageRecord);
            }
        };
        this.listingService.attachToListingPageRecordsUpdate(this.listingId, this.updatePageRecord, this.utilityService.createID(32));
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
    }
    return SWTypeaheadRemoveSelectionController;
}());
exports.SWTypeaheadRemoveSelectionController = SWTypeaheadRemoveSelectionController;
var SWTypeaheadRemoveSelection = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.scopeService = scopeService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            typeaheadDataKey: "@?",
            index: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadRemoveSelectionController;
        this.controllerAs = "swTypeaheadRemoveSelection";
        this.link = function (scope, element, attrs) {
            if (_this.scopeService.hasParentScope(scope, "swListingDisplay")) {
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];
                scope.swTypeaheadRemoveSelection.typeaheadDataKey = listingDisplayScope.typeaheadDataKey;
                scope.swTypeaheadRemoveSelection.listingId = listingDisplayScope.tableID;
            }
            if (_this.scopeService.hasParentScope(scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(scope, "pageRecord")["pageRecord"];
                scope.swTypeaheadRemoveSelection.pageRecord = pageRecordScope;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadremoveselection.html";
    }
    SWTypeaheadRemoveSelection.Factory = function () {
        var directive = function (scopeService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["scopeService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadRemoveSelection;
}());
exports.SWTypeaheadRemoveSelection = SWTypeaheadRemoveSelection;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionConfigController = /** @class */ (function () {
    //@ngInject
    function SWCollectionConfigController($transclude, $q, collectionConfigService) {
        this.$transclude = $transclude;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filters = [];
        this.columns = [];
        this.orderBys = [];
        this.keywordColumns = [];
        this.columnsDeferred = this.$q.defer();
        this.columnsPromise = this.columnsDeferred.promise;
        this.filtersDeferred = this.$q.defer();
        this.filtersPromise = this.filtersDeferred.promise;
        this.orderBysDeferred = this.$q.defer();
        this.orderBysPromise = this.columnsDeferred.promise;
    }
    return SWCollectionConfigController;
}());
exports.SWCollectionConfigController = SWCollectionConfigController;
var SWCollectionConfig = /** @class */ (function () {
    // @ngInject
    function SWCollectionConfig(collectionConfigService, listingService, scopeService, $q) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            columns: "?swCollectionColumns",
            filters: "?swCollectionFilters",
            orderBys: "?swCollectionOrderBys"
        };
        this.bindToController = {
            allRecords: "=?",
            collectionConfigProperty: "@?",
            distinct: "=?",
            entityName: "@",
            filterFlag: "=?",
            inListingDisplay: "=?",
            multiCollectionConfigProperty: "@?",
            pageShow: "@?",
            parentDirectiveControllerAsName: "@?",
            parentDeferredProperty: "@?"
        };
        this.controller = SWCollectionConfigController;
        this.controllerAs = "swCollectionConfig";
        this.template = " \n        <div ng-transclude=\"columns\"></div>\n        <div ng-transclude=\"filters\"></div>\n        <div ng-transclude=\"orderBys\"></div>\n    ";
        this.link = function (scope, element, attrs) {
            //some automatic configuration for listing display
            if (angular.isUndefined(scope.swCollectionConfig.inListingDisplay)) {
                scope.swCollectionConfig.inListingDisplay = false;
            }
            if (scope.swCollectionConfig.inListingDisplay) {
                scope.swCollectionConfig.parentDirectiveControllerAsName = "swListingDisplay";
                scope.swCollectionConfig.parentDeferredProperty = "singleCollectionDeferred";
            }
            if (angular.isUndefined(scope.swCollectionConfig.entityName)) {
                throw ("You must provide an entityname to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.parentDirectiveControllerAsName) && !scope.swCollectionConfig.inListingDisplay) {
                throw ("You must provide the parent directives Controller-As Name to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.collectionConfigProperty)) {
                scope.swCollectionConfig.collectionConfigProperty = "collectionConfig";
            }
            if (angular.isUndefined(scope.swCollectionConfig.allRecords)) {
                scope.swCollectionConfig.allRecords = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.pageShow)) {
                scope.swCollectionConfig.pageShow = 10;
            }
            if (angular.isUndefined(scope.swCollectionConfig.distinct)) {
                scope.swCollectionConfig.distinct = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.filterFlag)) {
                scope.swCollectionConfig.filterFlag = true; //assume there are filters
            }
            var allCollectionConfigPromises = [];
            var currentScope = scope;
            //we want to wait for all sibling scopes before pushing the collection config
            while (angular.isDefined(currentScope)) {
                if (angular.isDefined(currentScope.swCollectionConfig)) {
                    allCollectionConfigPromises.push(currentScope.swCollectionConfig.columnsPromise);
                    if (scope.swCollectionConfig.filterFlag) {
                        allCollectionConfigPromises.push(currentScope.swCollectionConfig.filtersPromise);
                    }
                }
                currentScope = currentScope.$$nextSibling;
                if (currentScope == null) {
                    break;
                }
            }
            var newCollectionConfig = _this.collectionConfigService.newCollectionConfig(scope.swCollectionConfig.entityName);
            newCollectionConfig.setAllRecords(scope.swCollectionConfig.allRecords);
            newCollectionConfig.setDistinct(scope.swCollectionConfig.distinct);
            newCollectionConfig.setPageShow(scope.swCollectionConfig.pageShow);
            var currentScope = _this.scopeService.getRootParentScope(scope, scope.swCollectionConfig.parentDirectiveControllerAsName);
            if (currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName]) {
                var parentDirective = currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName];
            }
            else {
                throw ("swCollectionConfig was unable to find a parent scope");
            }
            scope.swCollectionConfig.columnsPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.columns, function (column) {
                    newCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
                });
            });
            scope.swCollectionConfig.filtersPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.filters, function (filter) {
                    newCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
            });
            scope.swCollectionConfig.orderBysPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.orderBys, function (orderBy) {
                    newCollectionConfig.addOrderBy(orderBy);
                });
            });
            _this.$q.all(allCollectionConfigPromises).then(function () {
                if (angular.isDefined(parentDirective)) {
                    if (angular.isDefined(scope.swCollectionConfig.multiCollectionConfigProperty)
                        && angular.isDefined(parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty].push(newCollectionConfig);
                    }
                    else if (angular.isDefined(parentDirective[scope.swCollectionConfig.collectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.collectionConfigProperty] = newCollectionConfig;
                    }
                    else {
                        throw ("swCollectionConfig could not locate a collection config property to bind it's collection to");
                    }
                    if (angular.isDefined(parentDirective[scope.swCollectionConfig.parentDeferredProperty])) {
                        parentDirective[scope.swCollectionConfig.parentDeferredProperty].resolve();
                    }
                    else {
                        //throw("SWCollectionConfig cannot resolve rule");
                    }
                }
            }, function (reason) {
                throw ("SWCollectionConfig is having some issues.");
            });
        };
    }
    SWCollectionConfig.Factory = function () {
        var directive = function (collectionConfigService, listingService, scopeService, $q) { return new SWCollectionConfig(collectionConfigService, listingService, scopeService, $q); };
        directive.$inject = [
            'collectionConfigService',
            'listingService',
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWCollectionConfig;
}());
exports.SWCollectionConfig = SWCollectionConfig;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionFilterController = /** @class */ (function () {
    function SWCollectionFilterController() {
    }
    return SWCollectionFilterController;
}());
exports.SWCollectionFilterController = SWCollectionFilterController;
var SWCollectionFilter = /** @class */ (function () {
    //@ngInject
    function SWCollectionFilter(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@?",
            comparisonValue: "@?",
            logicalOperator: "@?",
            hidden: "@?"
        };
        this.controller = SWCollectionFilterController;
        this.controllerAs = "SWCollectionFilter";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.SWCollectionFilter.propertyIdentifier,
                comparisonOperator: scope.SWCollectionFilter.comparisonOperator,
                comparisonValue: scope.SWCollectionFilter.comparisonValue,
                logicalOperator: scope.SWCollectionFilter.logicalOperator,
                hidden: scope.SWCollectionFilter.hidden
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.filters.push(filter);
                currentScope.swCollectionConfig.filtersDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionfilter");
            }
        };
    }
    SWCollectionFilter.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionFilter(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionFilter;
}());
exports.SWCollectionFilter = SWCollectionFilter;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionOrderByController = /** @class */ (function () {
    function SWCollectionOrderByController() {
    }
    return SWCollectionOrderByController;
}());
exports.SWCollectionOrderByController = SWCollectionOrderByController;
var SWCollectionOrderBy = /** @class */ (function () {
    //@ngInject
    function SWCollectionOrderBy(scopeService) {
        var _this = this;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@"
        };
        this.controller = SWCollectionOrderByController;
        this.controllerAs = "SWCollectionOrderBy";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var orderBy = scope.SWCollectionOrderBy.orderBy;
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.orderBys.push(orderBy);
                currentScope.swCollectionConfig.orderBysDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionorderby");
            }
        };
    }
    SWCollectionOrderBy.Factory = function () {
        var directive = function (scopeService) { return new SWCollectionOrderBy(scopeService); };
        directive.$inject = [
            'scopeService'
        ];
        return directive;
    };
    return SWCollectionOrderBy;
}());
exports.SWCollectionOrderBy = SWCollectionOrderBy;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionColumnController = /** @class */ (function () {
    function SWCollectionColumnController() {
    }
    return SWCollectionColumnController;
}());
exports.SWCollectionColumnController = SWCollectionColumnController;
var SWCollectionColumn = /** @class */ (function () {
    //@ngInject
    function SWCollectionColumn(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            fallbackPropertyIdentifiers: "@?",
            isVisible: "=?",
            isSearchable: "=?",
            isDeletable: "=?",
            isExportable: "=?",
            isKeywordColumn: "=?",
            isOnlyKeywordColumn: "=?",
            tdclass: "@?",
            hidden: "=?"
        };
        this.controller = SWCollectionColumn;
        this.controllerAs = "swCollectionColumn";
        this.template = "";
        this.link = function (scope, element, attrs) {
            if (angular.isUndefined(scope.swCollectionColumn.isKeywordColumn)) {
                scope.swCollectionColumn.isKeywordColumn = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isOnlyKeywordColumn)) {
                scope.swCollectionColumn.isOnlyKeywordColumn = scope.swCollectionColumn.isKeywordColumn;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isVisible)) {
                scope.swCollectionColumn.isVisible = true;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isSearchable)) {
                scope.swCollectionColumn.isSearchable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isDeletable)) {
                scope.swCollectionColumn.isDeletable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isExportable)) {
                scope.swCollectionColumn.isExportable = true;
            }
            var column = {
                propertyIdentifier: scope.swCollectionColumn.propertyIdentifier,
                fallbackPropertyIdentifiers: scope.swCollectionColumn.fallbackPropertyIdentifiers,
                isVisible: scope.swCollectionColumn.isVisible,
                isSearchable: scope.swCollectionColumn.isSearchable,
                isDeletable: scope.swCollectionColumn.isDeletable,
                isExportable: scope.swCollectionColumn.isExportable,
                hidden: scope.swCollectionColumn.hidden,
                tdclass: scope.swCollectionColumn.tdclass,
                isKeywordColumn: scope.swCollectionColumn.isKeywordColumn,
                isOnlyKeywordColumn: scope.swCollectionColumn.isOnlyKeywordColumn
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                //push directly here because we've already built the column object
                currentScope.swCollectionConfig.columns.push(column);
                currentScope.swCollectionConfig.columnsDeferred.resolve();
            }
            else {
                throw ("Could not find swCollectionConfig in the parent scope from swcollectioncolumn");
            }
        };
    }
    SWCollectionColumn.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionColumn(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionColumn;
}());
exports.SWCollectionColumn = SWCollectionColumn;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerDropdownController = /** @class */ (function () {
    function SWActionCallerDropdownController() {
        this.title = this.title || '';
        this.icon = this.icon || 'plus';
        this.type = this.type || 'button';
        this.dropdownClass = this.dropdownClass || '';
        this.dropdownId = this.dropdownId || '';
        this.buttonClass = this.buttonClass || 'btn-primary';
    }
    return SWActionCallerDropdownController;
}());
exports.SWActionCallerDropdownController = SWActionCallerDropdownController;
var SWActionCallerDropdown = /** @class */ (function () {
    function SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            title: "@",
            icon: "@",
            type: "=",
            dropdownClass: "@",
            dropdownId: "@",
            buttonClass: "@"
        };
        this.controller = SWActionCallerDropdownController;
        this.controllerAs = "swActionCallerDropdown";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'actioncallerdropdown.html';
    }
    SWActionCallerDropdown.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWActionCallerDropdown;
}());
exports.SWActionCallerDropdown = SWActionCallerDropdown;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnSorter = /** @class */ (function () {
    //@ngInject
    function SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                column: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "columnsorter.html",
            link: function (scope, element, attrs) {
                var orderBy = {
                    "propertyIdentifier": scope.column.propertyIdentifier,
                };
                scope.sortAsc = function () {
                    orderBy.direction = 'Asc';
                    this.observerService.notify('sortByColumn', orderBy);
                };
                scope.sortDesc = function () {
                    orderBy.direction = 'Desc';
                    observerService.notify('sortByColumn', orderBy);
                };
            }
        };
    }
    SWColumnSorter.Factory = function () {
        var directive = function (observerService, corePartialsPath, hibachiPathBuilder) { return new SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWColumnSorter;
}());
exports.SWColumnSorter = SWColumnSorter;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * <------------------------------------------------------------------------------------------------------------------------------------>
 *   This directive can be used to prompt the user with a confirmation dialog.
 *
 *   Example Usage 1:
 *   <a swconfirm
 *   						use-rb-key=true
 * 							yes-text="define.yes"
 * 							no-text="define.no"
 * 							confirm-text="define.confirm"
 * 							message-text="define.delete.message"
 * 							callback="someFunction()">
 *   </a>
 *   Alternate Version (No Rbkeys):
 *   <a swconfirm
 *   						use-rb-key=false
 * 							yes-text="Sure"
 * 							no-text="Not Sure!"
 * 							confirm-text="Sure"
 * 							message-text="Are you sure?"
 * 							callback="sure()">
 *   </a>
 *
 *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal as we interpolate
 *   those.
 *
 *   [yes] [no] [confirm] [message] [callback]
 *
 *   The above words in upper-case can be used - just not those words inside square brackets.
 *   Note: Your callback function on-confirm should return true;
 *<------------------------------------------------------------------------------------------------------------------------------------->
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SWConfirm = /** @class */ (function () {
    //@ngInject
    function SWConfirm($log, $modal) {
        var buildConfirmationModal = function (simple, useRbKey, confirmText, messageText, noText, yesText) {
            /* Keys */
            var confirmKey = "[confirm]";
            var messageKey = "[message]";
            var noKey = "[no]";
            var yesKey = "[yes]";
            var swRbKey = "sw-rbkey=";
            /* Values */
            var confirmVal = "<confirm>";
            var messageVal = "<message>";
            var noVal = "<no>";
            var yesVal = "<yes>";
            /* Parse Tags */
            var startTag = "\"'";
            var endTag = "'\"";
            var startParen = "'";
            var endParen = "'";
            var empty = "";
            /* Modal String */
            var parsedKeyString = "";
            var finishedString = "";
            //Figure out which version of this tag we are using
            var templateString = "<div>" +
                "<div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>×</a><h3 [confirm]><confirm></h3></div>" +
                "<div class='modal-body' [message]>" + "<message>" + "</div>" +
                "<div class='modal-footer'>" +
                "<button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button>" +
                "<button class='btn btn-sm btn-default btn-primary' ng-click='fireCallback(callback)' [yes]><yes></button></div></div></div>";
            /* Use RbKeys or Not? */
            if (useRbKey === "true") {
                $log.debug("Using RbKey? " + useRbKey);
                /* Then decorate the template with the keys. */
                confirmText = swRbKey + startTag + confirmText + endTag;
                messageText = swRbKey + startTag + messageText + endTag;
                yesText = swRbKey + startTag + yesText + endTag;
                noText = swRbKey + startTag + noText + endTag;
                parsedKeyString = templateString.replace(confirmKey, confirmText)
                    .replace(messageText, messageText)
                    .replace(noKey, noText)
                    .replace(yesKey, yesText);
                $log.debug(finishedString);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageVal, empty)
                    .replace(noVal, empty)
                    .replace(yesVal, empty);
                $log.debug(finishedString);
                return finishedString;
            }
            else {
                /* Then decorate the template without the keys. */
                $log.debug("Using RbKey? " + useRbKey);
                parsedKeyString = templateString.replace(confirmVal, confirmText)
                    .replace(messageVal, messageText)
                    .replace(noVal, noText)
                    .replace(yesVal, yesText);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageKey, empty)
                    .replace(noKey, empty)
                    .replace(yesKey, empty);
                $log.debug(finishedString);
                return finishedString;
            }
        };
        return {
            restrict: 'EA',
            scope: {
                callback: "&",
                entity: "="
            },
            link: function (scope, element, attr) {
                /* Grab the template and build the modal on click */
                $log.debug("Modal is: ");
                $log.debug($modal);
                element.bind('click', function () {
                    /* Default Values */
                    var useRbKey = attr.useRbKey || "false";
                    var simple = attr.simple || false;
                    var yesText = attr.yesText || "define.yes";
                    var noText = attr.noText || "define.no";
                    var confirmText = attr.confirmText || "define.delete";
                    var messageText = attr.messageText || "define.delete_message";
                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText);
                    var modalInstance = $modal.open({
                        template: templateString,
                        controller: 'confirmationController',
                        scope: scope
                    });
                    /**
                        * Handles the result - callback or dismissed
                        */
                    modalInstance.result.then(function (result) {
                        $log.debug("Result:" + result);
                        return true;
                    }, function () {
                        //There was an error
                    });
                }); //<--end bind
            }
        };
    }
    SWConfirm.Factory = function () {
        var directive = function ($log, $modal) { return new SWConfirm($log, $modal); };
        directive.$inject = ['$log', '$modal'];
        return directive;
    };
    return SWConfirm;
}());
exports.SWConfirm = SWConfirm;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableController = /** @class */ (function () {
    //@ngInject
    function SWDraggableController() {
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableController;
}());
var SWDraggable = /** @class */ (function () {
    //@ngInject
    function SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            //all fields required
            draggable: "=",
            draggableRecord: "=",
            draggableKey: "="
        };
        this.controller = SWDraggableController;
        this.controllerAs = "swDraggable";
        this.link = function (scope, element, attrs) {
            scope.$watch('swDraggable.draggable', function (newValue, oldValue) {
                angular.element(element).attr("draggable", newValue);
                var id = angular.element(element).attr("id");
                if (!id) {
                    id = _this.utilityService.createID(32);
                }
                if (newValue) {
                    element.bind("dragstart", function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        if (!scope.swDraggable.draggable)
                            return false;
                        element.addClass("s-dragging");
                        scope.swDraggable.draggableRecord.draggableStartKey = scope.swDraggable.draggableKey;
                        e.dataTransfer.setData("application/json", angular.toJson(scope.swDraggable.draggableRecord));
                        e.dataTransfer.effectAllowed = "move";
                        e.dataTransfer.setDragImage(element[0], 0, 0);
                    });
                    element.bind("dragend", function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        element.removeClass("s-dragging");
                    });
                }
                else {
                    element.unbind("dragstart");
                    element.unbind("dragged");
                }
            });
        };
    }
    SWDraggable.Factory = function () {
        var directive = function (corePartialsPath, utilityService, draggableService, hibachiPathBuilder) { return new SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            'corePartialsPath',
            'utilityService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggable;
}());
exports.SWDraggable = SWDraggable;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableContainerController = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainerController(draggableService) {
        this.draggableService = draggableService;
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableContainerController;
}());
var SWDraggableContainer = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            draggable: "=?",
            draggableRecords: "=?",
            dropEventName: "@?",
            listingId: "@?"
        };
        this.controller = SWDraggableContainerController;
        this.controllerAs = "swDraggableContainer";
        this.link = function (scope, element, attrs) {
            scope.$watch('swDraggableContainer.draggable', function (newValue, oldValue) {
                angular.element(element).attr("draggable", newValue);
                var placeholderElement = angular.element("<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>"); //temporarirly hardcoding tds so it will show up
                var id = angular.element(element).attr("id");
                if (!id) {
                    id = _this.utilityService.createID(32);
                }
                var listNode = element[0];
                var placeholderNode = placeholderElement[0];
                placeholderElement.remove();
                if (newValue) {
                    element.on('drop', function (e) {
                        e = e.originalEvent || e;
                        e.preventDefault();
                        if (!_this.draggableService.isDropAllowed(e))
                            return true;
                        var record = e.dataTransfer.getData("application/json") || e.dataTransfer.getData("text/plain");
                        var parsedRecord = JSON.parse(record);
                        var index = Array.prototype.indexOf.call(listNode.children, placeholderNode);
                        if (index < parsedRecord.draggableStartKey) {
                            parsedRecord.draggableStartKey++;
                        }
                        _this.$timeout(function () {
                            scope.swDraggableContainer.draggableRecords.splice(index, 0, parsedRecord);
                            scope.swDraggableContainer.draggableRecords.splice(parsedRecord.draggableStartKey, 1);
                        }, 0);
                        if (angular.isDefined(scope.swDraggableContainer.listingId)) {
                            _this.listingService.notifyListingPageRecordsUpdate(scope.swDraggableContainer.listingId);
                        }
                        else if (angular.isDefined(scope.swDraggableContainer.dropEventName)) {
                            _this.observerService.notify(scope.swDraggableContainer.dropEventName);
                        }
                        placeholderElement.remove();
                        e.stopPropagation();
                        return false;
                    });
                    element.on('dragenter', function (e) {
                        e = e.originalEvent || e;
                        if (!_this.draggableService.isDropAllowed(e))
                            return true;
                        e.preventDefault();
                    });
                    element.on('dragleave', function (e) {
                        e = e.originalEvent || e;
                        if (e.pageX != 0 || e.pageY != 0) {
                            return false;
                        }
                        return false;
                    });
                    element.on('dragover', function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        if (placeholderNode.parentNode != listNode) {
                            element.append(placeholderElement);
                        }
                        if (e.target !== listNode) {
                            var listItemNode = e.target;
                            while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {
                                listItemNode = listItemNode.parentNode;
                            }
                            if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {
                                if (_this.draggableService.isMouseInFirstHalf(e, listItemNode)) {
                                    listNode.insertBefore(placeholderNode, listItemNode);
                                }
                                else {
                                    listNode.insertBefore(placeholderNode, listItemNode.nextSibling);
                                }
                            }
                        }
                        element.addClass("s-dragged-over");
                        return false;
                    });
                }
            });
        };
    }
    SWDraggableContainer.Factory = function () {
        var directive = function ($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) { return new SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'listingService',
            'observerService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggableContainer;
}());
exports.SWDraggableContainer = SWDraggableContainer;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWEntityActionBarController = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.init = function () {
            if (angular.isDefined(_this.pageTitleRbKey)) {
                _this.pageTitle = _this.rbkeyService.getRBKey(_this.pageTitleRbKey);
            }
        };
        this.init();
    }
    return SWEntityActionBarController;
}());
var SWEntityActionBar = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBar(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            /*Core settings*/
            type: "@",
            object: "=",
            pageTitle: "@?",
            pageTitleRbKey: "@?",
            edit: "=",
            /*Action Callers (top buttons)*/
            showcancel: "=",
            showcreate: "=",
            showedit: "=",
            showdelete: "=",
            /*Basic Action Caller Overrides*/
            createModal: "=",
            createAction: "=",
            createQueryString: "=",
            backAction: "=",
            backQueryString: "=",
            cancelAction: "=",
            cancelQueryString: "=",
            deleteAction: "=",
            deleteQueryString: "=",
            /*Process Specific Values*/
            processAction: "=",
            processContext: "="
        };
        this.controller = SWEntityActionBarController;
        this.controllerAs = "swEntityActionBar";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbar.html';
    }
    SWEntityActionBar.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBar(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBar;
}());
exports.SWEntityActionBar = SWEntityActionBar;
//	angular.module('slatwalladmin').directive('swEntityActionBar',['corePartialsPath',(corePartialsPath) => new SWEntityActionBar(corePartialsPath)]);


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEntityActionBarButtonGroupController = /** @class */ (function () {
    function SWEntityActionBarButtonGroupController() {
    }
    return SWEntityActionBarButtonGroupController;
}());
var SWEntityActionBarButtonGroup = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {};
        this.controller = SWEntityActionBarButtonGroupController;
        this.controllerAs = "swEntityActionBarButtonGroup";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbarbuttongroup.html';
    }
    SWEntityActionBarButtonGroup.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath',
            'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBarButtonGroup;
}());
exports.SWEntityActionBarButtonGroup = SWEntityActionBarButtonGroup;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWExpandableRecordController = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecordController($timeout, $hibachi, utilityService, collectionConfigService, expandableService, listingService, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.expandableService = expandableService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.childrenLoaded = false;
        this.childrenOpen = false;
        this.children = [];
        this.refreshChildren = function () {
            _this.getEntity();
        };
        this.setupChildCollectionConfig = function () {
            _this.childCollectionConfig = _this.collectionConfigService.newCollectionConfig(_this.entity.metaData.className);
            //set up parent
            var parentName = _this.entity.metaData.hb_parentPropertyName;
            var parentCFC = _this.entity.metaData[parentName].cfc;
            _this.parentIDName = _this.$hibachi.getEntityExample(parentCFC).$$getIDName();
            //set up child
            var childName = _this.entity.metaData.hb_childPropertyName;
            var childCFC = _this.entity.metaData[childName].cfc;
            var childIDName = _this.$hibachi.getEntityExample(childCFC).$$getIDName();
            _this.childCollectionConfig.clearFilterGroups();
            _this.childCollectionConfig.collection = _this.entity;
            _this.childCollectionConfig.addFilter(parentName + '.' + _this.parentIDName, _this.parentId);
            _this.childCollectionConfig.setAllRecords(true);
            angular.forEach(_this.collectionConfig.columns, function (column) {
                _this.childCollectionConfig.addColumn(column.propertyIdentifier, column.title, column);
            });
            angular.forEach(_this.collectionConfig.joins, function (join) {
                _this.childCollectionConfig.addJoin(join);
            });
            _this.childCollectionConfig.groupBys = _this.collectionConfig.groupBys;
        };
        this.getEntity = function () {
            _this.collectionPromise.then(function (data) {
                _this.collectionData = data;
                _this.collectionData.pageRecords = _this.collectionData.pageRecords || _this.collectionData.records;
                if (_this.collectionData.pageRecords.length) {
                    angular.forEach(_this.collectionData.pageRecords, function (pageRecord) {
                        _this.expandableService.addRecord(pageRecord[_this.parentIDName], true);
                        pageRecord.dataparentID = _this.recordID;
                        pageRecord.depth = _this.recordDepth || 0;
                        pageRecord.depth++;
                        //push the children into the listing display
                        _this.children.push(pageRecord);
                        _this.records.splice(_this.recordIndex + 1, 0, pageRecord);
                    });
                }
                _this.childrenLoaded = true;
            });
        };
        this.toggleChild = function () {
            _this.$timeout(function () {
                _this.childrenOpen = !_this.childrenOpen;
                _this.expandableService.updateState(_this.recordID, { isOpen: _this.childrenOpen });
                if (!_this.childrenLoaded) {
                    if (_this.childCollectionConfig == null) {
                        _this.setupChildCollectionConfig();
                    }
                    if (angular.isFunction(_this.childCollectionConfig.getEntity)) {
                        _this.collectionPromise = _this.childCollectionConfig.getEntity();
                    }
                    _this.getEntity();
                }
                angular.forEach(_this.children, function (child) {
                    child.dataIsVisible = _this.childrenOpen;
                    var entityPrimaryIDName = _this.entity.$$getIDName();
                    var idsToCheck = [];
                    idsToCheck.push(child[entityPrimaryIDName]);
                    _this.expandableService.updateState(child[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                    //close all children of the child if we are closing
                    var childrenTraversed = false;
                    var recordLength = _this.records.length;
                    while (!childrenTraversed && idsToCheck.length > 0) {
                        var found = false;
                        var idToCheck = idsToCheck.pop();
                        for (var i = 0; i < recordLength; i++) {
                            var record = _this.records[i];
                            if (record['dataparentID'] == idToCheck) {
                                idsToCheck.push(record[entityPrimaryIDName]);
                                _this.expandableService.updateState(record[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                                record.dataIsVisible = _this.childrenOpen;
                                found = true;
                            }
                        }
                        if (!found) {
                            childrenTraversed = true;
                        }
                    }
                });
            });
        };
        this.recordID = this.parentId; //this is what parent is initalized to in the listing display
        expandableService.addRecord(this.recordID);
        if (angular.isDefined(this.refreshChildrenEvent) && this.refreshChildrenEvent.length) {
            this.observerService.attach(this.refreshChildren, this.refreshChildrenEvent);
        }
    }
    return SWExpandableRecordController;
}());
var SWExpandableRecord = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            recordValue: "=",
            link: "@",
            expandable: "=?",
            parentId: "=",
            entity: "=",
            collectionConfig: "=?",
            childCollectionConfig: "=?",
            refreshChildrenEvent: "=?",
            listingId: "@?",
            records: "=",
            pageRecord: "=",
            recordIndex: "=",
            recordDepth: "=",
            childCount: "=",
            autoOpen: "=",
            multiselectIdPaths: "=",
            expandableRules: "="
        };
        this.controller = SWExpandableRecordController;
        this.controllerAs = "swExpandableRecord";
        this.link = function (scope, element, attrs) {
            if (scope.swExpandableRecord.expandable && scope.swExpandableRecord.childCount) {
                if (scope.swExpandableRecord.recordValue) {
                    var id = scope.swExpandableRecord.records[scope.swExpandableRecord.recordIndex][scope.swExpandableRecord.entity.$$getIDName()];
                    if (scope.swExpandableRecord.multiselectIdPaths && scope.swExpandableRecord.multiselectIdPaths.length) {
                        var multiselectIdPathsArray = scope.swExpandableRecord.multiselectIdPaths.split(',');
                        if (!scope.swExpandableRecord.childrenLoaded) {
                            angular.forEach(multiselectIdPathsArray, function (multiselectIdPath) {
                                var position = _this.utilityService.listFind(multiselectIdPath, id, '/');
                                var multiSelectIDs = multiselectIdPath.split('/');
                                var multiselectPathLength = multiSelectIDs.length;
                                if (position !== -1 && position < multiselectPathLength - 1 && !_this.expandableService.getState(id, "isOpen")) {
                                    _this.expandableService.updateState(id, { isOpen: true });
                                    scope.swExpandableRecord.toggleChild();
                                }
                            });
                        }
                    }
                }
                _this.$templateRequest(_this.hibachiPathBuilder.buildPartialsPath(_this.corePartialsPath) + "expandablerecord.html").then(function (html) {
                    var template = angular.element(html);
                    //get autoopen reference to ensure only the root is autoopenable
                    var autoOpen = angular.copy(scope.swExpandableRecord.autoOpen);
                    scope.swExpandableRecord.autoOpen = false;
                    template = _this.$compile(template)(scope);
                    element.html(template);
                    element.on('click', scope.swExpandableRecord.toggleChild);
                    if (autoOpen) {
                        scope.swExpandableRecord.toggleChild();
                    }
                });
            }
        };
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.corePartialsPath = corePartialsPath;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
    }
    SWExpandableRecord.Factory = function () {
        var directive = function ($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) { return new SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder); };
        directive.$inject = [
            '$compile',
            '$templateRequest',
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'expandableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExpandableRecord;
}());
exports.SWExpandableRecord = SWExpandableRecord;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWExpiringSessionNotifierController = /** @class */ (function () {
    //@ngInject
    function SWExpiringSessionNotifierController($timeout, $http, $hibachi, localStorageService) {
        var _this = this;
        this.$timeout = $timeout;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.localStorageService = localStorageService;
        this.startTimeout = function () {
            _this.$timeout(function () {
                console.warn("Session Is About To Expire, 3 Minutes Left");
                //regardless of user input as long as they respond 
                var answer = confirm(_this.confirmText);
                _this.$http.get(_this.$hibachi.buildUrl('api:main.login')).then(function (response) {
                    if (response.status === 200) {
                        _this.localStorageService.setItem('token', response.data.token);
                        _this.startTimeout();
                    }
                    else {
                        alert('Unable To Login');
                        location.reload();
                    }
                }, function (rejection) {
                    throw ('Login Failed');
                });
            }, 720000);
        };
        console.warn("Expiring Session Notifier Constructed.");
        if (angular.isUndefined(this.confirmText)) {
            this.confirmText = 'Are you still there? You are about to be logged out.';
        }
        this.startTimeout();
    }
    return SWExpiringSessionNotifierController;
}());
var SWExpiringSessionNotifier = /** @class */ (function () {
    //@ngInject
    function SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = false;
        this.bindToController = {
            confirmText: '@?'
        };
        this.controller = SWExpiringSessionNotifierController;
        this.controllerAs = "swExpiringSessionNotifier";
        this.link = function (scope, element, attrs) {
        };
        this.template = '';
    }
    SWExpiringSessionNotifier.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWExpiringSessionNotifier;
}());
exports.SWExpiringSessionNotifier = SWExpiringSessionNotifier;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var md5 = __webpack_require__(46);
var SWGravatarController = /** @class */ (function () {
    // @ngInject
    function SWGravatarController() {
        this.gravatarURL = "http://www.gravatar.com/avatar/" + md5(this.emailAddress.toLowerCase().trim());
    }
    return SWGravatarController;
}());
exports.SWGravatarController = SWGravatarController;
var SWGravatar = /** @class */ (function () {
    function SWGravatar() {
        this.template = "<img src='{{swGravatar.gravatarURL}}' />";
        this.transclude = false;
        this.restrict = "E";
        this.scope = {};
        this.bindToController = {
            emailAddress: "@"
        };
        this.controller = SWGravatarController;
        this.controllerAs = "swGravatar";
        this.link = function (scope, element, attrs, controller, transclude) {
        };
    }
    SWGravatar.Factory = function () {
        var directive = function () { return new SWGravatar(); };
        directive.$inject = [];
        return directive;
    };
    SWGravatar.$inject = ["$hibachi", "$timeout", "collectionConfigService", "corePartialsPath",
        'hibachiPathBuilder'];
    return SWGravatar;
}());
exports.SWGravatar = SWGravatar;


/***/ }),
/* 150 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 151 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWLoginController = /** @class */ (function () {
    //@ngInject
    function SWLoginController($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiScope) {
        var _this = this;
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.hibachiScope = hibachiScope;
        this.login = function () {
            var loginPromise = _this.$hibachi.login(_this.account_login.data.emailAddress, _this.account_login.data.password);
            loginPromise.then(function (loginResponse) {
                if (loginResponse && loginResponse.data && loginResponse.data.token) {
                    _this.$window.localStorage.setItem('token', loginResponse.data.token);
                    _this.hibachiScope.loginDisplayed = false;
                    _this.$route.reload();
                    _this.dialogService.removeCurrentDialog();
                }
            }, function (rejection) {
            });
        };
        this.$hibachi = $hibachi;
        this.$window = $window;
        this.$route = $route;
        this.hibachiScope = hibachiScope;
        this.account_login = $hibachi.newEntity('Account_Login');
    }
    return SWLoginController;
}());
var SWLogin = /** @class */ (function () {
    //@ngInject
    function SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) {
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {};
        this.controller = SWLoginController;
        this.controllerAs = "SwLogin";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.corePartialsPath + '/login.html');
    }
    SWLogin.Factory = function () {
        var directive = function ($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) { return new SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder); };
        directive.$inject = [
            '$route',
            '$log',
            '$window',
            'corePartialsPath',
            '$hibachi',
            'dialogService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLogin;
}());
exports.SWLogin = SWLogin;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalLauncherController = /** @class */ (function () {
    // @ngInject
    function SWModalLauncherController() {
        var _this = this;
        this.hasSaveAction = false;
        this.hasCancelAction = false;
        this.hasDeleteAction = false;
        this.launchModal = function () {
            //activate the necessary modal
            _this.showModal = true;
        };
        this.saveCallback = function () {
            //the passed save action must return a promise
            if (_this.hasSaveAction) {
                var savePromise = _this.saveAction()();
            }
            savePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.deleteCallback = function () {
            //the passed save action must return a promise
            if (_this.hasDeleteAction) {
                var deletePromise = _this.saveAction()();
            }
            deletePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.cancelCallback = function () {
            if (_this.hasCancelAction) {
                _this.cancelAction()();
            }
        };
        if (angular.isUndefined(this.showModal)) {
            this.showModal = false;
        }
        if (angular.isUndefined(this.saveActionText)) {
            this.saveActionText = "Save";
        }
        if (angular.isUndefined(this.cancelActionText)) {
            this.cancelActionText = "Cancel";
        }
    }
    return SWModalLauncherController;
}());
exports.SWModalLauncherController = SWModalLauncherController;
var SWModalLauncher = /** @class */ (function () {
    // @ngInject
    function SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            button: '?swModalButton',
            staticButton: '?swModalStaticButton',
            content: '?swModalContent'
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            showModal: "=?",
            modalName: "@",
            title: "@",
            saveAction: "&?",
            deleteAction: "&?",
            cancelAction: "&?",
            saveActionText: "@?",
            cancelActionText: "@?"
        };
        this.controller = SWModalLauncherController;
        this.controllerAs = "swModalLauncher";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.saveAction)) {
                        $scope.swModalLauncher.hasSaveAction = true;
                    }
                    if (angular.isDefined(attrs.deleteAction)) {
                        $scope.swModalLauncher.hasDeleteAction = true;
                    }
                    if (angular.isDefined(attrs.cancelAction)) {
                        $scope.swModalLauncher.hasCancelAction = true;
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modallauncher.html";
    }
    SWModalLauncher.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalLauncher;
}());
exports.SWModalLauncher = SWModalLauncher;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalWindowController = /** @class */ (function () {
    // @ngInject
    function SWModalWindowController() {
        if (angular.isUndefined(this.modalName)) {
            console.warn("You did not pass a modal title to SWModalWindowController");
            this.modalName = "";
        }
    }
    return SWModalWindowController;
}());
exports.SWModalWindowController = SWModalWindowController;
var SWModalWindow = /** @class */ (function () {
    // @ngInject
    function SWModalWindow($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            modalBody: "?swModalBody"
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            modalName: "@",
            title: "@",
            hasSaveAction: "=?",
            saveAction: "&?",
            hasDeleteAction: "=?",
            deleteAction: "&?",
            hasCancelAction: "=?",
            cancelAction: "&?",
            saveActionText: "@",
            cancelActionText: "@"
        };
        this.controller = SWModalWindowController;
        this.controllerAs = "swModalWindow";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modalwindow.html";
    }
    SWModalWindow.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalWindow($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalWindow;
}());
exports.SWModalWindow = SWModalWindow;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWNumbersOnly = /** @class */ (function () {
    function SWNumbersOnly() {
        this.restrict = "A";
        this.require = "ngModel";
        this.scope = {
            ngModel: '=',
            minNumber: '=?',
            maxNumber: '=?'
        };
        this.link = function ($scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.unshift(function (inputValue) {
                var modelValue = modelCtrl.$modelValue;
                if (inputValue != "" && !isNaN(Number(inputValue))) {
                    if (angular.isDefined($scope.minNumber)) {
                        if (Number(inputValue) >= $scope.minNumber || !angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", true);
                        }
                        else if (angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", false);
                        }
                    }
                    if (angular.isDefined($scope.maxNumber)) {
                        if (Number(inputValue) <= $scope.maxNumber || !angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", true);
                        }
                        else if (angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", false);
                        }
                    }
                    if (modelCtrl.$valid) {
                        modelValue = Number(inputValue);
                    }
                    else {
                        modelValue = $scope.minNumber;
                    }
                }
                return modelValue;
            });
        };
    }
    SWNumbersOnly.Factory = function () {
        var directive = function () { return new SWNumbersOnly(); };
        directive.$inject = [];
        return directive;
    };
    return SWNumbersOnly;
}());
exports.SWNumbersOnly = SWNumbersOnly;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWLoading = /** @class */ (function () {
    function SWLoading($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            transclude: true,
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'loading.html',
            scope: {
                swLoading: '='
            },
            link: function (scope, attrs, element) {
            }
        };
    }
    SWLoading.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWLoading($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLoading;
}());
exports.SWLoading = SWLoading;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWScrollTrigger = /** @class */ (function () {
    function SWScrollTrigger($rootScope, $window, $timeout) {
        return {
            link: function (scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope
                        .$watch(attrs.infiniteScrollDistance, function (value) {
                        return scrollDistance = parseInt(value, 10);
                    });
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope
                        .$watch(attrs.infiniteScrollDisabled, function (value) {
                        scrollEnabled = !value;
                        if (scrollEnabled
                            && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler();
                        }
                    });
                }
                handler = function () {
                    var elementBottom, remaining, shouldScroll, windowBottom;
                    windowBottom = $window.height()
                        + $window.scrollTop();
                    elementBottom = elem.offset().top
                        + elem.height();
                    remaining = elementBottom
                        - windowBottom;
                    shouldScroll = remaining <= $window
                        .height()
                        * scrollDistance;
                    if (shouldScroll && scrollEnabled) {
                        if ($rootScope.$$phase) {
                            return scope
                                .$eval(attrs.infiniteScroll);
                        }
                        else {
                            return scope
                                .$apply(attrs.infiniteScroll);
                        }
                    }
                    else if (shouldScroll) {
                        return checkWhenEnabled = true;
                    }
                };
                $window.on('scroll', handler);
                scope.$on('$destroy', function () {
                    return $window.off('scroll', handler);
                });
                return $timeout((function () {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope
                            .$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler();
                        }
                    }
                    else {
                        return handler();
                    }
                }), 0);
            }
        };
    }
    SWScrollTrigger.Factory = function () {
        var directive = function ($rootScope, $window, $timeout) { return new SWScrollTrigger($rootScope, $window, $timeout); };
        directive.$inject = [
            '$rootScope',
            '$window',
            '$timeout'
        ];
        return directive;
    };
    return SWScrollTrigger;
}());
exports.SWScrollTrigger = SWScrollTrigger;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabGroupController = /** @class */ (function () {
    // @ngInject
    function SWTabGroupController(utilityService, rbkeyService, observerService) {
        var _this = this;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.hasActiveTab = false;
        this.initTab = function () {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (!_this.tabs[i].hide) {
                    _this.tabs[i].active = true;
                    _this.tabs[i].loaded = true;
                    break;
                }
            }
        };
        this.switchTab = function (tabToActivate) {
            _this.observerService.notify(_this.switchTabGroupEventName);
            for (var i = 0; i < _this.tabs.length; i++) {
                _this.tabs[i].active = false;
            }
            tabToActivate.active = true;
            tabToActivate.loaded = true;
        };
        this.getTabByName = function (name) {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (_this.tabs[i].name == name) {
                    return _this.tabs[i];
                }
            }
        };
        if (angular.isUndefined(this.tabs)) {
            this.tabs = [];
        }
        this.tabGroupID = "TG" + this.utilityService.createID(30);
        this.switchTabGroupEventName = "SwitchTabGroup" + this.tabGroupID;
        this.initTabEventName = "InitTabForTabGroup" + this.tabGroupID;
        this.observerService.attach(this.initTab, this.initTabEventName);
        if (angular.isUndefined(this.switchTabEventName)) {
            this.switchTabEventName = this.tabGroupID + "SwitchTabTo";
        }
        this.observerService.attach(this.switchTab, this.switchTabEventName);
    }
    return SWTabGroupController;
}());
exports.SWTabGroupController = SWTabGroupController;
var SWTabGroup = /** @class */ (function () {
    // @ngInject
    function SWTabGroup($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            switchTabEventName: "@?"
        };
        this.controller = SWTabGroupController;
        this.controllerAs = "swTabGroup";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) { },
                post: function ($scope, element, attrs) { }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabgroup.html";
    }
    SWTabGroup.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWTabGroup($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTabGroup;
}());
exports.SWTabGroup = SWTabGroup;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabContentController = /** @class */ (function () {
    // @ngInject
    function SWTabContentController($scope, $q, $transclude, $hibachi, $timeout, utilityService, rbkeyService, collectionConfigService) {
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        if (angular.isUndefined(this.active)) {
            this.active = false;
        }
        if (angular.isUndefined(this.loaded)) {
            this.loaded = false;
        }
        if (angular.isUndefined(this.hide)) {
            this.hide = false;
        }
        if (angular.isUndefined(this.id)) {
            this.id = utilityService.createID(16);
        }
        if (angular.isUndefined(this.name)) {
            this.name = this.id;
        }
        //make a tab service? 
    }
    return SWTabContentController;
}());
exports.SWTabContentController = SWTabContentController;
var SWTabContent = /** @class */ (function () {
    // @ngInject
    function SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.observerService = observerService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            active: "=?",
            loaded: "=?",
            hide: "=?",
            name: "@?"
        };
        this.controller = SWTabContentController;
        this.controllerAs = "swTabContent";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                    var parentDirective = _this.scopeService.getRootParentScope($scope, "swTabGroup")["swTabGroup"];
                    if (angular.isDefined(parentDirective) && angular.isDefined(parentDirective.tabs)) {
                        parentDirective.tabs.push($scope.swTabContent);
                        _this.observerService.notify(parentDirective.initTabEventName);
                    }
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabcontent.html";
    }
    SWTabContent.Factory = function () {
        var directive = function ($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) { return new SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile",
            "scopeService",
            "observerService",
            "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWTabContent;
}());
exports.SWTabContent = SWTabContent;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTooltipController = /** @class */ (function () {
    // @ngInject
    function SWTooltipController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.showTooltip = false;
        this.show = function () {
            _this.showTooltip = true;
        };
        this.hide = function () {
            _this.showTooltip = false;
        };
        if (angular.isDefined(this.rbKey)) {
            this.text = rbkeyService.getRBKey(this.rbKey);
        }
        if (angular.isUndefined(this.position)) {
            this.position = "top";
        }
    }
    return SWTooltipController;
}());
exports.SWTooltipController = SWTooltipController;
var SWTooltip = /** @class */ (function () {
    // @ngInject
    function SWTooltip($document, corePartialsPath, hibachiPathBuilder) {
        this.$document = $document;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            rbKey: "@?",
            text: "@?",
            position: "@?",
            showTooltip: "=?"
        };
        this.controller = SWTooltipController;
        this.controllerAs = "swTooltip";
        this.link = function (scope, element, attrs, controller, transclude) {
            var tooltip = element.find(".tooltip");
            var elementPosition = element.position();
            var tooltipStyle = tooltip[0].style;
            if (attrs && attrs.position) {
                switch (attrs.position.toLowerCase()) {
                    case 'top':
                        tooltipStyle.top = "0px";
                        tooltipStyle.left = "0px";
                        break;
                    case 'bottom':
                        //where the element is rendered to begin with
                        break;
                    case 'left':
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (-1 * (elementPosition.left + element[0].offsetLeft - 5)) + "px";
                        element.find(".tooltip-inner")[0].style.maxWidth = "none";
                        break;
                    default:
                        //right is the default
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (elementPosition.left + element[0].offsetWidth - 5) + "px";
                }
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tooltip.html";
    }
    SWTooltip.Factory = function () {
        var directive = function ($document, corePartialsPath, hibachiPathBuilder) { return new SWTooltip($document, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$document", "corePartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWTooltip;
}());
exports.SWTooltip = SWTooltip;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWRbKey = /** @class */ (function () {
    function SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) {
        return {
            restrict: 'A',
            scope: {
                swRbkey: "="
            },
            link: function (scope, element, attrs) {
                var rbKeyValue = scope.swRbkey;
                var bindRBKey = function () {
                    if (angular.isDefined(rbKeyValue) && angular.isString(rbKeyValue)) {
                        element.text(rbkeyService.getRBKey(rbKeyValue));
                    }
                };
                bindRBKey();
            }
        };
    }
    SWRbKey.Factory = function () {
        var directive = function ($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) { return new SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService); };
        directive.$inject = [
            '$hibachi',
            'observerService',
            'utilityService',
            '$rootScope',
            '$log',
            'rbkeyService'
        ];
        return directive;
    };
    return SWRbKey;
}());
exports.SWRbKey = SWRbKey;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOptions = /** @class */ (function () {
    function SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                objectName: '@'
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "options.html",
            link: function (scope, element, attrs) {
                scope.swOptions = {};
                scope.swOptions.objectName = scope.objectName;
                //sets up drop down options via collections
                scope.getOptions = function () {
                    scope.swOptions.object = $hibachi['new' + scope.swOptions.objectName]();
                    var columnsConfig = [
                        {
                            "propertyIdentifier": scope.swOptions.objectName.charAt(0).toLowerCase() + scope.swOptions.objectName.slice(1) + 'Name'
                        },
                        {
                            "propertyIdentifier": scope.swOptions.object.$$getIDName()
                        }
                    ];
                    $hibachi.getEntity(scope.swOptions.objectName, { allRecords: true, columnsConfig: angular.toJson(columnsConfig) })
                        .then(function (value) {
                        scope.swOptions.options = value.records;
                        observerService.notify('optionsLoaded');
                    });
                };
                scope.getOptions();
                var selectOption = function (option) {
                    if (option) {
                        scope.swOptions.selectOption(option);
                    }
                    else {
                        scope.swOptions.selectOption(scope.swOptions.options[0]);
                    }
                };
                observerService.attach(selectOption, 'selectOption', 'selectOption');
                //use by ng-change to record changes
                scope.swOptions.selectOption = function (selectedOption) {
                    scope.swOptions.selectedOption = selectedOption;
                    observerService.notify('optionsChanged', selectedOption);
                };
            }
        };
    }
    SWOptions.Factory = function () {
        var directive = function ($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) { return new SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWOptions;
}());
exports.SWOptions = SWOptions;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSelectionController = /** @class */ (function () {
    //@ngInject
    function SWSelectionController(selectionService, observerService) {
        var _this = this;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.updateSelectValue = function (res) {
            if (_this.isRadio && (res.action == 'check')) {
                _this.toggleValue == _this.selection;
            }
            else if (res.action == 'clear') {
                _this.toggleValue = false;
            }
            else if (res.action == 'selectAll') {
                _this.toggleValue = true;
            }
            else if (res.selection == _this.selection) {
                _this.toggleValue = (res.action == 'check');
            }
        };
        this.toggleSelection = function (toggleValue, selectionid, selection) {
            if (_this.isRadio) {
                _this.selectionService.radioSelection(selectionid, selection);
                _this.toggleValue = selection;
            }
            else {
                if (toggleValue) {
                    _this.selectionService.addSelection(selectionid, selection);
                }
                else {
                    _this.selectionService.removeSelection(selectionid, selection);
                }
            }
        };
        if (angular.isUndefined(this.name)) {
            this.name = 'selection';
        }
        if (selectionService.isAllSelected(this.selectionid)) {
            this.toggleValue = !selectionService.hasSelection(this.selectionid, this.selection);
        }
        else {
            this.toggleValue = selectionService.hasSelection(this.selectionid, this.selection);
        }
        if (this.isRadio && this.toggleValue) {
            this.toggleValue = this.selection;
        }
        if (this.isRadio && this.toggleValue) {
            this.toggleValue = this.selection;
        }
        //attach observer so we know when a selection occurs
        observerService.attach(this.updateSelectValue, 'swSelectionToggleSelection' + this.selectionid);
        if (angular.isDefined(this.initSelected) && this.initSelected) {
            this.toggleValue = this.selection;
            this.toggleSelection(this.toggleValue, this.selectionid, this.selection);
        }
    }
    return SWSelectionController;
}());
var SWSelection = /** @class */ (function () {
    function SWSelection(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            selection: "=",
            selectionid: "@",
            id: "=",
            isRadio: "=",
            name: "@",
            disabled: "=",
            initSelected: "="
        };
        this.controller = SWSelectionController;
        this.controllerAs = 'swSelection';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "selection.html";
    }
    SWSelection.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWSelection(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSelection.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
    return SWSelection;
}());
exports.SWSelection = SWSelection;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWClickOutside = /** @class */ (function () {
    //@ngInject
    function SWClickOutside($document, $timeout, utilityService) {
        var _this = this;
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.restrict = 'A';
        this.scope = {
            swClickOutside: '&'
        };
        this.link = function (scope, elem, attr) {
            _this.$document.on('click', function (e) {
                if (!e || !e.target)
                    return;
                //check if our element already hidden
                if (angular.element(elem).hasClass("ng-hide")) {
                    return;
                }
                if (e.target !== elem && elem && elem[0] && !_this.utilityService.isDescendantElement(elem[0], e.target)) {
                    _this.$timeout(function () {
                        scope.swClickOutside();
                    });
                }
            });
        };
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
    }
    SWClickOutside.Factory = function () {
        var directive = function ($document, $timeout, utilityService) { return new SWClickOutside($document, $timeout, utilityService); };
        directive.$inject = [
            '$document', '$timeout', 'utilityService'
        ];
        return directive;
    };
    return SWClickOutside;
}());
exports.SWClickOutside = SWClickOutside;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDirective = /** @class */ (function () {
    //@ngInject
    function SWDirective($compile, utilityService) {
        return {
            restrict: 'AE',
            //replace:true,
            scope: {
                variables: "=",
                directiveTemplate: "="
            },
            controllerAs: "swDirective",
            link: function (scope, element, attrs) {
                var tempVariables = {};
                angular.forEach(scope.variables, function (value, key) {
                    if (key.toString().charAt(0) != "$" && value !== " ") {
                        tempVariables[utilityService.keyToAttributeString(key)] = value;
                    }
                });
                scope.variables = tempVariables;
                var template = '<' + scope.directiveTemplate + ' ';
                if (angular.isDefined(scope.variables)) {
                    angular.forEach(scope.variables, function (value, key) {
                        if (!angular.isString(value) && !angular.isNumber(value)) {
                            template += ' ' + key + '="swDirective.' + 'variables.' + key + '" ';
                        }
                        else {
                            template += ' ' + key + '="' + value + '" ';
                        }
                    });
                }
                template += '>';
                template += '</' + scope.directiveTemplate + '>';
                // Render the template.
                element.html($compile(template)(scope));
            }
        };
    }
    SWDirective.Factory = function () {
        var directive = function ($compile, utilityService) { return new SWDirective($compile, utilityService); };
        directive.$inject = [
            '$compile',
            'utilityService'
        ];
        return directive;
    };
    return SWDirective;
}());
exports.SWDirective = SWDirective;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWExportAction = /** @class */ (function () {
    //@ngInject
    function SWExportAction($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'exportaction.html',
            scope: {},
            link: function (scope, element, attrs) {
            }
        };
    }
    SWExportAction.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWExportAction($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExportAction;
}());
exports.SWExportAction = SWExportAction;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWHref = /** @class */ (function () {
    function SWHref() {
        return {
            restrict: 'A',
            scope: {
                swHref: "@"
            },
            link: function (scope, element, attrs) {
                /*convert link to use hashbang*/
                var hrefValue = attrs.swHref;
                hrefValue = '?ng#!' + hrefValue;
                element.attr('href', hrefValue);
            }
        };
    }
    SWHref.Factory = function () {
        var directive = function () { return new SWHref(); };
        directive.$inject = [];
        return directive;
    };
    return SWHref;
}());
exports.SWHref = SWHref;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProcessCallerController = /** @class */ (function () {
    //@ngInject
    function SWProcessCallerController(rbkeyService, $templateRequest, $compile, corePartialsPath, $scope, $element, $transclude, utilityService, hibachiPathBuilder) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = $transclude;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.type = this.type || 'link';
        this.queryString = this.queryString || '';
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = this.$transclude;
        this.$templateRequest(hibachiPathBuilder.buildPartialsPath(this.corePartialsPath) + "processcaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)(_this.$scope);
        });
        if (angular.isDefined(this.titleRbKey)) {
            this.title = this.rbkeyService.getRBKey(this.titleRbKey);
        }
        if (angular.isUndefined(this.text)) {
            this.text = this.title;
        }
    }
    return SWProcessCallerController;
}());
var SWProcessCaller = /** @class */ (function () {
    function SWProcessCaller(corePartialsPath, utilityService) {
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            action: "@",
            entity: "@",
            processContext: "@",
            hideDisabled: "=",
            type: "@",
            queryString: "@",
            text: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "=",
            iconOnly: "=",
            submit: "=",
            confirm: "=",
            disabled: "=",
            disabledText: "@",
            modal: "="
        };
        this.controller = SWProcessCallerController;
        this.controllerAs = "swProcessCaller";
        this.link = function (scope, element, attrs) {
        };
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
    }
    SWProcessCaller.Factory = function () {
        var directive = function (corePartialsPath, utilityService) { return new SWProcessCaller(corePartialsPath, utilityService); };
        directive.$inject = [
            'corePartialsPath', 'utilityService'
        ];
        return directive;
    };
    SWProcessCaller.$inject = ['corePartialsPath', 'utilityService'];
    return SWProcessCaller;
}());
exports.SWProcessCaller = SWProcessCaller;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSortable = /** @class */ (function () {
    function SWSortable(expression, compiledElement) {
        return function (linkElement) {
            var scope = this;
            linkElement.sortable({
                placeholder: "placeholder",
                opacity: 0.8,
                axis: "y",
                update: function (event, ui) {
                    // get model
                    var model = scope.$apply(expression);
                    // remember its length
                    var modelLength = model.length;
                    // rember html nodes
                    var items = [];
                    // loop through items in new order
                    linkElement.children().each(function (index) {
                        var item = $(this);
                        // get old item index
                        var oldIndex = parseInt(item.attr("sw:sortable-index"), 10);
                        // add item to the end of model
                        model.push(model[oldIndex]);
                        if (item.attr("sw:sortable-index")) {
                            // items in original order to restore dom
                            items[oldIndex] = item;
                            // and remove item from dom
                            item.detach();
                        }
                    });
                    model.splice(0, modelLength);
                    // restore original dom order, so angular does not get confused
                    linkElement.append.apply(linkElement, items);
                    // notify angular of the change
                    scope.$digest();
                }
            });
        };
    }
    SWSortable.Factory = function () {
        var directive = function (expression, compiledElement) { return new SWSortable(expression, compiledElement); };
        directive.$inject = ['expression', 'compiledElement'];
        return directive;
    };
    return SWSortable;
}());
exports.SWSortable = SWSortable;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWOrderByControlsController = /** @class */ (function () {
    // @ngInject
    function SWOrderByControlsController(listingService, observerService, utilityService) {
        var _this = this;
        this.listingService = listingService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.sortCode = "ASC";
        this.updateSortOrderProperty = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier)) {
                _this.propertyNotChosen = false;
            }
            else {
                _this.propertyNotChosen = true;
            }
            _this.updateOrderBy();
        };
        this.updateOrderBy = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier) && _this.selectedPropertyIdentifier.length > 0) {
                var propertyIdentifier = _this.selectedPropertyIdentifier;
            }
            switch (_this.sortCode) {
                case "ASC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "ASC");
                        }
                    }
                    if (_this.inListingDisplay)
                        _this.listingService.setManualSort(_this.listingId, false);
                    break;
                case "DESC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "DESC");
                        }
                        if (_this.inListingDisplay)
                            _this.listingService.setManualSort(_this.listingId, false);
                    }
                    break;
                case "MANUAL":
                    //flip listing
                    _this.disabled = true;
                    if (_this.inListingDisplay) {
                        //this.swListingDisplay.sortable = true;
                        _this.listingService.setManualSort(_this.listingId, true);
                    }
                    break;
            }
        };
        this.sortAscending = function () {
            _this.sortCode = 'ASC';
            _this.updateOrderBy();
        };
        this.sortDescending = function () {
            _this.sortCode = 'DESC';
            _this.updateOrderBy();
        };
        this.manualSort = function () {
            _this.sortCode = 'MANUAL';
            _this.updateOrderBy();
        };
        if (angular.isUndefined(this.edit)) {
            this.edit = true;
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.columns = this.collectionConfig.columns;
        }
        if (angular.isDefined(this.initialSortDefaultDirection) && this.initialSortDefaultDirection.length > 0) {
            this.sortCode = this.initialSortDefaultDirection;
        }
        if (angular.isDefined(this.initialSortProperty) && this.initialSortProperty.length > 0) {
            this.selectedPropertyIdentifier = this.initialSortProperty;
        }
        this.id = this.utilityService.createID(32);
    }
    return SWOrderByControlsController;
}());
exports.SWOrderByControlsController = SWOrderByControlsController;
var SWOrderByControls = /** @class */ (function () {
    // @ngInject
    function SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.listingService = listingService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            selectedOrderByColumn: "=?",
            inListingDisplay: "=?",
            toggleCollectionConfig: "=?",
            initialSortProperty: "@?",
            initialSortDefaultDirection: "@?",
            sortPropertyFieldName: "@?",
            sortDefaultDirectionFieldName: "@?",
            edit: "=?"
        };
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.controller = SWOrderByControlsController;
        this.controllerAs = "swOrderByControls";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if ($scope.swOrderByControls.inListingDisplay &&
                        _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swOrderByControls.listingId = listingDisplayScope.tableID;
                        _this.listingService.attachToListingInitiated($scope.swOrderByControls.listingId, $scope.swOrderByControls.updateOrderBy);
                        if ($scope.swOrderByControls.collectionConfig == null &&
                            listingDisplayScope.collectionConfig != null) {
                            $scope.swOrderByControls.collectionConfig = listingDisplayScope.collectionConfig;
                        }
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "orderbycontrols.html";
    }
    SWOrderByControls.Factory = function () {
        var directive = function ($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) { return new SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "listingService", "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWOrderByControls;
}());
exports.SWOrderByControls = SWOrderByControls;


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserModule", function() { return BrowserModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformBrowser", function() { return platformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Meta", function() { return Meta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Title", function() { return Title; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableDebugTools", function() { return disableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableDebugTools", function() { return enableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserTransferStateModule", function() { return BrowserTransferStateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransferState", function() { return TransferState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeStateKey", function() { return makeStateKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "By", function() { return By; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOCUMENT", function() { return DOCUMENT$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EVENT_MANAGER_PLUGINS", function() { return EVENT_MANAGER_PLUGINS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HAMMER_GESTURE_CONFIG", function() { return HAMMER_GESTURE_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HammerGestureConfig", function() { return HammerGestureConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomSanitizer", function() { return DomSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS", function() { return BROWSER_SANITIZATION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinitDomAdapter", function() { return initDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserDomAdapter", function() { return BrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserPlatformLocation", function() { return BrowserPlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵTRANSITION_ID", function() { return TRANSITION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserGetTestability", function() { return BrowserGetTestability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵescapeHtml", function() { return escapeHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS", function() { return ELEMENT_PROBE_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomAdapter", function() { return DomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function() { return getDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetRootDomAdapter", function() { return setRootDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomRendererFactory2", function() { return DomRendererFactory2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNAMESPACE_URIS", function() { return NAMESPACE_URIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵflattenStyles", function() { return flattenStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimContentAttribute", function() { return shimContentAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimHostAttribute", function() { return shimHostAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomEventsPlugin", function() { return DomEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵHammerGesturesPlugin", function() { return HammerGesturesPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵKeyEventsPlugin", function() { return KeyEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomSharedStylesHost", function() { return DomSharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSharedStylesHost", function() { return SharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return _document; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return errorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return GenericBrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return SERVER_TRANSITION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return appInitializerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return initTransferState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return _createNgProbe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return EventManagerPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return DomSanitizerImpl; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_tslib__ = __webpack_require__(19);
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */




/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _DOM = /** @type {?} */ ((null));
/**
 * @return {?}
 */
function getDOM() {
    return _DOM;
}
/**
 * @param {?} adapter
 * @return {?}
 */

/**
 * @param {?} adapter
 * @return {?}
 */
function setRootDomAdapter(adapter) {
    if (!_DOM) {
        _DOM = adapter;
    }
}
/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
var DomAdapter = /** @class */ (function () {
    function DomAdapter() {
        this.resourceLoaderType = /** @type {?} */ ((null));
    }
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
        /**
         * Maps attribute names to their corresponding property names for cases
         * where attribute name doesn't match property name.
         */
        get: /**
         * Maps attribute names to their corresponding property names for cases
         * where attribute name doesn't match property name.
         * @return {?}
         */
        function () { return this._attrToPropMap; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._attrToPropMap = value; },
        enumerable: true,
        configurable: true
    });
    return DomAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides DOM operations in any browser environment.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
var GenericBrowserDomAdapter = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
        var _this = _super.call(this) || this;
        _this._animationPrefix = null;
        _this._transitionEnd = null;
        try {
            var /** @type {?} */ element_1 = _this.createElement('div', document);
            if (_this.getStyle(element_1, 'animationName') != null) {
                _this._animationPrefix = '';
            }
            else {
                var /** @type {?} */ domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                for (var /** @type {?} */ i = 0; i < domPrefixes.length; i++) {
                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                        break;
                    }
                }
            }
            var /** @type {?} */ transEndEventNames_1 = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function (key) {
                if (_this.getStyle(element_1, key) != null) {
                    _this._transitionEnd = transEndEventNames_1[key];
                }
            });
        }
        catch (/** @type {?} */ e) {
            _this._animationPrefix = null;
            _this._transitionEnd = null;
        }
        return _this;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getDistributedNodes = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return (/** @type {?} */ (el)).getDistributedNodes(); };
    /**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = /**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    function (el, baseUrl, href) {
        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = /**
     * @return {?}
     */
    function () { return true; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = /**
     * @return {?}
     */
    function () {
        return typeof (/** @type {?} */ (document.body)).createShadowRoot === 'function';
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = /**
     * @return {?}
     */
    function () { return this._animationPrefix ? this._animationPrefix : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getTransitionEnd = /**
     * @return {?}
     */
    function () { return this._transitionEnd ? this._transitionEnd : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsAnimation = /**
     * @return {?}
     */
    function () {
        return this._animationPrefix != null && this._transitionEnd != null;
    };
    return GenericBrowserDomAdapter;
}(DomAdapter));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex',
};
var DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var _keyMap = {
    // The following values are here for cross-browser compatibility and to match the W3C standard
    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
var nodeContains;
if (__WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['Node']) {
    nodeContains = __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['Node'].prototype.contains || function (node) {
        return !!(this.compareDocumentPosition(node) & 16);
    };
}
/**
 * A `DomAdapter` powered by full browser DOM APIs.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */
var BrowserDomAdapter = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} templateHtml
     * @return {?}
     */
    BrowserDomAdapter.prototype.parse = /**
     * @param {?} templateHtml
     * @return {?}
     */
    function (templateHtml) { throw new Error('parse not implemented'); };
    /**
     * @return {?}
     */
    BrowserDomAdapter.makeCurrent = /**
     * @return {?}
     */
    function () { setRootDomAdapter(new BrowserDomAdapter()); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasProperty = /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    function (element, name) { return name in element; };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) { (/** @type {?} */ (el))[name] = value; };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getProperty = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { return (/** @type {?} */ (el))[name]; };
    /**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    BrowserDomAdapter.prototype.invoke = /**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    function (el, methodName, args) {
        (_a = (/** @type {?} */ (el)))[methodName].apply(_a, args);
        var _a;
    };
    // TODO(tbosch): move this into a separate environment class once we have it
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (window.console) {
            if (console.error) {
                console.error(error);
            }
            else {
                console.log(error);
            }
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.log = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (window.console) {
            window.console.log && window.console.log(error);
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroup = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (window.console) {
            window.console.group && window.console.group(error);
        }
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroupEnd = /**
     * @return {?}
     */
    function () {
        if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
        }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
        get: /**
         * @return {?}
         */
        function () { return _attrToPropMap; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    BrowserDomAdapter.prototype.contains = /**
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelector = /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) { return el.querySelector(selector); };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelectorAll = /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) { return el.querySelectorAll(selector); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.on = /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    function (el, evt, listener) { el.addEventListener(evt, listener, false); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.onAndCancel = /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    function (el, evt, listener) {
        el.addEventListener(evt, listener, false);
        // Needed to follow Dart's subscription semantic, until fix of
        // https://code.google.com/p/dart/issues/detail?id=17406
        return function () { el.removeEventListener(evt, listener, false); };
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.dispatchEvent = /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    function (el, evt) { el.dispatchEvent(evt); };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createMouseEvent = /**
     * @param {?} eventType
     * @return {?}
     */
    function (eventType) {
        var /** @type {?} */ evt = this.getDefaultDocument().createEvent('MouseEvent');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createEvent = /**
     * @param {?} eventType
     * @return {?}
     */
    function (eventType) {
        var /** @type {?} */ evt = this.getDefaultDocument().createEvent('Event');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.preventDefault = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.preventDefault();
        evt.returnValue = false;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.isPrevented = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getInnerHTML = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.innerHTML; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTemplateContent = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return 'content' in el && this.isTemplateElement(el) ? (/** @type {?} */ (el)).content : null;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getOuterHTML = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.outerHTML; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeName = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeName; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeValue = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeValue; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.type = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.type; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.content = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.hasProperty(node, 'content')) {
            return (/** @type {?} */ (node)).content;
        }
        else {
            return node;
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.firstChild = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.firstChild; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.nextSibling = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.nextSibling; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.parentElement = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.parentNode; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodes = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.childNodes; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodesAsList = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ childNodes = el.childNodes;
        var /** @type {?} */ res = new Array(childNodes.length);
        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
        }
        return res;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.clearNodes = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.appendChild = /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    function (el, node) { el.appendChild(node); };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeChild = /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    function (el, node) { el.removeChild(node); };
    /**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */
    BrowserDomAdapter.prototype.replaceChild = /**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */
    function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.remove = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    function (parent, ref, node) { parent.insertBefore(node, ref); };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAllBefore = /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */
    function (parent, ref, nodes) {
        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
    };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAfter = /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setInnerHTML = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) { el.innerHTML = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getText = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.textContent; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setText = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) { el.textContent = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getValue = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.value; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setValue = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) { el.value = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getChecked = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.checked; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setChecked = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) { el.checked = value; };
    /**
     * @param {?} text
     * @return {?}
     */
    BrowserDomAdapter.prototype.createComment = /**
     * @param {?} text
     * @return {?}
     */
    function (text) { return this.getDefaultDocument().createComment(text); };
    /**
     * @param {?} html
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTemplate = /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        var /** @type {?} */ t = this.getDefaultDocument().createElement('template');
        t.innerHTML = html;
        return t;
    };
    /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElement = /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    function (tagName, doc) {
        doc = doc || this.getDefaultDocument();
        return doc.createElement(tagName);
    };
    /**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElementNS = /**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    function (ns, tagName, doc) {
        doc = doc || this.getDefaultDocument();
        return doc.createElementNS(ns, tagName);
    };
    /**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTextNode = /**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    function (text, doc) {
        doc = doc || this.getDefaultDocument();
        return doc.createTextNode(text);
    };
    /**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createScriptTag = /**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    function (attrName, attrValue, doc) {
        doc = doc || this.getDefaultDocument();
        var /** @type {?} */ el = /** @type {?} */ (doc.createElement('SCRIPT'));
        el.setAttribute(attrName, attrValue);
        return el;
    };
    /**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createStyleElement = /**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    function (css, doc) {
        doc = doc || this.getDefaultDocument();
        var /** @type {?} */ style = /** @type {?} */ (doc.createElement('style'));
        this.appendChild(style, this.createTextNode(css, doc));
        return style;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.createShadowRoot = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return (/** @type {?} */ (el)).createShadowRoot(); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getShadowRoot = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return (/** @type {?} */ (el)).shadowRoot; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHost = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return (/** @type {?} */ (el)).host; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.clone = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.cloneNode(true); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByClassName = /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    function (element, name) {
        return element.getElementsByClassName(name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByTagName = /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    function (element, name) {
        return element.getElementsByTagName(name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.classList = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { return Array.prototype.slice.call(element.classList, 0); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.addClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) { element.classList.add(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) { element.classList.remove(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        return element.classList.contains(className);
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.setStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    function (element, styleName, styleValue) {
        element.style[styleName] = styleValue;
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeStyle = /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    function (element, stylename) {
        // IE requires '' instead of null
        // see https://github.com/angular/angular/issues/7916
        element.style[stylename] = '';
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.getStyle = /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    function (element, stylename) { return element.style[stylename]; };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    function (element, styleName, styleValue) {
        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
        return styleValue ? value == styleValue : value.length > 0;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.tagName = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { return element.tagName; };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.attributeMap = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ res = new Map();
        var /** @type {?} */ elAttrs = element.attributes;
        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
            var /** @type {?} */ attrib = elAttrs.item(i);
            res.set(attrib.name, attrib.value);
        }
        return res;
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttribute = /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    function (element, attribute) {
        return element.hasAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttributeNS = /**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    function (element, ns, attribute) {
        return element.hasAttributeNS(ns, attribute);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttribute = /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    function (element, attribute) {
        return element.getAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttributeNS = /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    function (element, ns, name) {
        return element.getAttributeNS(ns, name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttribute = /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (element, name, value) { element.setAttribute(name, value); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttributeNS = /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (element, ns, name, value) {
        element.setAttributeNS(ns, name, value);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttribute = /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    function (element, attribute) { element.removeAttribute(attribute); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttributeNS = /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    function (element, ns, name) {
        element.removeAttributeNS(ns, name);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.templateAwareRoot = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.createHtmlDocument = /**
     * @return {?}
     */
    function () {
        return document.implementation.createHTMLDocument('fakeTitle');
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getDefaultDocument = /**
     * @return {?}
     */
    function () { return document; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBoundingClientRect = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        try {
            return el.getBoundingClientRect();
        }
        catch (/** @type {?} */ e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
        }
    };
    /**
     * @param {?} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTitle = /**
     * @param {?} doc
     * @return {?}
     */
    function (doc) { return doc.title; };
    /**
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */
    BrowserDomAdapter.prototype.setTitle = /**
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */
    function (doc, newTitle) { doc.title = newTitle || ''; };
    /**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.elementMatches = /**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    function (n, selector) {
        if (this.isElementNode(n)) {
            return n.matches && n.matches(selector) ||
                n.msMatchesSelector && n.msMatchesSelector(selector) ||
                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }
        return false;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTemplateElement = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTextNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeType === Node.TEXT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isCommentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeType === Node.COMMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isElementNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeType === Node.ELEMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasShadowRoot = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.shadowRoot != null && node instanceof HTMLElement;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isShadowRoot = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node instanceof DocumentFragment; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.importIntoDoc = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return document.importNode(this.templateAwareRoot(node), true); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.adoptNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return document.adoptNode(node); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHref = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return /** @type {?} */ ((el.getAttribute('href'))); };
    /**
     * @param {?} event
     * @return {?}
     */
    BrowserDomAdapter.prototype.getEventKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ key = event.key;
        if (key == null) {
            key = event.keyIdentifier;
            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
            // Safari cf
            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
            if (key == null) {
                return 'Unidentified';
            }
            if (key.startsWith('U+')) {
                key = String.fromCharCode(parseInt(key.substring(2), 16));
                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                    // There is a bug in Chrome for numeric keypad keys:
                    // https://code.google.com/p/chromium/issues/detail?id=155654
                    // 1, 2, 3 ... are reported as A, B, C ...
                    key = (/** @type {?} */ (_chromeNumKeyPadMap))[key];
                }
            }
        }
        return _keyMap[key] || key;
    };
    /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    BrowserDomAdapter.prototype.getGlobalEventTarget = /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    function (doc, target) {
        if (target === 'window') {
            return window;
        }
        if (target === 'document') {
            return doc;
        }
        if (target === 'body') {
            return doc.body;
        }
        return null;
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHistory = /**
     * @return {?}
     */
    function () { return window.history; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getLocation = /**
     * @return {?}
     */
    function () { return window.location; };
    /**
     * @param {?} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBaseHref = /**
     * @param {?} doc
     * @return {?}
     */
    function (doc) {
        var /** @type {?} */ href = getBaseElementHref();
        return href == null ? null : relativePath(href);
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.resetBaseElement = /**
     * @return {?}
     */
    function () { baseElement = null; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getUserAgent = /**
     * @return {?}
     */
    function () { return window.navigator.userAgent; };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setData = /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (element, name, value) {
        this.setAttribute(element, 'data-' + name, value);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getData = /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    function (element, name) {
        return this.getAttribute(element, 'data-' + name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.getComputedStyle = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { return getComputedStyle(element); };
    // TODO(tbosch): move this into a separate environment class once we have it
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsWebAnimation = /**
     * @return {?}
     */
    function () {
        return typeof (/** @type {?} */ (Element)).prototype['animate'] === 'function';
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.performanceNow = /**
     * @return {?}
     */
    function () {
        // performance.now() is not available in all browsers, see
        // http://caniuse.com/#search=performance.now
        return window.performance && window.performance.now ? window.performance.now() :
            new Date().getTime();
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsCookies = /**
     * @return {?}
     */
    function () { return true; };
    /**
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { return Object(__WEBPACK_IMPORTED_MODULE_0__angular_common__["ɵparseCookieValue"])(document.cookie, name); };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setCookie = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
        // not clear other cookies.
        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
}(GenericBrowserDomAdapter));
var baseElement = null;
/**
 * @return {?}
 */
function getBaseElementHref() {
    if (!baseElement) {
        baseElement = /** @type {?} */ ((document.querySelector('base')));
        if (!baseElement) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
var urlParsingNode;
/**
 * @param {?} url
 * @return {?}
 */
function relativePath(url) {
    if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @deprecated import from `\@angular/common` instead.
 */
var DOCUMENT$1 = __WEBPACK_IMPORTED_MODULE_0__angular_common__["DOCUMENT"];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function supportsState() {
    return !!window.history.pushState;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 */
var BrowserPlatformLocation = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        _this._init();
        return _this;
    }
    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    BrowserPlatformLocation.prototype._init = /**
     * \@internal
     * @return {?}
     */
    function () {
        (/** @type {?} */ (this)).location = getDOM().getLocation();
        this._history = getDOM().getHistory();
    };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = /**
     * @return {?}
     */
    function () { return /** @type {?} */ ((getDOM().getBaseHref(this._doc))); };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onPopState = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onHashChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
        get: /**
         * @return {?}
         */
        function () { return this.location.pathname; },
        set: /**
         * @param {?} newPath
         * @return {?}
         */
        function (newPath) { this.location.pathname = newPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
        get: /**
         * @return {?}
         */
        function () { return this.location.search; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
        get: /**
         * @return {?}
         */
        function () { return this.location.hash; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.pushState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    function (state, title, url) {
        if (supportsState()) {
            this._history.pushState(state, title, url);
        }
        else {
            this.location.hash = url;
        }
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.replaceState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    function (state, title, url) {
        if (supportsState()) {
            this._history.replaceState(state, title, url);
        }
        else {
            this.location.hash = url;
        }
    };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.forward = /**
     * @return {?}
     */
    function () { this._history.forward(); };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.back = /**
     * @return {?}
     */
    function () { this._history.back(); };
    BrowserPlatformLocation.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    BrowserPlatformLocation.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return BrowserPlatformLocation;
}(__WEBPACK_IMPORTED_MODULE_0__angular_common__["PlatformLocation"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A service that can be used to get and add meta tags.
 *
 * \@experimental
 */
var Meta = /** @class */ (function () {
    function Meta(_doc) {
        this._doc = _doc;
        this._dom = getDOM();
    }
    /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype.addTag = /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    function (tag, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tag)
            return null;
        return this._getOrCreateElement(tag, forceCreation);
    };
    /**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype.addTags = /**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */
    function (tags, forceCreation) {
        var _this = this;
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tags)
            return [];
        return tags.reduce(function (result, tag) {
            if (tag) {
                result.push(_this._getOrCreateElement(tag, forceCreation));
            }
            return result;
        }, []);
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.getTag = /**
     * @param {?} attrSelector
     * @return {?}
     */
    function (attrSelector) {
        if (!attrSelector)
            return null;
        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]") || null;
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.getTags = /**
     * @param {?} attrSelector
     * @return {?}
     */
    function (attrSelector) {
        if (!attrSelector)
            return [];
        var /** @type {?} */ list = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
        return list ? [].slice.call(list) : [];
    };
    /**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */
    Meta.prototype.updateTag = /**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */
    function (tag, selector) {
        if (!tag)
            return null;
        selector = selector || this._parseSelector(tag);
        var /** @type {?} */ meta = /** @type {?} */ ((this.getTag(selector)));
        if (meta) {
            return this._setMetaElementAttributes(tag, meta);
        }
        return this._getOrCreateElement(tag, true);
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.removeTag = /**
     * @param {?} attrSelector
     * @return {?}
     */
    function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };
    /**
     * @param {?} meta
     * @return {?}
     */
    Meta.prototype.removeTagElement = /**
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        if (meta) {
            this._dom.remove(meta);
        }
    };
    /**
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype._getOrCreateElement = /**
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */
    function (meta, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!forceCreation) {
            var /** @type {?} */ selector = this._parseSelector(meta);
            var /** @type {?} */ elem = /** @type {?} */ ((this.getTag(selector)));
            // It's allowed to have multiple elements with the same name so it's not enough to
            // just check that element with the same name already present on the page. We also need to
            // check if element has tag attributes
            if (elem && this._containsAttributes(meta, elem))
                return elem;
        }
        var /** @type {?} */ element = /** @type {?} */ (this._dom.createElement('meta'));
        this._setMetaElementAttributes(meta, element);
        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
        this._dom.appendChild(head, element);
        return element;
    };
    /**
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */
    Meta.prototype._setMetaElementAttributes = /**
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */
    function (tag, el) {
        var _this = this;
        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
        return el;
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    Meta.prototype._parseSelector = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var /** @type {?} */ attr = tag.name ? 'name' : 'property';
        return attr + "=\"" + tag[attr] + "\"";
    };
    /**
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */
    Meta.prototype._containsAttributes = /**
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */
    function (tag, elem) {
        var _this = this;
        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
    };
    Meta.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Meta.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return Meta;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */
var TRANSITION_ID = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('TRANSITION_ID');
/**
 * @param {?} transitionId
 * @param {?} document
 * @param {?} injector
 * @return {?}
 */
function appInitializerFactory(transitionId, document, injector) {
    return function () {
        // Wait for all application initializers to be completed before removing the styles set by
        // the server.
        injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationInitStatus"]).donePromise.then(function () {
            var /** @type {?} */ dom = getDOM();
            var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
                .forEach(function (el) { return dom.remove(el); });
        });
    };
}
var SERVER_TRANSITION_PROVIDERS = [
    {
        provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_INITIALIZER"],
        useFactory: appInitializerFactory,
        deps: [TRANSITION_ID, DOCUMENT$1, __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injector"]],
        multi: true
    },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserGetTestability = /** @class */ (function () {
    function BrowserGetTestability() {
    }
    /**
     * @return {?}
     */
    BrowserGetTestability.init = /**
     * @return {?}
     */
    function () { Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["setTestabilityGetter"])(new BrowserGetTestability()); };
    /**
     * @param {?} registry
     * @return {?}
     */
    BrowserGetTestability.prototype.addToWindow = /**
     * @param {?} registry
     * @return {?}
     */
    function (registry) {
        __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['getAngularTestability'] = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return testability;
        };
        __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
        __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
            var /** @type {?} */ testabilities = __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['getAllAngularTestabilities']();
            var /** @type {?} */ count = testabilities.length;
            var /** @type {?} */ didWork = false;
            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
                didWork = didWork || didWork_;
                count--;
                if (count == 0) {
                    callback(didWork);
                }
            };
            testabilities.forEach(function (testability /** TODO #9100 */) {
                testability.whenStable(decrement);
            });
        };
        if (!__WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['frameworkStabilizers']) {
            __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['frameworkStabilizers'] = [];
        }
        __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['frameworkStabilizers'].push(whenAllStable);
    };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    BrowserGetTestability.prototype.findTestabilityInTree = /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    function (registry, elem, findInAncestors) {
        if (elem == null) {
            return null;
        }
        var /** @type {?} */ t = registry.getTestability(elem);
        if (t != null) {
            return t;
        }
        else if (!findInAncestors) {
            return null;
        }
        if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
        }
        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * \@experimental
 */
var Title = /** @class */ (function () {
    function Title(_doc) {
        this._doc = _doc;
    }
    /**
     * Get the title of the current HTML document.
     */
    /**
     * Get the title of the current HTML document.
     * @return {?}
     */
    Title.prototype.getTitle = /**
     * Get the title of the current HTML document.
     * @return {?}
     */
    function () { return getDOM().getTitle(this._doc); };
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */
    /**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */
    Title.prototype.setTitle = /**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */
    function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
    Title.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Title.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return Title;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} input
 * @return {?}
 */

/**
 * @param {?} input
 * @return {?}
 */

/**
 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
 * `name` is `'probe'`.
 * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the
 * global `ng` object.
 * @param {?} value The value to export.
 * @return {?}
 */
function exportNgVar(name, value) {
    if (typeof COMPILED === 'undefined' || !COMPILED) {
        // Note: we can't export `ng` when using closure enhanced optimization as:
        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
        // - we can't declare a closure extern as the namespace `ng` is already used within Google
        //   for typings for angularJS (via `goog.provide('ng....')`).
        var /** @type {?} */ ng = __WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['ng'] = (/** @type {?} */ (__WEBPACK_IMPORTED_MODULE_1__angular_core__["ɵglobal"]['ng'])) || {};
        ng[name] = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CORE_TOKENS = {
    'ApplicationRef': __WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationRef"],
    'NgZone': __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"],
};
var INSPECT_GLOBAL_NAME = 'probe';
var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
/**
 * Returns a {\@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 * @param {?} element
 * @return {?}
 */
function inspectNativeElement(element) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["getDebugNode"])(element);
}
/**
 * @param {?} coreTokens
 * @return {?}
 */
function _createNgProbe(coreTokens) {
    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["a" /* __assign */])({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));
    return function () { return inspectNativeElement; };
}
/**
 * @param {?} tokens
 * @return {?}
 */
function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
}
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */
var ELEMENT_PROBE_PROVIDERS = [
    {
        provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_INITIALIZER"],
        useFactory: _createNgProbe,
        deps: [
            [__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgProbeToken"], new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Optional"]()],
        ],
        multi: true,
    },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 */
var EVENT_MANAGER_PLUGINS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('EventManagerPlugins');
/**
 * \@stable
 */
var EventManager = /** @class */ (function () {
    function EventManager(plugins, _zone) {
        var _this = this;
        this._zone = _zone;
        this._eventNameToPlugin = new Map();
        plugins.forEach(function (p) { return p.manager = _this; });
        this._plugins = plugins.slice().reverse();
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (element, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addEventListener(element, eventName, handler);
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addGlobalEventListener = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (target, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    };
    /**
     * @return {?}
     */
    EventManager.prototype.getZone = /**
     * @return {?}
     */
    function () { return this._zone; };
    /** @internal */
    /**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */
    EventManager.prototype._findPluginFor = /**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
        if (plugin) {
            return plugin;
        }
        var /** @type {?} */ plugins = this._plugins;
        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
            var /** @type {?} */ plugin_1 = plugins[i];
            if (plugin_1.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, plugin_1);
                return plugin_1;
            }
        }
        throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    EventManager.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [EVENT_MANAGER_PLUGINS,] },] },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"], },
    ]; };
    return EventManager;
}());
/**
 * @abstract
 */
var EventManagerPlugin = /** @class */ (function () {
    function EventManagerPlugin(_doc) {
        this._doc = _doc;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManagerPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (element, eventName, handler) {
        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
        if (!target) {
            throw new Error("Unsupported event target " + target + " for event " + eventName);
        }
        return this.addEventListener(target, eventName, handler);
    };
    return EventManagerPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SharedStylesHost = /** @class */ (function () {
    function SharedStylesHost() {
        /**
         * \@internal
         */
        this._stylesSet = new Set();
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    SharedStylesHost.prototype.addStyles = /**
     * @param {?} styles
     * @return {?}
     */
    function (styles) {
        var _this = this;
        var /** @type {?} */ additions = new Set();
        styles.forEach(function (style) {
            if (!_this._stylesSet.has(style)) {
                _this._stylesSet.add(style);
                additions.add(style);
            }
        });
        this.onStylesAdded(additions);
    };
    /**
     * @param {?} additions
     * @return {?}
     */
    SharedStylesHost.prototype.onStylesAdded = /**
     * @param {?} additions
     * @return {?}
     */
    function (additions) { };
    /**
     * @return {?}
     */
    SharedStylesHost.prototype.getAllStyles = /**
     * @return {?}
     */
    function () { return Array.from(this._stylesSet); };
    SharedStylesHost.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    SharedStylesHost.ctorParameters = function () { return []; };
    return SharedStylesHost;
}());
var DomSharedStylesHost = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(DomSharedStylesHost, _super);
    function DomSharedStylesHost(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        _this._hostNodes = new Set();
        _this._styleNodes = new Set();
        _this._hostNodes.add(_doc.head);
        return _this;
    }
    /**
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */
    DomSharedStylesHost.prototype._addStylesToHost = /**
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */
    function (styles, host) {
        var _this = this;
        styles.forEach(function (style) {
            var /** @type {?} */ styleEl = _this._doc.createElement('style');
            styleEl.textContent = style;
            _this._styleNodes.add(host.appendChild(styleEl));
        });
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.addHost = /**
     * @param {?} hostNode
     * @return {?}
     */
    function (hostNode) {
        this._addStylesToHost(this._stylesSet, hostNode);
        this._hostNodes.add(hostNode);
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.removeHost = /**
     * @param {?} hostNode
     * @return {?}
     */
    function (hostNode) { this._hostNodes.delete(hostNode); };
    /**
     * @param {?} additions
     * @return {?}
     */
    DomSharedStylesHost.prototype.onStylesAdded = /**
     * @param {?} additions
     * @return {?}
     */
    function (additions) {
        var _this = this;
        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
    };
    /**
     * @return {?}
     */
    DomSharedStylesHost.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
    DomSharedStylesHost.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    DomSharedStylesHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return DomSharedStylesHost;
}(SharedStylesHost));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NAMESPACE_URIS = {
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml',
    'xlink': 'http://www.w3.org/1999/xlink',
    'xml': 'http://www.w3.org/XML/1998/namespace',
    'xmlns': 'http://www.w3.org/2000/xmlns/',
};
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */
function flattenStyles(compId, styles, target) {
    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
        var /** @type {?} */ style = styles[i];
        if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
        }
        else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
        }
    }
    return target;
}
/**
 * @param {?} eventHandler
 * @return {?}
 */
function decoratePreventDefault(eventHandler) {
    return function (event) {
        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
        if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
        }
    };
}
var DomRendererFactory2 = /** @class */ (function () {
    function DomRendererFactory2(eventManager, sharedStylesHost) {
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.rendererByCompId = new Map();
        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }
    /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    DomRendererFactory2.prototype.createRenderer = /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    function (element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        switch (type.encapsulation) {
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewEncapsulation"].Emulated: {
                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer =
                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
                    this.rendererByCompId.set(type.id, renderer);
                }
                (/** @type {?} */ (renderer)).applyToHost(element);
                return renderer;
            }
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewEncapsulation"].Native:
                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
            default: {
                if (!this.rendererByCompId.has(type.id)) {
                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
        }
    };
    /**
     * @return {?}
     */
    DomRendererFactory2.prototype.begin = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DomRendererFactory2.prototype.end = /**
     * @return {?}
     */
    function () { };
    DomRendererFactory2.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    DomRendererFactory2.ctorParameters = function () { return [
        { type: EventManager, },
        { type: DomSharedStylesHost, },
    ]; };
    return DomRendererFactory2;
}());
var DefaultDomRenderer2 = /** @class */ (function () {
    function DefaultDomRenderer2(eventManager) {
        this.eventManager = eventManager;
        this.data = Object.create(null);
    }
    /**
     * @return {?}
     */
    DefaultDomRenderer2.prototype.destroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createElement = /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (name, namespace) {
        if (namespace) {
            return document.createElementNS(NAMESPACE_URIS[namespace], name);
        }
        return document.createElement(name);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createComment = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return document.createComment(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createText = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return document.createTextNode(value); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.appendChild = /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    function (parent, newChild) { parent.appendChild(newChild); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    function (parent, newChild, refChild) {
        if (parent) {
            parent.insertBefore(newChild, refChild);
        }
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeChild = /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    function (parent, oldChild) {
        if (parent) {
            parent.removeChild(oldChild);
        }
    };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    DefaultDomRenderer2.prototype.selectRootElement = /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    function (selectorOrNode) {
        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
            selectorOrNode;
        if (!el) {
            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
        }
        el.textContent = '';
        return el;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultDomRenderer2.prototype.parentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.parentNode; };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultDomRenderer2.prototype.nextSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nextSibling; };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, value, namespace) {
        if (namespace) {
            name = namespace + ":" + name;
            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
            }
            else {
                el.setAttribute(name, value);
            }
        }
        else {
            el.setAttribute(name, value);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, namespace) {
        if (namespace) {
            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
            }
            else {
                el.removeAttribute(namespace + ":" + name);
            }
        }
        else {
            el.removeAttribute(name);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultDomRenderer2.prototype.addClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { el.classList.add(name); };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { el.classList.remove(name); };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    function (el, style, value, flags) {
        if (flags & __WEBPACK_IMPORTED_MODULE_1__angular_core__["RendererStyleFlags2"].DashCase) {
            el.style.setProperty(style, value, !!(flags & __WEBPACK_IMPORTED_MODULE_1__angular_core__["RendererStyleFlags2"].Important) ? 'important' : '');
        }
        else {
            el.style[style] = value;
        }
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    function (el, style, flags) {
        if (flags & __WEBPACK_IMPORTED_MODULE_1__angular_core__["RendererStyleFlags2"].DashCase) {
            el.style.removeProperty(style);
        }
        else {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            el.style[style] = '';
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        checkNoSyntheticProp(name, 'property');
        el[name] = value;
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setValue = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) { node.nodeValue = value; };
    /**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    DefaultDomRenderer2.prototype.listen = /**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    function (target, event, callback) {
        checkNoSyntheticProp(event, 'listener');
        if (typeof target === 'string') {
            return /** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
        }
        return /** @type {?} */ ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
    };
    return DefaultDomRenderer2;
}());
var AT_CHARCODE = '@'.charCodeAt(0);
/**
 * @param {?} name
 * @param {?} nameKind
 * @return {?}
 */
function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) {
        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
    }
}
var EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(EmulatedEncapsulationDomRenderer2, _super);
    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
        var _this = _super.call(this, eventManager) || this;
        _this.component = component;
        var /** @type {?} */ styles = flattenStyles(component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        _this.contentAttr = shimContentAttribute(component.id);
        _this.hostAttr = shimHostAttribute(component.id);
        return _this;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
    /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    EmulatedEncapsulationDomRenderer2.prototype.createElement = /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    function (parent, name) {
        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
        return el;
    };
    return EmulatedEncapsulationDomRenderer2;
}(DefaultDomRenderer2));
var ShadowDomRenderer = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(ShadowDomRenderer, _super);
    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
        var _this = _super.call(this, eventManager) || this;
        _this.sharedStylesHost = sharedStylesHost;
        _this.hostEl = hostEl;
        _this.component = component;
        _this.shadowRoot = (/** @type {?} */ (hostEl)).createShadowRoot();
        _this.sharedStylesHost.addHost(_this.shadowRoot);
        var /** @type {?} */ styles = flattenStyles(component.id, component.styles, []);
        for (var /** @type {?} */ i = 0; i < styles.length; i++) {
            var /** @type {?} */ styleEl = document.createElement('style');
            styleEl.textContent = styles[i];
            _this.shadowRoot.appendChild(styleEl);
        }
        return _this;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ShadowDomRenderer.prototype.nodeOrShadowRoot = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node === this.hostEl ? this.shadowRoot : node; };
    /**
     * @return {?}
     */
    ShadowDomRenderer.prototype.destroy = /**
     * @return {?}
     */
    function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.appendChild = /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    function (parent, newChild) {
        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    function (parent, newChild, refChild) {
        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.removeChild = /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    function (parent, oldChild) {
        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShadowDomRenderer.prototype.parentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
    };
    return ShadowDomRenderer;
}(DefaultDomRenderer2));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ɵ0 = function (v) {
    return '__zone_symbol__' + v;
};
/**
 * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'
 * since Angular can do much more
 * efficient bookkeeping than Zone can, because we have additional information. This speeds up
 * addEventListener by 3x.
 */
var __symbol__ = (typeof Zone !== 'undefined') && (/** @type {?} */ (Zone))['__symbol__'] || ɵ0;
var ADD_EVENT_LISTENER = __symbol__('addEventListener');
var REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');
var symbolNames = {};
var FALSE = 'FALSE';
var ANGULAR = 'ANGULAR';
var NATIVE_ADD_LISTENER = 'addEventListener';
var NATIVE_REMOVE_LISTENER = 'removeEventListener';
// use the same symbol string which is used in zone.js
var stopSymbol = '__zone_symbol__propagationStopped';
var stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';
var blackListedEvents = (typeof Zone !== 'undefined') && (/** @type {?} */ (Zone))[__symbol__('BLACK_LISTED_EVENTS')];
var blackListedMap;
if (blackListedEvents) {
    blackListedMap = {};
    blackListedEvents.forEach(function (eventName) { blackListedMap[eventName] = eventName; });
}
var isBlackListedEvent = function (eventName) {
    if (!blackListedMap) {
        return false;
    }
    return blackListedMap.hasOwnProperty(eventName);
};
// a global listener to handle all dom event,
// so we do not need to create a closure everytime
var globalListener = function (event) {
    var /** @type {?} */ symbolName = symbolNames[event.type];
    if (!symbolName) {
        return;
    }
    var /** @type {?} */ taskDatas = this[symbolName];
    if (!taskDatas) {
        return;
    }
    var /** @type {?} */ args = [event];
    if (taskDatas.length === 1) {
        // if taskDatas only have one element, just invoke it
        var /** @type {?} */ taskData = taskDatas[0];
        if (taskData.zone !== Zone.current) {
            // only use Zone.run when Zone.current not equals to stored zone
            return taskData.zone.run(taskData.handler, this, args);
        }
        else {
            return taskData.handler.apply(this, args);
        }
    }
    else {
        // copy tasks as a snapshot to avoid event handlers remove
        // itself or others
        var /** @type {?} */ copiedTasks = taskDatas.slice();
        for (var /** @type {?} */ i = 0; i < copiedTasks.length; i++) {
            // if other listener call event.stopImmediatePropagation
            // just break
            if ((/** @type {?} */ (event))[stopSymbol] === true) {
                break;
            }
            var /** @type {?} */ taskData = copiedTasks[i];
            if (taskData.zone !== Zone.current) {
                // only use Zone.run when Zone.current not equals to stored zone
                taskData.zone.run(taskData.handler, this, args);
            }
            else {
                taskData.handler.apply(this, args);
            }
        }
    }
};
var DomEventsPlugin = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(DomEventsPlugin, _super);
    function DomEventsPlugin(doc, ngZone) {
        var _this = _super.call(this, doc) || this;
        _this.ngZone = ngZone;
        _this.patchEvent();
        return _this;
    }
    /**
     * @return {?}
     */
    DomEventsPlugin.prototype.patchEvent = /**
     * @return {?}
     */
    function () {
        if (!Event || !Event.prototype) {
            return;
        }
        if ((/** @type {?} */ (Event.prototype))[stopMethodSymbol]) {
            // already patched by zone.js
            return;
        }
        var /** @type {?} */ delegate = (/** @type {?} */ (Event.prototype))[stopMethodSymbol] =
            Event.prototype.stopImmediatePropagation;
        Event.prototype.stopImmediatePropagation = function () {
            if (this) {
                this[stopSymbol] = true;
            }
            // should call native delegate in case
            // in some enviroment part of the application
            // will not use the patched Event
            delegate && delegate.apply(this, arguments);
        };
    };
    // This plugin should come last in the list of plugins, because it accepts all
    // events.
    /**
     * @param {?} eventName
     * @return {?}
     */
    DomEventsPlugin.prototype.supports = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) { return true; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    DomEventsPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (element, eventName, handler) {
        var _this = this;
        /**
         * This code is about to add a listener to the DOM. If Zone.js is present, than
         * `addEventListener` has been patched. The patched code adds overhead in both
         * memory and speed (3x slower) than native. For this reason if we detect that
         * Zone.js is present we use a simple version of zone aware addEventListener instead.
         * The result is faster registration and the zone will be restored.
         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask
         * will not be invoked
         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.
         *
         * NOTE: it is possible that the element is from different iframe, and so we
         * have to check before we execute the method.
         */
        var /** @type {?} */ self = this;
        var /** @type {?} */ zoneJsLoaded = element[ADD_EVENT_LISTENER];
        var /** @type {?} */ callback = /** @type {?} */ (handler);
        // if zonejs is loaded and current zone is not ngZone
        // we keep Zone.current on target for later restoration.
        if (zoneJsLoaded && (!__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"].isInAngularZone() || isBlackListedEvent(eventName))) {
            var /** @type {?} */ symbolName = symbolNames[eventName];
            if (!symbolName) {
                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);
            }
            var /** @type {?} */ taskDatas = (/** @type {?} */ (element))[symbolName];
            var /** @type {?} */ globalListenerRegistered = taskDatas && taskDatas.length > 0;
            if (!taskDatas) {
                taskDatas = (/** @type {?} */ (element))[symbolName] = [];
            }
            var /** @type {?} */ zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;
            if (taskDatas.length === 0) {
                taskDatas.push({ zone: zone, handler: callback });
            }
            else {
                var /** @type {?} */ callbackRegistered = false;
                for (var /** @type {?} */ i = 0; i < taskDatas.length; i++) {
                    if (taskDatas[i].handler === callback) {
                        callbackRegistered = true;
                        break;
                    }
                }
                if (!callbackRegistered) {
                    taskDatas.push({ zone: zone, handler: callback });
                }
            }
            if (!globalListenerRegistered) {
                element[ADD_EVENT_LISTENER](eventName, globalListener, false);
            }
        }
        else {
            element[NATIVE_ADD_LISTENER](eventName, callback, false);
        }
        return function () { return _this.removeEventListener(element, eventName, callback); };
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    DomEventsPlugin.prototype.removeEventListener = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (target, eventName, callback) {
        var /** @type {?} */ underlyingRemove = target[REMOVE_EVENT_LISTENER];
        // zone.js not loaded, use native removeEventListener
        if (!underlyingRemove) {
            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);
        }
        var /** @type {?} */ symbolName = symbolNames[eventName];
        var /** @type {?} */ taskDatas = symbolName && target[symbolName];
        if (!taskDatas) {
            // addEventListener not using patched version
            // just call native removeEventListener
            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);
        }
        // fix issue 20532, should be able to remove
        // listener which was added inside of ngZone
        var /** @type {?} */ found = false;
        for (var /** @type {?} */ i = 0; i < taskDatas.length; i++) {
            // remove listener from taskDatas if the callback equals
            if (taskDatas[i].handler === callback) {
                found = true;
                taskDatas.splice(i, 1);
                break;
            }
        }
        if (found) {
            if (taskDatas.length === 0) {
                // all listeners are removed, we can remove the globalListener from target
                underlyingRemove.apply(target, [eventName, globalListener, false]);
            }
        }
        else {
            // not found in taskDatas, the callback may be added inside of ngZone
            // use native remove listener to remove the calback
            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);
        }
    };
    DomEventsPlugin.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    DomEventsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"], },
    ]; };
    return DomEventsPlugin;
}(EventManagerPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EVENT_NAMES = {
    // pan
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    // pinch
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    // press
    'press': true,
    'pressup': true,
    // rotate
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    // swipe
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    // tap
    'tap': true,
};
/**
 * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * \@experimental
 */
var HAMMER_GESTURE_CONFIG = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('HammerGestureConfig');
/**
 * @record
 */

/**
 * \@experimental
 */
var HammerGestureConfig = /** @class */ (function () {
    function HammerGestureConfig() {
        this.events = [];
        this.overrides = {};
    }
    /**
     * @param {?} element
     * @return {?}
     */
    HammerGestureConfig.prototype.buildHammer = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ mc = new Hammer(element);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (var /** @type {?} */ eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    };
    HammerGestureConfig.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    HammerGestureConfig.ctorParameters = function () { return []; };
    return HammerGestureConfig;
}());
var HammerGesturesPlugin = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin(doc, _config) {
        var _this = _super.call(this, doc) || this;
        _this._config = _config;
        return _this;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.supports = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
        }
        if (!(/** @type {?} */ (window)).Hammer) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
        }
        return true;
    };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    HammerGesturesPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (element, eventName, handler) {
        var _this = this;
        var /** @type {?} */ zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        return zone.runOutsideAngular(function () {
            // Creating the manager bind events, must be done outside of angular
            var /** @type {?} */ mc = _this._config.buildHammer(element);
            var /** @type {?} */ callback = function (eventObj) {
                zone.runGuarded(function () { handler(eventObj); });
            };
            mc.on(eventName, callback);
            return function () { return mc.off(eventName, callback); };
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.isCustomEvent = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) { return this._config.events.indexOf(eventName) > -1; };
    HammerGesturesPlugin.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    HammerGesturesPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
        { type: HammerGestureConfig, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [HAMMER_GESTURE_CONFIG,] },] },
    ]; };
    return HammerGesturesPlugin;
}(EventManagerPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var ɵ0$1 = function (event) { return event.altKey; };
var ɵ1$1 = function (event) { return event.ctrlKey; };
var ɵ2$1 = function (event) { return event.metaKey; };
var ɵ3 = function (event) { return event.shiftKey; };
var MODIFIER_KEY_GETTERS = {
    'alt': ɵ0$1,
    'control': ɵ1$1,
    'meta': ɵ2$1,
    'shift': ɵ3
};
/**
 * \@experimental
 */
var KeyEventsPlugin = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(KeyEventsPlugin, _super);
    function KeyEventsPlugin(doc) {
        return _super.call(this, doc) || this;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.prototype.supports = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    KeyEventsPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (element, eventName, handler) {
        var /** @type {?} */ parsedEvent = /** @type {?} */ ((KeyEventsPlugin.parseEventName(eventName)));
        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
        return this.manager.getZone().runOutsideAngular(function () {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.parseEventName = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
        var /** @type {?} */ domEventName = parts.shift();
        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
        }
        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));
        var /** @type {?} */ fullKey = '';
        MODIFIER_KEYS.forEach(function (modifierName) {
            var /** @type {?} */ index = parts.indexOf(modifierName);
            if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
            }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            // returning null instead of throwing to let another plugin process the event
            return null;
        }
        var /** @type {?} */ result = {};
        result['domEventName'] = domEventName;
        result['fullKey'] = fullKey;
        return result;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    KeyEventsPlugin.getEventFullKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ fullKey = '';
        var /** @type {?} */ key = getDOM().getEventKey(event);
        key = key.toLowerCase();
        if (key === ' ') {
            key = 'space'; // for readability
        }
        else if (key === '.') {
            key = 'dot'; // because '.' is used as a separator in event names
        }
        MODIFIER_KEYS.forEach(function (modifierName) {
            if (modifierName != key) {
                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        });
        fullKey += key;
        return fullKey;
    };
    /**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */
    KeyEventsPlugin.eventCallback = /**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */
    function (fullKey, handler, zone) {
        return function (event /** TODO #9100 */) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () { return handler(event); });
            }
        };
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */
    KeyEventsPlugin._normalizeKey = /**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */
    function (keyName) {
        // TODO: switch to a Map if the mapping grows too much
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    };
    KeyEventsPlugin.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    KeyEventsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return KeyEventsPlugin;
}(EventManagerPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML
 * that needs sanitizing.
 * Depending upon browser support we must use one of three strategies for doing this.
 * Support: Safari 10.x -> XHR strategy
 * Support: Firefox -> DomParser strategy
 * Default: InertDocument strategy
 */
var InertBodyHelper = /** @class */ (function () {
    function InertBodyHelper(defaultDoc, DOM) {
        this.defaultDoc = defaultDoc;
        this.DOM = DOM;
        var /** @type {?} */ inertDocument = this.DOM.createHtmlDocument();
        this.inertBodyElement = inertDocument.body;
        if (this.inertBodyElement == null) {
            // usually there should be only one body element in the document, but IE doesn't have any, so
            // we need to create one.
            var /** @type {?} */ inertHtml = this.DOM.createElement('html', inertDocument);
            this.inertBodyElement = this.DOM.createElement('body', inertDocument);
            this.DOM.appendChild(inertHtml, this.inertBodyElement);
            this.DOM.appendChild(inertDocument, inertHtml);
        }
        this.DOM.setInnerHTML(this.inertBodyElement, '<svg><g onload="this.parentNode.remove()"></g></svg>');
        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {
            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element
            // so use the XHR strategy.
            this.getInertBodyElement = this.getInertBodyElement_XHR;
            return;
        }
        this.DOM.setInnerHTML(this.inertBodyElement, '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">');
        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {
            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized
            // so use the DOMParser strategy, if it is available.
            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we
            // fall through to the default strategy below.
            if (isDOMParserAvailable()) {
                this.getInertBodyElement = this.getInertBodyElement_DOMParser;
                return;
            }
        }
        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy
        this.getInertBodyElement = this.getInertBodyElement_InertDocument;
    }
    /**
     * Use XHR to create and fill an inert body element (on Safari 10.1)
     * See
     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
     * @param {?} html
     * @return {?}
     */
    InertBodyHelper.prototype.getInertBodyElement_XHR = /**
     * Use XHR to create and fill an inert body element (on Safari 10.1)
     * See
     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
     * @param {?} html
     * @return {?}
     */
    function (html) {
        // We add these extra elements to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
        // `<head>` tag.
        html = '<body><remove></remove>' + html + '</body>';
        try {
            html = encodeURI(html);
        }
        catch (/** @type {?} */ e) {
            return null;
        }
        var /** @type {?} */ xhr = new XMLHttpRequest();
        xhr.responseType = 'document';
        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
        xhr.send(null);
        var /** @type {?} */ body = xhr.response.body;
        body.removeChild(/** @type {?} */ ((body.firstChild)));
        return body;
    };
    /**
     * Use DOMParser to create and fill an inert body element (on Firefox)
     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
     *
     * @param {?} html
     * @return {?}
     */
    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**
     * Use DOMParser to create and fill an inert body element (on Firefox)
     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
     *
     * @param {?} html
     * @return {?}
     */
    function (html) {
        // We add these extra elements to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
        // `<head>` tag.
        html = '<body><remove></remove>' + html + '</body>';
        try {
            var /** @type {?} */ body = /** @type {?} */ (new (/** @type {?} */ (window))
                .DOMParser()
                .parseFromString(html, 'text/html')
                .body);
            body.removeChild(/** @type {?} */ ((body.firstChild)));
            return body;
        }
        catch (/** @type {?} */ e) {
            return null;
        }
    };
    /**
     * Use an HTML5 `template` element, if supported, or an inert body element created via
     * `createHtmlDocument` to create and fill an inert DOM element.
     * This is the default sane strategy to use if the browser does not require one of the specialised
     * strategies above.
     * @param {?} html
     * @return {?}
     */
    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**
     * Use an HTML5 `template` element, if supported, or an inert body element created via
     * `createHtmlDocument` to create and fill an inert DOM element.
     * This is the default sane strategy to use if the browser does not require one of the specialised
     * strategies above.
     * @param {?} html
     * @return {?}
     */
    function (html) {
        // Prefer using <template> element if supported.
        var /** @type {?} */ templateEl = this.DOM.createElement('template');
        if ('content' in templateEl) {
            this.DOM.setInnerHTML(templateEl, html);
            return templateEl;
        }
        this.DOM.setInnerHTML(this.inertBodyElement, html);
        // Support: IE 9-11 only
        // strip custom-namespaced attributes on IE<=11
        if (this.defaultDoc.documentMode) {
            this.stripCustomNsAttrs(this.inertBodyElement);
        }
        return this.inertBodyElement;
    };
    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
     * 'ns1:xlink:foo').
     *
     * This is undesirable since we don't want to allow any of these custom attributes. This method
     * strips them all.
     * @param {?} el
     * @return {?}
     */
    InertBodyHelper.prototype.stripCustomNsAttrs = /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
     * 'ns1:xlink:foo').
     *
     * This is undesirable since we don't want to allow any of these custom attributes. This method
     * strips them all.
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var _this = this;
        this.DOM.attributeMap(el).forEach(function (_, attrName) {
            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                _this.DOM.removeAttribute(el, attrName);
            }
        });
        for (var _i = 0, _a = this.DOM.childNodesAsList(el); _i < _a.length; _i++) {
            var n = _a[_i];
            if (this.DOM.isElementNode(n))
                this.stripCustomNsAttrs(/** @type {?} */ (n));
        }
    };
    return InertBodyHelper;
}());
/**
 * We need to determine whether the DOMParser exists in the global context.
 * The try-catch is because, on some browsers, trying to access this property
 * on window can actually throw an error.
 *
 * @suppress {uselessCode}
 * @return {?}
 */
function isDOMParserAvailable() {
    try {
        return !!(/** @type {?} */ (window)).DOMParser;
    }
    catch (/** @type {?} */ e) {
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 */
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
/**
 * @param {?} url
 * @return {?}
 */
function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
        return url;
    if (Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])()) {
        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
}
/**
 * @param {?} srcset
 * @return {?}
 */
function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} tags
 * @return {?}
 */
function tagSet(tags) {
    var /** @type {?} */ res = {};
    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
        var t = _a[_i];
        res[t] = true;
    }
    return res;
}
/**
 * @param {...?} sets
 * @return {?}
 */
function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sets[_i] = arguments[_i];
    }
    var /** @type {?} */ res = {};
    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
        var s = sets_1[_a];
        for (var /** @type {?} */ v in s) {
            if (s.hasOwnProperty(v))
                res[v] = true;
        }
    }
    return res;
}
// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
// Safe Block Elements - HTML5
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
// Inline Elements - HTML5
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
// Attributes that have href and hence need to be sanitized
var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
// Attributes that have special href set hence need to be sanitized
var SRCSET_ATTRS = tagSet('srcset');
var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
    'valign,value,vspace,width');
// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */
var SanitizingHtmlSerializer = /** @class */ (function () {
    function SanitizingHtmlSerializer() {
        this.sanitizedSomething = false;
        this.buf = [];
        this.DOM = getDOM();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
        // However this code never accesses properties off of `document` before deleting its contents
        // again, so it shouldn't be vulnerable to DOM clobbering.
        var /** @type {?} */ current = /** @type {?} */ ((this.DOM.firstChild(el)));
        while (current) {
            if (this.DOM.isElementNode(current)) {
                this.startElement(/** @type {?} */ (current));
            }
            else if (this.DOM.isTextNode(current)) {
                this.chars(/** @type {?} */ ((this.DOM.nodeValue(current))));
            }
            else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
            }
            if (this.DOM.firstChild(current)) {
                current = /** @type {?} */ ((this.DOM.firstChild(current)));
                continue;
            }
            while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (this.DOM.isElementNode(current)) {
                    this.endElement(/** @type {?} */ (current));
                }
                var /** @type {?} */ next = this.checkClobberedElement(current, /** @type {?} */ ((this.DOM.nextSibling(current))));
                if (next) {
                    current = next;
                    break;
                }
                current = this.checkClobberedElement(current, /** @type {?} */ ((this.DOM.parentElement(current))));
            }
        }
        return this.buf.join('');
    };
    /**
     * @param {?} element
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.startElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var _this = this;
        var /** @type {?} */ tagName = this.DOM.nodeName(element).toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
        }
        this.buf.push('<');
        this.buf.push(tagName);
        this.DOM.attributeMap(element).forEach(function (value, attrName) {
            var /** @type {?} */ lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
                _this.sanitizedSomething = true;
                return;
            }
            // TODO(martinprobst): Special case image URIs for data:image/...
            if (URI_ATTRS[lower])
                value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
                value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
        });
        this.buf.push('>');
    };
    /**
     * @param {?} current
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.endElement = /**
     * @param {?} current
     * @return {?}
     */
    function (current) {
        var /** @type {?} */ tagName = this.DOM.nodeName(current).toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
        }
    };
    /**
     * @param {?} chars
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.chars = /**
     * @param {?} chars
     * @return {?}
     */
    function (chars) { this.buf.push(encodeEntities(chars)); };
    /**
     * @param {?} node
     * @param {?} nextNode
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**
     * @param {?} node
     * @param {?} nextNode
     * @return {?}
     */
    function (node, nextNode) {
        if (nextNode && this.DOM.contains(node, nextNode)) {
            throw new Error("Failed to sanitize html because the element is clobbered: " + this.DOM.getOuterHTML(node));
        }
        return nextNode;
    };
    return SanitizingHtmlSerializer;
}());
// Regular Expressions for parsing tags and attributes
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
// ! to ~ is the ASCII range.
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param {?} value
 * @return {?}
 */
function encodeEntities(value) {
    return value.replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, function (match) {
        var /** @type {?} */ hi = match.charCodeAt(0);
        var /** @type {?} */ low = match.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    })
        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
var inertBodyHelper;
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 * @param {?} defaultDoc
 * @param {?} unsafeHtmlInput
 * @return {?}
 */
function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
    var /** @type {?} */ DOM = getDOM();
    var /** @type {?} */ inertBodyElement = null;
    try {
        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc, DOM);
        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
        var /** @type {?} */ mXSSAttempts = 5;
        var /** @type {?} */ parsedHtml = unsafeHtml;
        do {
            if (mXSSAttempts === 0) {
                throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            parsedHtml = DOM.getInnerHTML(inertBodyElement);
            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
        } while (unsafeHtml !== parsedHtml);
        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(inertBodyElement) || inertBodyElement);
        if (Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])() && sanitizer.sanitizedSomething) {
            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
        }
        return safeHtml;
    }
    finally {
        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
        if (inertBodyElement) {
            var /** @type {?} */ parent_1 = DOM.getTemplateContent(inertBodyElement) || inertBodyElement;
            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
                var child = _a[_i];
                DOM.removeChild(parent_1, child);
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 */
var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
var COLOR_FNS = '(?:rgb|hsl)a?';
var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
var CSS3_FNS = '(?:calc|attr)';
var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
    (FN_ARGS + ")$"), 'g');
/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 */
var URL_RE = /^url\(([^)]+)\)$/;
/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 *
 * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */
function hasBalancedQuotes(value) {
    var /** @type {?} */ outsideSingle = true;
    var /** @type {?} */ outsideDouble = true;
    for (var /** @type {?} */ i = 0; i < value.length; i++) {
        var /** @type {?} */ c = value.charAt(i);
        if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
}
/**
 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
 * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */
function sanitizeStyle(value) {
    value = String(value).trim(); // Make sure it's actually a string.
    if (!value)
        return '';
    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
    // reasoning behind this.
    var /** @type {?} */ urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
        return value; // Safe style values.
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])()) {
        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Marker interface for a value that's safe to use in a particular context.
 *
 * \@stable
 * @record
 */

/**
 * Marker interface for a value that's safe to use as HTML.
 *
 * \@stable
 * @record
 */

/**
 * Marker interface for a value that's safe to use as style (CSS).
 *
 * \@stable
 * @record
 */

/**
 * Marker interface for a value that's safe to use as JavaScript.
 *
 * \@stable
 * @record
 */

/**
 * Marker interface for a value that's safe to use as a URL linking to a document.
 *
 * \@stable
 * @record
 */

/**
 * Marker interface for a value that's safe to use as a URL to load executable code from.
 *
 * \@stable
 * @record
 */

/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * \@stable
 * @abstract
 */
var DomSanitizer = /** @class */ (function () {
    function DomSanitizer() {
    }
    return DomSanitizer;
}());
var DomSanitizerImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(DomSanitizerImpl, _super);
    function DomSanitizerImpl(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        return _this;
    }
    /**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.sanitize = /**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */
    function (ctx, value) {
        if (value == null)
            return null;
        switch (ctx) {
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].NONE:
                return /** @type {?} */ (value);
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].HTML:
                if (value instanceof SafeHtmlImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'HTML');
                return sanitizeHtml(this._doc, String(value));
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].STYLE:
                if (value instanceof SafeStyleImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Style');
                return sanitizeStyle(/** @type {?} */ (value));
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].SCRIPT:
                if (value instanceof SafeScriptImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Script');
                throw new Error('unsafe value used in a script context');
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].URL:
                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                    // Allow resource URLs in URL contexts, they are strictly more trusted.
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'URL');
                return sanitizeUrl(String(value));
            case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].RESOURCE_URL:
                if (value instanceof SafeResourceUrlImpl) {
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'ResourceURL');
                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */
    DomSanitizerImpl.prototype.checkNotSafeValue = /**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */
    function (value, expectedType) {
        if (value instanceof SafeValueImpl) {
            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
                "(see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return new SafeHtmlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return new SafeStyleImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return new SafeScriptImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return new SafeUrlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    DomSanitizerImpl.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT$1,] },] },
    ]; };
    return DomSanitizerImpl;
}(DomSanitizer));
/**
 * @abstract
 */
var SafeValueImpl = /** @class */ (function () {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
        // empty
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    /**
     * @return {?}
     */
    SafeValueImpl.prototype.toString = /**
     * @return {?}
     */
    function () {
        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
            " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
}());
var SafeHtmlImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeHtmlImpl.prototype.getTypeName = /**
     * @return {?}
     */
    function () { return 'HTML'; };
    return SafeHtmlImpl;
}(SafeValueImpl));
var SafeStyleImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(SafeStyleImpl, _super);
    function SafeStyleImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeStyleImpl.prototype.getTypeName = /**
     * @return {?}
     */
    function () { return 'Style'; };
    return SafeStyleImpl;
}(SafeValueImpl));
var SafeScriptImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(SafeScriptImpl, _super);
    function SafeScriptImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeScriptImpl.prototype.getTypeName = /**
     * @return {?}
     */
    function () { return 'Script'; };
    return SafeScriptImpl;
}(SafeValueImpl));
var SafeUrlImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(SafeUrlImpl, _super);
    function SafeUrlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeUrlImpl.prototype.getTypeName = /**
     * @return {?}
     */
    function () { return 'URL'; };
    return SafeUrlImpl;
}(SafeValueImpl));
var SafeResourceUrlImpl = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_2_tslib__["b" /* __extends */])(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeResourceUrlImpl.prototype.getTypeName = /**
     * @return {?}
     */
    function () { return 'ResourceURL'; };
    return SafeResourceUrlImpl;
}(SafeValueImpl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_ID"], useValue: __WEBPACK_IMPORTED_MODULE_0__angular_common__["ɵPLATFORM_BROWSER_ID"] },
    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_INITIALIZER"], useValue: initDomAdapter, multi: true },
    { provide: __WEBPACK_IMPORTED_MODULE_0__angular_common__["PlatformLocation"], useClass: BrowserPlatformLocation, deps: [DOCUMENT$1] },
    { provide: DOCUMENT$1, useFactory: _document, deps: [] },
];
/**
 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * \@experimental
 */
var BROWSER_SANITIZATION_PROVIDERS = [
    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Sanitizer"], useExisting: DomSanitizer },
    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT$1] },
];
/**
 * \@stable
 */
var platformBrowser = Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["createPlatformFactory"])(__WEBPACK_IMPORTED_MODULE_1__angular_core__["platformCore"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
/**
 * @return {?}
 */
function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
}
/**
 * @return {?}
 */
function errorHandler() {
    return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["ErrorHandler"]();
}
/**
 * @return {?}
 */
function _document() {
    return document;
}
/**
 * The ng module for the browser.
 *
 * \@stable
 */
var BrowserModule = /** @class */ (function () {
    function BrowserModule(parentModule) {
        if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
        }
    }
    /**
     * Configures a browser-based application to transition from a server-rendered app, if
     * one is present on the page. The specified parameters must include an application id,
     * which must match between the client and server applications.
     *
     * @experimental
     */
    /**
     * Configures a browser-based application to transition from a server-rendered app, if
     * one is present on the page. The specified parameters must include an application id,
     * which must match between the client and server applications.
     *
     * \@experimental
     * @param {?} params
     * @return {?}
     */
    BrowserModule.withServerTransition = /**
     * Configures a browser-based application to transition from a server-rendered app, if
     * one is present on the page. The specified parameters must include an application id,
     * which must match between the client and server applications.
     *
     * \@experimental
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return {
            ngModule: BrowserModule,
            providers: [
                { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_ID"], useValue: params.appId },
                { provide: TRANSITION_ID, useExisting: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_ID"] },
                SERVER_TRANSITION_PROVIDERS,
            ],
        };
    };
    BrowserModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"], args: [{
                    providers: [
                        BROWSER_SANITIZATION_PROVIDERS,
                        { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["ErrorHandler"], useFactory: errorHandler, deps: [] },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                        DomRendererFactory2,
                        { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["RendererFactory2"], useExisting: DomRendererFactory2 },
                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                        DomSharedStylesHost,
                        __WEBPACK_IMPORTED_MODULE_1__angular_core__["Testability"],
                        EventManager,
                        ELEMENT_PROBE_PROVIDERS,
                        Meta,
                        Title,
                    ],
                    exports: [__WEBPACK_IMPORTED_MODULE_0__angular_common__["CommonModule"], __WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationModule"]]
                },] },
    ];
    /** @nocollapse */
    BrowserModule.ctorParameters = function () { return [
        { type: BrowserModule, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["SkipSelf"] },] },
    ]; };
    return BrowserModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var win = typeof window !== 'undefined' && window || /** @type {?} */ ({});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ChangeDetectionPerfRecord = /** @class */ (function () {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
        this.msPerTick = msPerTick;
        this.numTicks = numTicks;
    }
    return ChangeDetectionPerfRecord;
}());
/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */
var AngularProfiler = /** @class */ (function () {
    function AngularProfiler(ref) {
        this.appRef = ref.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationRef"]);
    }
    // tslint:disable:no-console
    /**
     * Exercises change detection in a loop and then prints the average amount of
     * time in milliseconds how long a single round of change detection takes for
     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
     * of 500 milliseconds.
     *
     * Optionally, a user may pass a `config` parameter containing a map of
     * options. Supported options are:
     *
     * `record` (boolean) - causes the profiler to record a CPU profile while
     * it exercises the change detector. Example:
     *
     * ```
     * ng.profiler.timeChangeDetection({record: true})
     * ```
     */
    /**
     * Exercises change detection in a loop and then prints the average amount of
     * time in milliseconds how long a single round of change detection takes for
     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
     * of 500 milliseconds.
     *
     * Optionally, a user may pass a `config` parameter containing a map of
     * options. Supported options are:
     *
     * `record` (boolean) - causes the profiler to record a CPU profile while
     * it exercises the change detector. Example:
     *
     * ```
     * ng.profiler.timeChangeDetection({record: true})
     * ```
     * @param {?} config
     * @return {?}
     */
    AngularProfiler.prototype.timeChangeDetection = /**
     * Exercises change detection in a loop and then prints the average amount of
     * time in milliseconds how long a single round of change detection takes for
     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
     * of 500 milliseconds.
     *
     * Optionally, a user may pass a `config` parameter containing a map of
     * options. Supported options are:
     *
     * `record` (boolean) - causes the profiler to record a CPU profile while
     * it exercises the change detector. Example:
     *
     * ```
     * ng.profiler.timeChangeDetection({record: true})
     * ```
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var /** @type {?} */ record = config && config['record'];
        var /** @type {?} */ profileName = 'Change Detection';
        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;
        if (record && isProfilerAvailable) {
            win.console.profile(profileName);
        }
        var /** @type {?} */ start = getDOM().performanceNow();
        var /** @type {?} */ numTicks = 0;
        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
            this.appRef.tick();
            numTicks++;
        }
        var /** @type {?} */ end = getDOM().performanceNow();
        if (record && isProfilerAvailable) {
            // need to cast to <any> because type checker thinks there's no argument
            // while in fact there is:
            //
            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
            (/** @type {?} */ (win.console.profileEnd))(profileName);
        }
        var /** @type {?} */ msPerTick = (end - start) / numTicks;
        win.console.log("ran " + numTicks + " change detection cycles");
        win.console.log(msPerTick.toFixed(2) + " ms per check");
        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    };
    return AngularProfiler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var PROFILER_GLOBAL_NAME = 'profiler';
/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * \@experimental All debugging apis are currently experimental.
 * @template T
 * @param {?} ref
 * @return {?}
 */
function enableDebugTools(ref) {
    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
    return ref;
}
/**
 * Disables Angular tools.
 *
 * \@experimental All debugging apis are currently experimental.
 * @return {?}
 */
function disableDebugTools() {
    exportNgVar(PROFILER_GLOBAL_NAME, null);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} text
 * @return {?}
 */
function escapeHtml(text) {
    var /** @type {?} */ escapedText = {
        '&': '&a;',
        '"': '&q;',
        '\'': '&s;',
        '<': '&l;',
        '>': '&g;',
    };
    return text.replace(/[&"'<>]/g, function (s) { return escapedText[s]; });
}
/**
 * @param {?} text
 * @return {?}
 */
function unescapeHtml(text) {
    var /** @type {?} */ unescapedText = {
        '&a;': '&',
        '&q;': '"',
        '&s;': '\'',
        '&l;': '<',
        '&g;': '>',
    };
    return text.replace(/&[^;]+;/g, function (s) { return unescapedText[s]; });
}
/**
 * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
 *
 * Example:
 *
 * ```
 * const COUNTER_KEY = makeStateKey<number>('counter');
 * let value = 10;
 *
 * transferState.set(COUNTER_KEY, value);
 * ```
 *
 * \@experimental
 * @template T
 * @param {?} key
 * @return {?}
 */
function makeStateKey(key) {
    return /** @type {?} */ (key);
}
/**
 * A key value store that is transferred from the application on the server side to the application
 * on the client side.
 *
 * `TransferState` will be available as an injectable token. To use it import
 * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
 *
 * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
 * boolean, number, string, null and non-class objects will be serialized and deserialzied in a
 * non-lossy manner.
 *
 * \@experimental
 */
var TransferState = /** @class */ (function () {
    function TransferState() {
        this.store = {};
        this.onSerializeCallbacks = {};
    }
    /** @internal */
    /**
     * \@internal
     * @param {?} initState
     * @return {?}
     */
    TransferState.init = /**
     * \@internal
     * @param {?} initState
     * @return {?}
     */
    function (initState) {
        var /** @type {?} */ transferState = new TransferState();
        transferState.store = initState;
        return transferState;
    };
    /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     */
    /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     * @template T
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    TransferState.prototype.get = /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     * @template T
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    function (key, defaultValue) {
        return this.store[key] !== undefined ? /** @type {?} */ (this.store[key]) : defaultValue;
    };
    /**
     * Set the value corresponding to a key.
     */
    /**
     * Set the value corresponding to a key.
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    TransferState.prototype.set = /**
     * Set the value corresponding to a key.
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) { this.store[key] = value; };
    /**
     * Remove a key from the store.
     */
    /**
     * Remove a key from the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    TransferState.prototype.remove = /**
     * Remove a key from the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) { delete this.store[key]; };
    /**
     * Test whether a key exists in the store.
     */
    /**
     * Test whether a key exists in the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    TransferState.prototype.hasKey = /**
     * Test whether a key exists in the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) { return this.store.hasOwnProperty(key); };
    /**
     * Register a callback to provide the value for a key when `toJson` is called.
     */
    /**
     * Register a callback to provide the value for a key when `toJson` is called.
     * @template T
     * @param {?} key
     * @param {?} callback
     * @return {?}
     */
    TransferState.prototype.onSerialize = /**
     * Register a callback to provide the value for a key when `toJson` is called.
     * @template T
     * @param {?} key
     * @param {?} callback
     * @return {?}
     */
    function (key, callback) {
        this.onSerializeCallbacks[key] = callback;
    };
    /**
     * Serialize the current state of the store to JSON.
     */
    /**
     * Serialize the current state of the store to JSON.
     * @return {?}
     */
    TransferState.prototype.toJson = /**
     * Serialize the current state of the store to JSON.
     * @return {?}
     */
    function () {
        // Call the onSerialize callbacks and put those values into the store.
        for (var /** @type {?} */ key in this.onSerializeCallbacks) {
            if (this.onSerializeCallbacks.hasOwnProperty(key)) {
                try {
                    this.store[key] = this.onSerializeCallbacks[key]();
                }
                catch (/** @type {?} */ e) {
                    console.warn('Exception in onSerialize callback: ', e);
                }
            }
        }
        return JSON.stringify(this.store);
    };
    TransferState.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    TransferState.ctorParameters = function () { return []; };
    return TransferState;
}());
/**
 * @param {?} doc
 * @param {?} appId
 * @return {?}
 */
function initTransferState(doc, appId) {
    // Locate the script tag with the JSON data transferred from the server.
    // The id of the script tag is set to the Angular appId + 'state'.
    var /** @type {?} */ script = doc.getElementById(appId + '-state');
    var /** @type {?} */ initialState = {};
    if (script && script.textContent) {
        try {
            initialState = JSON.parse(unescapeHtml(script.textContent));
        }
        catch (/** @type {?} */ e) {
            console.warn('Exception while restoring TransferState for app ' + appId, e);
        }
    }
    return TransferState.init(initialState);
}
/**
 * NgModule to install on the client side while using the `TransferState` to transfer state from
 * server to client.
 *
 * \@experimental
 */
var BrowserTransferStateModule = /** @class */ (function () {
    function BrowserTransferStateModule() {
    }
    BrowserTransferStateModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"], args: [{
                    providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT$1, __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_ID"]] }],
                },] },
    ];
    /** @nocollapse */
    BrowserTransferStateModule.ctorParameters = function () { return []; };
    return BrowserTransferStateModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Predicates for use with {\@link DebugElement}'s query functions.
 *
 * \@experimental All debugging apis are currently experimental.
 */
var By = /** @class */ (function () {
    function By() {
    }
    /**
     * Match all elements.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     */
    /**
     * Match all elements.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     * @return {?}
     */
    By.all = /**
     * Match all elements.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     * @return {?}
     */
    function () { return function (debugElement) { return true; }; };
    /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     */
    /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     * @param {?} selector
     * @return {?}
     */
    By.css = /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     * @param {?} selector
     * @return {?}
     */
    function (selector) {
        return function (debugElement) {
            return debugElement.nativeElement != null ?
                getDOM().elementMatches(debugElement.nativeElement, selector) :
                false;
        };
    };
    /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     */
    /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     * @param {?} type
     * @return {?}
     */
    By.directive = /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return function (debugElement) { return ((debugElement.providerTokens)).indexOf(type) !== -1; };
    };
    return By;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 */
var VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Version"]('5.2.10');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=platform-browser.js.map


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AlertController = /** @class */ (function () {
    //@ngInject
    function AlertController($scope, alertService) {
        $scope.$id = "alertController";
        $scope.alerts = alertService.getAlerts();
    }
    return AlertController;
}());
exports.AlertController = AlertController;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var alert_1 = __webpack_require__(174);
var core_1 = __webpack_require__(0);
var AlertService = /** @class */ (function () {
    function AlertService() {
        this.alerts = [];
    }
    AlertService.prototype.newAlert = function () {
        return new alert_1.Alert();
    };
    ;
    AlertService.prototype.get = function () {
        return this.alerts || [];
    };
    ;
    AlertService.prototype.addAlert = function (alert) {
        var _this = this;
        this.alerts.push(alert);
        setTimeout(function () {
            if (!alert.dismissable) {
                _this.removeAlert(alert);
            }
        }, 3500);
    };
    ;
    AlertService.prototype.addAlerts = function (alerts) {
        var _this = this;
        angular.forEach(alerts, function (alert) {
            _this.addAlert(alert);
        });
    };
    ;
    AlertService.prototype.removeAlert = function (alert) {
        var index = this.alerts.indexOf(alert, 0);
        if (index != undefined) {
            this.alerts.splice(index, 1);
        }
    };
    ;
    AlertService.prototype.getAlerts = function () {
        return this.alerts;
    };
    ;
    AlertService.prototype.formatMessagesToAlerts = function (messages) {
        var alerts = [];
        if (messages && messages.length) {
            for (var message in messages) {
                var alert = new alert_1.Alert(messages[message].message, messages[message].messageType);
                alerts.push(alert);
                if (alert.type === 'success' || alert.type === 'error') {
                    setTimeout(function () {
                        alert.fade = true;
                    }, 3500);
                    alert.dismissable = false;
                }
                else {
                    alert.fade = false;
                    alert.dismissable = true;
                }
            }
        }
        return alerts;
    };
    ;
    AlertService.prototype.removeOldestAlert = function () {
        this.alerts.splice(0, 1);
    };
    AlertService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], AlertService);
    return AlertService;
}());
exports.AlertService = AlertService;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//model
var Alert = /** @class */ (function () {
    function Alert(msg, type, fade, dismissable) {
        this.fade = false;
        this.dismissable = false;
        this.msg = msg;
        this.type = type;
        this.fade = fade;
        this.dismissable = dismissable;
    }
    return Alert;
}());
exports.Alert = Alert;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var DialogService = /** @class */ (function () {
    function DialogService(
    //private hibachiPathBuilder
    ) {
        this.pageDialogs = [];
        //this.hibachiPathBuilder = hibachiPathBuilder;
    }
    DialogService.prototype.get = function () {
        return this.pageDialogs || [];
    };
    ;
    DialogService.prototype.addPageDialog = function (name, params) {
        var newDialog = {
            'path': name + '.html',
            'params': params
        };
        this.pageDialogs.push(newDialog);
        //this.pageDialogs.push(new PageDialog(name+".html",params));
    };
    ;
    DialogService.prototype.removePageDialog = function (index) {
        this.pageDialogs.splice(index, 1);
    };
    ;
    DialogService.prototype.getPageDialogs = function () {
        return this.pageDialogs;
    };
    ;
    DialogService.prototype.removeCurrentDialog = function () {
        this.pageDialogs.splice(this.pageDialogs.length - 1, 1);
    };
    ;
    DialogService.prototype.getCurrentDialog = function () {
        return this.pageDialogs[this.pageDialogs.length - 1];
    };
    ;
    DialogService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], DialogService);
    return DialogService;
}());
exports.DialogService = DialogService;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var PageDialogController = /** @class */ (function () {
    //@ngInject
    function PageDialogController($scope, $location, $anchorScroll, dialogService) {
        $scope.$id = 'pageDialogController';
        //get url param to retrieve collection listing
        $scope.pageDialogs = dialogService.getPageDialogs();
        $scope.scrollToTopOfDialog = function () {
            $location.hash('/#topOfPageDialog');
            $anchorScroll();
        };
        $scope.pageDialogStyle = { "z-index": 3000 };
    }
    return PageDialogController;
}());
exports.PageDialogController = PageDialogController;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//import alertmodule = require('./alert/alert.module');
var alert_module_1 = __webpack_require__(10);
var card_module_1 = __webpack_require__(48);
var collection_module_1 = __webpack_require__(18);
var listing_module_1 = __webpack_require__(49);
var dialog_module_1 = __webpack_require__(17);
var entity_module_1 = __webpack_require__(50);
var pagination_module_1 = __webpack_require__(51);
var form_module_1 = __webpack_require__(52);
var validation_module_1 = __webpack_require__(54);
var workflow_module_1 = __webpack_require__(55);
var alert_module_2 = __webpack_require__(10);
var card_module_2 = __webpack_require__(48);
var collection_module_2 = __webpack_require__(18);
var listing_module_2 = __webpack_require__(49);
var dialog_module_2 = __webpack_require__(17);
var entity_module_2 = __webpack_require__(50);
var pagination_module_2 = __webpack_require__(51);
var form_module_2 = __webpack_require__(52);
var validation_module_2 = __webpack_require__(54);
var workflow_module_2 = __webpack_require__(55);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
//directives
var swsaveandfinish_1 = __webpack_require__(280);
var HibachiModule = /** @class */ (function () {
    function HibachiModule() {
    }
    HibachiModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                alert_module_2.AlertModule,
                card_module_2.CardModule,
                collection_module_2.CollectionModule,
                listing_module_2.ListingModule,
                dialog_module_2.DialogModule,
                entity_module_2.EntityModule,
                pagination_module_2.PaginationModule,
                form_module_2.FormModule,
                validation_module_2.ValidationModule,
                workflow_module_2.WorkflowModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], HibachiModule);
    return HibachiModule;
}());
exports.HibachiModule = HibachiModule;
var hibachimodule = angular.module('hibachi', [
    alert_module_1.alertmodule.name,
    card_module_1.cardmodule.name,
    collection_module_1.collectionmodule.name,
    entity_module_1.entitymodule.name,
    dialog_module_1.dialogmodule.name,
    listing_module_1.listingmodule.name,
    pagination_module_1.paginationmodule.name,
    form_module_1.formmodule.name,
    validation_module_1.validationmodule.name,
    workflow_module_1.workflowmodule.name
]).config([function () {
    }])
    .run(['$rootScope', 'publicService', '$hibachi', 'localStorageService', function ($rootScope, publicService, $hibachi, localStorageService) {
        $rootScope.hibachiScope = publicService;
        $rootScope.hasAccount = publicService.hasAccount;
        if ($hibachi.newAccount) {
            $rootScope.hibachiScope.getAccount();
        }
        if ($hibachi.newOrder) {
            $rootScope.hibachiScope.getCart();
        }
        if ($hibachi.newCountry) {
            $rootScope.hibachiScope.getCountries();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getStates();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getAddressOptions();
        }
        if (localStorageService.hasItem('selectedPersonalCollection')) {
            $rootScope.hibachiScope.selectedPersonalCollection = angular.fromJson(localStorageService.getItem('selectedPersonalCollection'));
        }
    }])
    .constant('hibachiPartialsPath', 'hibachi/components/')
    .directive('swSaveAndFinish', swsaveandfinish_1.SWSaveAndFinish.Factory());
exports.hibachimodule = hibachimodule;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardLayoutController = /** @class */ (function () {
    //@ngInject
    function SWCardLayoutController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
        console.log("This card class", this.cardClass);
    }
    return SWCardLayoutController;
}());
exports.SWCardLayoutController = SWCardLayoutController;
var SWCardLayout = /** @class */ (function () {
    //@ngInject
    function SWCardLayout(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardLayoutController;
        this.controllerAs = 'SwCardLayoutController';
        this.scope = {};
        this.bindToController = {
            cardClass: "@?"
        };
        this.transclude = {
            cardView: '?swCardView',
        };
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlayout.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardLayout.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardLayout(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardLayout;
}());
exports.SWCardLayout = SWCardLayout;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardViewController = /** @class */ (function () {
    //@ngInject
    function SWCardViewController($log) {
        this.$log = $log;
        this.cardSize = 'md';
    }
    return SWCardViewController;
}());
exports.SWCardViewController = SWCardViewController;
var SWCardView = /** @class */ (function () {
    //@ngInject
    function SWCardView(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardViewController;
        this.scope = {};
        this.controllerAs = 'SwCardViewController';
        this.bindToController = {
            cardTitle: "@?",
            cardBody: "@?",
            cardSize: "@?" //sm, md, lg
        };
        this.transclude = {
            cardIcon: '?swCardIcon',
            cardHeader: '?swCardHeader',
            cardBody: '?swCardBody',
            listItem: '?swCardListItem',
            progressBar: '?swCardProgressBar'
        };
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardview.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardView.Factory = function () {
        var directive = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardView(cardPartialsPath, hibachiPathBuilder); };
        directive.$inject = ["cardPartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWCardView;
}());
exports.SWCardView = SWCardView;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardHeaderController = /** @class */ (function () {
    //@ngInject
    function SWCardHeaderController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
    }
    return SWCardHeaderController;
}());
exports.SWCardHeaderController = SWCardHeaderController;
var SWCardHeader = /** @class */ (function () {
    //@ngInject
    function SWCardHeader(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardHeaderController;
        this.controllerAs = 'SwCardHeaderController';
        this.scope = {};
        this.bindToController = {
            addBorder: '@?'
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardheader.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardHeader.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardHeader(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardHeader;
}());
exports.SWCardHeader = SWCardHeader;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardBodyController = /** @class */ (function () {
    //@ngInject
    function SWCardBodyController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
    }
    return SWCardBodyController;
}());
exports.SWCardBodyController = SWCardBodyController;
var SWCardBody = /** @class */ (function () {
    //@ngInject
    function SWCardBody(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardBodyController;
        this.controllerAs = 'SwCardBodyController';
        this.scope = {};
        this.bindToController = {};
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardbody.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardBody.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardBody(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardBody;
}());
exports.SWCardBody = SWCardBody;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardIconController = /** @class */ (function () {
    //@ngInject
    function SWCardIconController($log) {
        this.$log = $log;
        this.iconMultiplier = "1x";
        this.$onInit = function () {
        };
    }
    return SWCardIconController;
}());
exports.SWCardIconController = SWCardIconController;
var SWCardIcon = /** @class */ (function () {
    //@ngInject
    function SWCardIcon(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardIconController;
        this.controllerAs = 'SwCardIconController';
        this.scope = {};
        this.bindToController = {
            iconName: "@?",
            iconMultiplier: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardicon.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardIcon.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardIcon(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardIcon;
}());
exports.SWCardIcon = SWCardIcon;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardProgressBarController = /** @class */ (function () {
    //@ngInject
    function SWCardProgressBarController($log) {
        this.$log = $log;
        this.valueMin = 0;
        this.valueMax = 100;
        this.valueNow = 0;
        this.$onInit = function () { };
    }
    return SWCardProgressBarController;
}());
exports.SWCardProgressBarController = SWCardProgressBarController;
var SWCardProgressBar = /** @class */ (function () {
    //@ngInject
    function SWCardProgressBar(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardProgressBarController;
        this.scope = {};
        this.controllerAs = 'SwCardProgressBarController';
        this.bindToController = {
            valueMin: "@?",
            valueMax: "@?",
            valueNow: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardprogressbar.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardProgressBar.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardProgressBar(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardProgressBar;
}());
exports.SWCardProgressBar = SWCardProgressBar;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardListItemController = /** @class */ (function () {
    //@ngInject
    function SWCardListItemController($log) {
        this.$log = $log;
        this.strong = 'false';
        this.style = 'padding-top:5px;padding-bottom:5px';
        this.$onInit = function () { };
    }
    return SWCardListItemController;
}());
exports.SWCardListItemController = SWCardListItemController;
var SWCardListItem = /** @class */ (function () {
    //@ngInject
    function SWCardListItem(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardListItemController;
        this.controllerAs = 'SwCardListItemController';
        this.scope = {};
        this.bindToController = {
            title: "@?",
            value: "@?",
            strong: "@?",
            style: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlistitem.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardListItem.Factory = function () {
        console.log("Getting new list item");
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardListItem(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardListItem;
}());
exports.SWCardListItem = SWCardListItem;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var Column = /** @class */ (function () {
    function Column(propertyIdentifier, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, attributeID, attributeSetObject, type) {
        if (isVisible === void 0) { isVisible = true; }
        if (isDeletable === void 0) { isDeletable = true; }
        if (isSearchable === void 0) { isSearchable = true; }
        if (isExportable === void 0) { isExportable = true; }
        this.propertyIdentifier = propertyIdentifier;
        this.title = title;
        this.isVisible = isVisible;
        this.isDeletable = isDeletable;
        this.isSearchable = isSearchable;
        this.isExportable = isExportable;
        this.persistent = persistent;
        this.ormtype = ormtype;
        this.attributeID = attributeID;
        this.attributeSetObject = attributeSetObject;
        this.type = type;
    }
    return Column;
}());
exports.Column = Column;
var Filter = /** @class */ (function () {
    function Filter(propertyIdentifier, value, comparisonOperator, logicalOperator, displayPropertyIdentifier, displayValue, hidden, pattern) {
        if (hidden === void 0) { hidden = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.hidden = hidden;
        this.pattern = pattern;
    }
    return Filter;
}());
exports.Filter = Filter;
var CollectionFilter = /** @class */ (function () {
    function CollectionFilter(propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
        if (readOnly === void 0) { readOnly = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.collectionID = collectionID;
        this.criteria = criteria;
        this.fieldtype = fieldtype;
        this.readOnly = readOnly;
    }
    return CollectionFilter;
}());
exports.CollectionFilter = CollectionFilter;
var Join = /** @class */ (function () {
    function Join(associationName, alias) {
        this.associationName = associationName;
        this.alias = alias;
    }
    return Join;
}());
exports.Join = Join;
var OrderBy = /** @class */ (function () {
    function OrderBy(propertyIdentifier, direction) {
        this.propertyIdentifier = propertyIdentifier;
        this.direction = direction;
    }
    return OrderBy;
}());
exports.OrderBy = OrderBy;
var CollectionConfig = /** @class */ (function () {
    // @ngInject
    function CollectionConfig(rbkeyService, $hibachi, utilityService, observerService, baseEntityName, baseEntityAlias, columns, keywordColumns, filterGroups, keywordFilterGroups, joins, orderBy, groupBys, id, currentPage, pageShow, keywords, allRecords, dirtyRead, isDistinct) {
        if (keywordColumns === void 0) { keywordColumns = []; }
        if (filterGroups === void 0) { filterGroups = [{ filterGroup: [] }]; }
        if (keywordFilterGroups === void 0) { keywordFilterGroups = [{ filterGroup: [] }]; }
        if (currentPage === void 0) { currentPage = 1; }
        if (pageShow === void 0) { pageShow = 10; }
        if (keywords === void 0) { keywords = ''; }
        if (allRecords === void 0) { allRecords = false; }
        if (dirtyRead === void 0) { dirtyRead = false; }
        if (isDistinct === void 0) { isDistinct = false; }
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.baseEntityName = baseEntityName;
        this.baseEntityAlias = baseEntityAlias;
        this.columns = columns;
        this.keywordColumns = keywordColumns;
        this.filterGroups = filterGroups;
        this.keywordFilterGroups = keywordFilterGroups;
        this.joins = joins;
        this.orderBy = orderBy;
        this.groupBys = groupBys;
        this.id = id;
        this.currentPage = currentPage;
        this.pageShow = pageShow;
        this.keywords = keywords;
        this.allRecords = allRecords;
        this.dirtyRead = dirtyRead;
        this.isDistinct = isDistinct;
        this.clearFilterGroups = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            _this.keywordFilterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.newCollectionConfig = function (baseEntityName, baseEntityAlias) {
            return new CollectionConfig(_this.rbkeyService, _this.$hibachi, _this.utilityService, _this.observerService, baseEntityName, baseEntityAlias);
        };
        this.loadJson = function (jsonCollection) {
            //if json then make a javascript object else use the javascript object
            //if coldfusion has double encoded the json keep calling fromJson until it becomes an object
            while (angular.isString(jsonCollection)) {
                jsonCollection = angular.fromJson(jsonCollection);
            }
            _this.baseEntityAlias = jsonCollection.baseEntityAlias;
            _this.baseEntityName = jsonCollection.baseEntityName;
            if (angular.isDefined(jsonCollection.filterGroups)) {
                _this.validateFilter(jsonCollection.filterGroups);
                _this.filterGroups = jsonCollection.filterGroups;
            }
            _this.columns = jsonCollection.columns;
            _this.joins = jsonCollection.joins;
            _this.keywords = jsonCollection.keywords;
            _this.orderBy = jsonCollection.orderBy;
            _this.groupBys = jsonCollection.groupBys;
            _this.pageShow = jsonCollection.pageShow;
            _this.allRecords = jsonCollection.allRecords;
            if (jsonCollection.dirtyRead) {
                _this.dirtyRead = jsonCollection.dirtyRead;
            }
            _this.isDistinct = jsonCollection.isDistinct;
            _this.currentPage = jsonCollection.currentPage || 1;
            _this.pageShow = jsonCollection.pageShow || 10;
            _this.keywords = jsonCollection.keywords;
            return _this;
        };
        this.clone = function () {
            return _this.newCollectionConfig(_this.baseEntityName, _this.baseEntityAlias).loadJson(JSON.parse(JSON.stringify(_this.getCollectionConfig())));
        };
        this.loadFilterGroups = function (filterGroupsConfig) {
            if (filterGroupsConfig === void 0) { filterGroupsConfig = [{ filterGroup: [] }]; }
            _this.filterGroups = filterGroupsConfig;
            return _this;
        };
        this.loadColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.getCollectionConfig = function (validate) {
            if (validate === void 0) { validate = true; }
            if (validate) {
                _this.validateFilter(_this.filterGroups);
            }
            return {
                baseEntityAlias: _this.baseEntityAlias,
                baseEntityName: _this.baseEntityName,
                columns: _this.columns,
                keywordColumns: _this.keywordColumns,
                filterGroups: _this.filterGroups,
                joins: _this.joins,
                groupBys: _this.groupBys,
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct,
                orderBy: _this.orderBy
            };
        };
        this.getEntityName = function () {
            return _this.baseEntityName.charAt(0).toUpperCase() + _this.baseEntityName.slice(1);
        };
        this.getOptions = function () {
            _this.validateFilter(_this.filterGroups);
            var columns = _this.columns;
            if (_this.keywords && _this.keywords.length && _this.keywordFilterGroups[0].filterGroup.length > 0) {
                var filters = _this.keywordFilterGroups;
            }
            else {
                var filters = _this.filterGroups;
            }
            var options = {
                columnsConfig: angular.toJson(columns),
                filterGroupsConfig: angular.toJson(filters),
                joinsConfig: angular.toJson(_this.joins),
                orderByConfig: angular.toJson(_this.orderBy),
                groupBysConfig: angular.toJson(_this.groupBys),
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct
            };
            if (angular.isDefined(_this.id)) {
                options['id'] = _this.id;
            }
            return options;
        };
        this.debug = function () {
            return _this;
        };
        this.formatPropertyIdentifier = function (propertyIdentifier, addJoin) {
            if (addJoin === void 0) { addJoin = false; }
            //if already starts with alias, strip it out
            if (propertyIdentifier.lastIndexOf(_this.baseEntityAlias, 0) === 0) {
                propertyIdentifier = propertyIdentifier.slice(_this.baseEntityAlias.length + 1);
            }
            var _propertyIdentifier = _this.baseEntityAlias;
            if (addJoin === true) {
                _propertyIdentifier += _this.processJoin(propertyIdentifier);
            }
            else {
                _propertyIdentifier += '.' + propertyIdentifier;
            }
            return _propertyIdentifier;
        };
        this.processJoin = function (propertyIdentifier) {
            var _propertyIdentifier = '', propertyIdentifierParts = propertyIdentifier.split('.'), current_collection = _this.collection;
            for (var i = 0; i < propertyIdentifierParts.length; i++) {
                if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                    current_collection = _this.$hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                    _propertyIdentifier += '_' + propertyIdentifierParts[i];
                    _this.addJoin(new Join(_propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1), _this.baseEntityAlias + _propertyIdentifier));
                }
                else {
                    _propertyIdentifier += '.' + propertyIdentifierParts[i];
                }
            }
            return _propertyIdentifier;
        };
        this.addJoin = function (join) {
            if (!_this.joins) {
                _this.joins = [];
            }
            var joinFound = false;
            angular.forEach(_this.joins, function (configJoin) {
                if (configJoin.alias === join.alias) {
                    joinFound = true;
                }
            });
            if (!joinFound) {
                _this.joins.push(join);
            }
            return _this;
        };
        this.addAlias = function (propertyIdentifier) {
            var parts = propertyIdentifier.split('.');
            if (parts.length > 1 && parts[0] !== _this.baseEntityAlias) {
                return _this.baseEntityAlias + '.' + propertyIdentifier;
            }
            return propertyIdentifier;
        };
        this.addColumn = function (column, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            if (!_this.columns || options.aggregate != null || _this.utilityService.ArrayFindByPropertyValue(_this.columns, 'propertyIdentifier', column) === -1) {
                var isVisible = true, isDeletable = true, isSearchable = true, isExportable = true, persistent, type = 'none', ormtype = 'string', lastProperty = column.split('.').pop(), isKeywordColumn = true, isOnlyKeywordColumn = false;
                var lastEntity = _this.$hibachi.getEntityExample(_this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column));
                if (angular.isUndefined(lastEntity)) {
                    throw ("You have passed an incorrect entity name to a collection config");
                }
                if (angular.isUndefined(_this.columns)) {
                    _this.columns = [];
                }
                //hide id columns
                if (angular.isDefined(options['isVisible'])) {
                    isVisible = options['isVisible'];
                }
                if (angular.isUndefined(options.isVisible) &&
                    column.substring(column.length - 2) === "ID") {
                    isVisible = false;
                }
                if (angular.isDefined(options['isDeletable'])) {
                    isDeletable = options['isDeletable'];
                }
                if (angular.isDefined(options['isSearchable'])) {
                    isSearchable = options['isSearchable'];
                }
                if (angular.isDefined(options['isExportable'])) {
                    isExportable = options['isExportable'];
                }
                if (angular.isUndefined(options['isExportable']) && !isVisible) {
                    isExportable = false;
                }
                if (angular.isDefined(options['ormtype'])) {
                    ormtype = options['ormtype'];
                }
                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].ormtype) {
                    ormtype = lastEntity.metaData[lastProperty].ormtype;
                }
                if (angular.isDefined(options['type']) && options['type'] != 'none') {
                    type = options['type'];
                }
                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].hb_formattype) {
                    type = lastEntity.metaData[lastProperty].hb_formattype;
                }
                if (angular.isDefined(options['isKeywordColumn'])) {
                    isKeywordColumn = options['isKeywordColumn'];
                }
                if (angular.isDefined(options['isOnlyKeywordColumn'])) {
                    isOnlyKeywordColumn = options['isOnlyKeywordColumn'];
                }
                if (angular.isDefined(lastEntity.metaData[lastProperty])) {
                    persistent = lastEntity.metaData[lastProperty].persistent;
                }
                var columnObject = new Column(column, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, options['attributeID'], options['attributeSetObject'], type);
                if (options['aggregate']) {
                    columnObject['aggregate'] = options['aggregate'],
                        columnObject['aggregateAlias'] = title;
                }
                //add any non-conventional options
                for (var key in options) {
                    if (!columnObject[key]) {
                        columnObject[key] = options[key];
                    }
                }
                if (!isOnlyKeywordColumn) {
                    _this.columns.push(columnObject);
                }
                if (isKeywordColumn) {
                    _this.keywordColumns.push(columnObject);
                }
            }
            return _this;
        };
        this.setDisplayProperties = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            _this.addDisplayProperty(propertyIdentifier, title, options);
            return _this;
        };
        this.addDisplayAggregate = function (propertyIdentifier, aggregateFunction, aggregateAlias, options) {
            if (angular.isUndefined(aggregateAlias)) {
                aggregateAlias = propertyIdentifier.replace(/\./g, '_') + aggregateFunction;
            }
            var column = {
                propertyIdentifier: _this.formatPropertyIdentifier(propertyIdentifier, true),
                title: _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier)),
                aggregate: {
                    aggregateFunction: aggregateFunction,
                    aggregateAlias: aggregateAlias
                }
            };
            angular.extend(column, options);
            //Add columns
            _this.addColumn(column.propertyIdentifier, undefined, column);
            return _this;
        };
        this.addGroupBy = function (groupByAlias) {
            if (!_this.groupBys) {
                _this.groupBys = '';
            }
            _this.groupBys = _this.utilityService.listAppendUnique(_this.groupBys, groupByAlias);
            return _this;
        };
        this.addDisplayProperty = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            var _DividedColumns = propertyIdentifier.trim().split(',');
            var _DividedTitles = title.trim().split(',');
            var join = propertyIdentifier.split('.').length > 1;
            _DividedColumns.forEach(function (column, index) {
                column = column.trim();
                if (angular.isDefined(_DividedTitles[index]) && _DividedTitles[index].trim() != '') {
                    title = _DividedTitles[index].trim();
                }
                else {
                    title = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column) + "." + _this.utilityService.listLast(column, "."));
                }
                _this.addColumn(_this.formatPropertyIdentifier(column, join), title, options);
            });
            return _this;
        };
        this.addFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden, isKeywordFilter, isOnlyKeywordFilter) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            if (isKeywordFilter === void 0) { isKeywordFilter = true; }
            if (isOnlyKeywordFilter === void 0) { isOnlyKeywordFilter = false; }
            if (!_this.filterGroups[0].filterGroup.length) {
                logicalOperator = undefined;
            }
            if (propertyIdentifier.split('.').length > 1) {
                _this.processJoin(propertyIdentifier);
            }
            //create filter
            var filter = _this.createFilter(propertyIdentifier, value, comparisonOperator, logicalOperator, hidden);
            if (!isOnlyKeywordFilter) {
                _this.filterGroups[0].filterGroup.push(filter);
            }
            if (isKeywordFilter) {
                _this.keywordFilterGroups[0].filterGroup.push(filter);
            }
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.addLikeFilter = function (propertyIdentifier, value, pattern, logicalOperator, displayPropertyIdentifier, hidden) {
            if (pattern === void 0) { pattern = '%w%'; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            if (angular.isUndefined(displayPropertyIdentifier)) {
                displayPropertyIdentifier = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier));
            }
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, 'like', logicalOperator, displayPropertyIdentifier, value, hidden, pattern);
            _this.filterGroups[0].filterGroup.push(filter);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.createFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, comparisonOperator, logicalOperator, propertyIdentifier.split('.').pop(), value, hidden);
            return filter;
        };
        this.addFilterGroup = function (filterGroup) {
            var group = {
                filterGroup: [],
                logicalOperator: 'AND'
            };
            for (var i = 0; i < filterGroup.length; i++) {
                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);
                group.filterGroup.push(filter);
            }
            _this.filterGroups[0].filterGroup.push(group);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilter = function (propertyIdentifier, value, comparisonOperator) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            _this.removeFilterHelper(_this.filterGroups, propertyIdentifier, value, comparisonOperator);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilterByDisplayPropertyIdentifier = function (displayPropertyIdentifier) {
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.filterGroups, displayPropertyIdentifier);
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.keywordFilterGroups, displayPropertyIdentifier);
        };
        this.removeFromFilterGroupsByPropertyIdentifier = function (filterGroups, displayPropertyIdentifier) {
            for (var j = 0; j < filterGroups.length; j++) {
                var filterGroup = filterGroups[j].filterGroup;
                for (var i = 0; i < filterGroup.length; i++) {
                    var filter = filterGroup[i];
                    if (filter.displayPropertyIdentifier == displayPropertyIdentifier) {
                        filterGroup.splice(i, 1);
                        i--;
                    }
                }
            }
        };
        this.removeFilterHelper = function (filter, propertyIdentifier, value, comparisonOperator, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.removeFilterHelper(key, propertyIdentifier, value, comparisonOperator, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.removeFilterHelper(filter.filterGroup, propertyIdentifier, value, comparisonOperator, filter.filterGroup);
            }
            else {
                if (filter.propertyIdentifier == propertyIdentifier && filter.value == value && filter.comparisonOperator == comparisonOperator) {
                    currentGroup.splice(currentGroup.indexOf(filter), 1);
                }
            }
        };
        this.addCollectionFilter = function (propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
            if (criteria === void 0) { criteria = 'One'; }
            if (readOnly === void 0) { readOnly = false; }
            _this.filterGroups[0].filterGroup.push(new CollectionFilter(_this.formatPropertyIdentifier(propertyIdentifier), displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly));
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        //orderByList in this form: "property|direction" concrete: "skuName|ASC"
        this.setOrderBy = function (orderByList) {
            var orderBys = orderByList.split(',');
            angular.forEach(orderBys, function (orderBy) {
                _this.addOrderBy(orderBy);
            });
            return _this;
        };
        this.clearOrderBy = function () {
            _this.orderBy = [];
        };
        this.addOrderBy = function (orderByString, formatPropertyIdentifier) {
            if (formatPropertyIdentifier === void 0) { formatPropertyIdentifier = true; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var propertyIdentifier = _this.utilityService.listFirst(orderByString, '|');
            if (formatPropertyIdentifier) {
                propertyIdentifier = _this.formatPropertyIdentifier(propertyIdentifier);
            }
            var direction = _this.utilityService.listLast(orderByString, '|');
            var orderBy = {
                propertyIdentifier: propertyIdentifier,
                direction: direction
            };
            _this.orderBy.push(orderBy);
        };
        this.toggleOrderBy = function (formattedPropertyIdentifier, singleColumn) {
            if (singleColumn === void 0) { singleColumn = false; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var found = false;
            for (var i = _this.orderBy.length - 1; i >= 0; i--) {
                if (_this.orderBy[i].propertyIdentifier == formattedPropertyIdentifier) {
                    found = true;
                    if (_this.orderBy[i].direction.toUpperCase() == "DESC") {
                        _this.orderBy[i].direction = "ASC";
                    }
                    else if (_this.orderBy[i].direction.toUpperCase() == "ASC") {
                        _this.orderBy.splice(i, 1);
                    }
                    break;
                }
            }
            var direction = 'desc';
            if (singleColumn) {
                _this.orderBy = [];
                for (var i = 0; i < _this.columns.length; i++) {
                    if (!_this.columns[i]["sorting"]) {
                        _this.columns[i]["sorting"] = {};
                    }
                    if (angular.isUndefined(_this.columns[i]["sorting"]["active"])) {
                        _this.columns[i]["sorting"]["active"] = false;
                    }
                    if (_this.columns[i]['propertyIdentifier'] == formattedPropertyIdentifier) {
                        _this.columns[i]["sorting"]["active"] = true;
                        _this.columns[i]["sorting"]["priority"] = 1;
                        if (!_this.columns[i]["sorting"]["sortOrder"] || _this.columns[i]["sorting"]["sortOrder"] === 'desc') {
                            _this.columns[i]["sorting"]["sortOrder"] = 'asc';
                            direction = 'asc';
                        }
                        else {
                            _this.columns[i]["sorting"]["sortOrder"] = 'desc';
                            direction = 'desc';
                        }
                    }
                    else if (_this.columns[i]["sorting"] && _this.columns[i]["sorting"]["active"]) {
                        _this.columns[i]["sorting"]["active"] = false;
                        _this.columns[i]["sorting"]["sortOrder"] = 'asc';
                    }
                }
            }
            _this.addOrderBy(formattedPropertyIdentifier + '|' + direction, false);
            _this.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
        };
        this.removeOrderBy = function (formattedPropertyIdentifier) {
            angular.forEach(_this.orderBy, function (orderBy, index) {
                if (orderBy.propertyIdentifier == formattedPropertyIdentifier) {
                    _this.orderBy.splice(index, 1);
                    return true;
                }
            });
            return false;
        };
        this.setCurrentPage = function (pageNumber) {
            _this.currentPage = pageNumber;
            return _this;
        };
        this.getCurrentPage = function () {
            return _this.currentPage;
        };
        this.setPageShow = function (NumberOfPages) {
            _this.pageShow = NumberOfPages;
            return _this;
        };
        this.getPageShow = function () {
            return _this.pageShow;
        };
        this.setAllRecords = function (allFlag) {
            if (allFlag === void 0) { allFlag = false; }
            _this.allRecords = allFlag;
            return _this;
        };
        this.setDistinct = function (flag) {
            if (flag === void 0) { flag = true; }
            _this.isDistinct = flag;
            return _this;
        };
        this.setDirtyRead = function (flag) {
            if (flag === void 0) { flag = false; }
            _this.dirtyRead = flag;
            return _this;
        };
        this.setKeywords = function (keyword) {
            _this.keywords = keyword;
            return _this;
        };
        this.setId = function (id) {
            _this.id = id;
            return _this;
        };
        this.setEventID = function (eventID) {
            _this.eventID = eventID;
            return _this;
        };
        this.hasFilters = function () {
            return (_this.filterGroups.length && _this.filterGroups[0].filterGroup.length);
        };
        this.hasColumns = function () {
            return _this.columns != null && _this.columns.length > 0;
        };
        this.clearFilters = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.getEntity = function (id) {
            if (angular.isDefined(id)) {
                _this.setId(id);
            }
            return _this.$hibachi.getEntity(_this.baseEntityName, _this.getOptions());
        };
        this.validateFilter = function (filter, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.validateFilter(key, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.validateFilter(filter.filterGroup, filter.filterGroup);
            }
            else {
                if ((!filter.comparisonOperator || !filter.comparisonOperator.length) && (!filter.propertyIdentifier || !filter.propertyIdentifier.length)) {
                    var index = currentGroup.indexOf(filter);
                    if (index > -1) {
                        _this.notify('filterItemAction', {
                            action: 'remove',
                            filterItemIndex: index
                        });
                        currentGroup.splice(index, 1);
                    }
                }
            }
        };
        this.getColumns = function () {
            if (!_this.columns) {
                _this.columns = [];
            }
            return _this.columns;
        };
        this.setColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        if (angular.isDefined(this.baseEntityName)) {
            this.collection = this.$hibachi.getEntityExample(this.baseEntityName);
            if (angular.isUndefined(this.baseEntityAlias)) {
                this.baseEntityAlias = '_' + this.baseEntityName.toLowerCase();
            }
        }
    }
    Object.defineProperty(CollectionConfig.prototype, "collectionConfigString", {
        get: function () {
            return angular.toJson(this.getCollectionConfig(false));
        },
        enumerable: true,
        configurable: true
    });
    CollectionConfig.prototype.notify = function (name, data) {
        if (angular.isDefined(this.eventID)) {
            this.observerService.notifyById(name, this.eventID, data);
        }
        else {
            this.observerService.notify(name, data);
        }
    };
    return CollectionConfig;
}());
exports.CollectionConfig = CollectionConfig;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(6);
var CollectionService = /** @class */ (function (_super) {
    __extends(CollectionService, _super);
    //@ngInject
    function CollectionService($injector, $hibachi, utilityService, $filter, $log) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Collection') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.$filter = $filter;
        _this.$log = $log;
        _this.get = function () {
            return _this._pageDialogs || [];
        };
        //test
        _this.setFilterCount = function (count) {
            _this.$log.debug('incrementFilterCount');
            _this._filterCount = count;
        };
        _this.getFilterCount = function () {
            return _this._filterCount;
        };
        _this.getColumns = function () {
            return _this._collection.collectionConfig.columns;
        };
        _this.getFilterPropertiesList = function () {
            return _this._filterPropertiesList;
        };
        _this.getFilterPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
            return _this._filterPropertiesList[baseEntityAlias];
        };
        _this.setFilterPropertiesList = function (value, key) {
            if (angular.isUndefined(_this._filterPropertiesList[key])) {
                _this._filterPropertiesList[key] = value;
            }
        };
        _this.stringifyJSON = function (jsonObject) {
            var jsonString = angular.toJson(jsonObject);
            return jsonString;
        };
        _this.removeFilterItem = function (filterItem, filterGroup) {
            filterGroup.pop(filterGroup.indexOf(filterItem));
        };
        _this.selectFilterItem = function (filterItem) {
            if (filterItem.$$isClosed) {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$isClosed = true;
                    filterItem.$$siblingItems[i].$$disabled = true;
                }
                filterItem.$$isClosed = false;
                filterItem.$$disabled = false;
                filterItem.setItemInUse(true);
            }
            else {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$disabled = false;
                }
                filterItem.$$isClosed = true;
                filterItem.setItemInUse(false);
            }
        };
        _this.selectFilterGroupItem = function (filterGroupItem) {
            if (filterGroupItem.$$isClosed) {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = true;
                }
                filterGroupItem.$$isClosed = false;
                filterGroupItem.$$disabled = false;
            }
            else {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = false;
                }
                filterGroupItem.$$isClosed = true;
            }
            filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);
        };
        _this.newFilterItem = function (filterItemGroup, setItemInUse, prepareForFilterGroup) {
            if (angular.isUndefined(prepareForFilterGroup)) {
                prepareForFilterGroup = false;
            }
            var filterItem = {
                displayPropertyIdentifier: "",
                propertyIdentifier: "",
                comparisonOperator: "",
                value: "",
                $$disabled: false,
                $$isClosed: true,
                $$isNew: true,
                $$siblingItems: filterItemGroup,
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterItem.logicalOperator = "AND";
            }
            if (prepareForFilterGroup === true) {
                filterItem.$$prepareForFilterGroup = true;
            }
            filterItemGroup.push(filterItem);
            _this.selectFilterItem(filterItem);
            return (filterItemGroup.length - 1);
        };
        _this.newFilterGroupItem = function (filterItemGroup, setItemInUse) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$siblingItems: filterItemGroup,
                $$isNew: "true",
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterGroupItem.logicalOperator = "AND";
            }
            filterItemGroup.push(filterGroupItem);
            _this.selectFilterGroupItem(filterGroupItem);
            _this.newFilterItem(filterGroupItem.filterGroup, setItemInUse, undefined);
        };
        _this.transplantFilterItemIntoFilterGroup = function (filterGroup, filterItem) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$isNew: "true"
            };
            if (angular.isDefined(filterItem.logicalOperator)) {
                filterGroupItem.logicalOperator = filterItem.logicalOperator;
                delete filterItem.logicalOperator;
            }
            filterGroupItem.setItemInUse = filterItem.setItemInUse;
            filterGroupItem.$$siblingItems = filterItem.$$siblingItems;
            filterItem.$$siblingItems = [];
            filterGroup.pop(filterGroup.indexOf(filterItem));
            filterItem.$$prepareForFilterGroup = false;
            filterGroupItem.filterGroup.push(filterItem);
            filterGroup.push(filterGroupItem);
        };
        _this.formatFilterPropertiesList = function (filterPropertiesList, propertyIdentifier) {
            _this.$log.debug('format Filter Properties List arguments 2');
            _this.$log.debug(filterPropertiesList);
            _this.$log.debug(propertyIdentifier);
            var simpleGroup = {
                $$group: 'simple',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(simpleGroup);
            var drillDownGroup = {
                $$group: 'drilldown',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(drillDownGroup);
            var compareCollections = {
                $$group: 'compareCollections',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(compareCollections);
            var attributeCollections = {
                $$group: 'attribute',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(attributeCollections);
            for (var i in filterPropertiesList.data) {
                if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {
                    if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {
                        filterPropertiesList.data[i].$$group = 'attribute';
                    }
                    else {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                }
                if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {
                    if (filterPropertiesList.data[i].fieldtype === 'id') {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {
                        filterPropertiesList.data[i].$$group = 'drilldown';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {
                        filterPropertiesList.data[i].$$group = 'compareCollections';
                    }
                }
                filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;
            }
            filterPropertiesList.data = _this._orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);
        };
        _this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        _this.$filter = $filter;
        _this.$log = $log;
        _this._collection = null;
        _this._collectionConfig = null;
        _this._filterPropertiesList = {};
        _this._filterCount = 0;
        _this._orderBy = $filter('orderBy');
        return _this;
    }
    return CollectionService;
}(baseentityservice_1.BaseEntityService));
exports.CollectionService = CollectionService;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionController = /** @class */ (function () {
    //@ngInject
    function CollectionController($scope, $attrs, $log, $timeout, $hibachi, collectionService, metadataService, selectionService, paginationService, collectionConfigService, appConfig, observerService) {
        $scope.saveCollection = function (collectionData) {
            var data = {
                collectionID: $attrs.collectionId,
                collectionConfig: collectionData.collectionConfig
            };
            var saveCollectionPromise = $hibachi.saveEntity('Collection', $attrs.collectionId, data, 'save');
            saveCollectionPromise.then(function (value) {
            }, function (reason) {
            });
        };
        observerService.attach($scope.saveCollection, 'swPaginationUpdate', $attrs.tableId);
    }
    return CollectionController;
}());
exports.CollectionController = CollectionController;
// 'use strict';
// angular.module('slatwalladmin')
// //using $location to get url params, this will probably change to using routes eventually
// .controller('collections', [
// 	'$scope',
// '$location',
// '$log',
// '$timeout',
// '$hibachi',
// 'collectionService',
// 'metadataService',
// 'selectionService',
// 'paginationService',
// 	function(
// 		$scope,
// $location,
// $log,
// $timeout,
// $hibachi,
// collectionService,
// metadataService,
// selectionService,
// paginationService
// 	){
//
// 	}
// ]);


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CreateCollection = /** @class */ (function () {
    //@ngInject
    function CreateCollection($scope, $log, $timeout, $hibachi, collectionService, metadataService, paginationService, dialogService, observerService, selectionService, collectionConfigService, rbkeyService, $window) {
        $window.scrollTo(0, 0);
        $scope.params = dialogService.getCurrentDialog().params;
        $scope.readOnly = angular.isDefined($scope.params.readOnly) && $scope.params.readOnly == true;
        $scope.myCollection = collectionConfigService.newCollectionConfig($scope.params.entityName);
        var hibachiConfig = $hibachi.getConfig();
        if ($scope.params.entityName == 'Type' && angular.isUndefined($scope.params.entityId) && angular.isDefined($scope.params.parentEntity)) {
            $scope.params.parentEntity = $scope.params.parentEntity.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
            var systemCode = $scope.params.parentEntity.charAt(0).toLowerCase() + $scope.params.parentEntity.slice(1) + 'Type';
            $scope.myCollection.addFilter('parentType.systemCode', systemCode);
        }
        $scope.keywords = '';
        $scope.paginator = paginationService.createPagination();
        //$scope.isRadio = true;
        $scope.hideEditView = true;
        //$scope.closeSaving = true;
        $scope.hasSelection = selectionService.getSelectionCount;
        $scope.idsSelected = selectionService.getSelections;
        $scope.unselectAll = function () {
            selectionService.clearSelections('collectionSelection');
            $scope.getCollection();
        };
        $scope.newCollection = $hibachi.newCollection();
        $scope.newCollection.data.collectionCode = $scope.params.entityName + "-" + new Date().valueOf();
        $scope.newCollection.data.collectionObject = $scope.params.entityName;
        if (angular.isDefined($scope.params.entityId)) {
            $scope.newCollection.data.collectionID = $scope.params.entityId;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        if (angular.isDefined($scope.params.collectionName)) {
            $scope.newCollection.data.collectionName = $scope.params.collectionName;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        $scope.saveCollection = function () {
            $scope.myCollection.loadJson($scope.collectionConfig);
            $scope.getCollection();
        };
        $scope.getCollection = function () {
            $scope.closeSaving = true;
            $scope.myCollection.setPageShow($scope.paginator.getPageShow());
            $scope.myCollection.setCurrentPage($scope.paginator.getCurrentPage());
            $scope.myCollection.setKeywords($scope.keywords);
            var collectionOptions;
            if (angular.isDefined($scope.params.entityId)) {
                collectionOptions = {
                    id: $scope.params.entityId,
                    currentPage: $scope.paginator.getCurrentPage(),
                    pageShow: $scope.paginator.getPageShow(),
                    keywords: $scope.keywords
                };
            }
            else {
                collectionOptions = $scope.myCollection.getOptions();
            }
            $log.debug($scope.myCollection.getOptions());
            var collectionListingPromise = $hibachi.getEntity($scope.myCollection.getEntityName(), collectionOptions);
            collectionListingPromise.then(function (value) {
                if (angular.isDefined($scope.params.entityId)) {
                    $scope.newCollection.data.collectionName = value.collectionName;
                }
                $scope.collection = value;
                $scope.collection.collectionObject = $scope.myCollection.baseEntityName;
                $scope.collectionInitial = angular.copy($scope.collection);
                $scope.paginator.setRecordsCount($scope.collection.recordsCount);
                $scope.paginator.setPageRecordsInfo($scope.collection);
                if (angular.isUndefined($scope.myCollection.columns)) {
                    var colConfig = angular.fromJson(value.collectionConfig);
                    colConfig.baseEntityName = colConfig.baseEntityName.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
                    $scope.myCollection.loadJson(colConfig);
                }
                if (angular.isUndefined($scope.collectionConfig)) {
                    var tempCollectionConfig = collectionConfigService.newCollectionConfig();
                    tempCollectionConfig.loadJson(value.collectionConfig);
                    $scope.collectionConfig = tempCollectionConfig.getCollectionConfig();
                }
                if (angular.isUndefined($scope.collectionConfig.filterGroups) || !$scope.collectionConfig.filterGroups.length) {
                    $scope.collectionConfig.filterGroups = [
                        {
                            filterGroup: []
                        }
                    ];
                }
                collectionService.setFilterCount(filterItemCounter());
                $scope.loadingCollection = false;
                $scope.closeSaving = false;
            }, function (reason) {
            });
            return collectionListingPromise;
        };
        $scope.paginator.collection = $scope.newCollection;
        $scope.paginator.getCollection = $scope.getCollection;
        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                if (angular.isUndefined($scope.filterPropertiesList)) {
                    $scope.filterPropertiesList = {};
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
                    filterPropertiesPromise.then(function (value) {
                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
                    });
                }
                unbindCollectionObserver();
            }
        });
        var filterItemCounter = function (filterGroupArray) {
            var filterItemCount = 0;
            if (!angular.isDefined(filterGroupArray)) {
                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
            }
            //Start out loop
            for (var index in filterGroupArray) {
                //If filter isn't new then increment the count
                if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {
                    filterItemCount++;
                    // If there are nested filter groups run introspectively
                }
                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
                    //Call function recursively
                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
                    //Otherwise make like the foo fighters and "Break Out!"
                }
                else {
                    break;
                }
            }
            return filterItemCount;
        };
        $scope.getCollection();
        $scope.copyExistingCollection = function () {
            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
        };
        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
            $scope.selectedExistingCollection = selectedExistingCollection;
        };
        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
            $scope.selectedFilterProperty = selectedFilterProperty;
        };
        $scope.loadingCollection = false;
        var searchPromise;
        $scope.searchCollection = function () {
            if (searchPromise) {
                $timeout.cancel(searchPromise);
            }
            searchPromise = $timeout(function () {
                //$log.debug('search with keywords');
                //$log.debug($scope.keywords);
                //Set current page here so that the pagination does not break when getting collection
                $scope.paginator.setCurrentPage(1);
                $scope.loadingCollection = true;
            }, 500);
        };
        $scope.filterCount = collectionService.getFilterCount;
        //
        $scope.hideExport = true;
        $scope.saveNewCollection = function ($index) {
            if ($scope.closeSaving)
                return;
            $scope.closeSaving = true;
            if (!angular.isUndefined(selectionService.getSelections('collectionSelection'))
                && (selectionService.getSelections('collectionSelection').length > 0)) {
                $scope.collectionConfig.filterGroups[0].filterGroup = [
                    {
                        "displayPropertyIdentifier": rbkeyService.getRBKey("entity." + $scope.myCollection.baseEntityName.toLowerCase() + "." + $scope.myCollection.collection.$$getIDName().toLowerCase()),
                        "propertyIdentifier": $scope.myCollection.baseEntityAlias + "." + $scope.myCollection.collection.$$getIDName(),
                        "comparisonOperator": "in",
                        "value": selectionService.getSelections('collectionSelection').join(),
                        "displayValue": selectionService.getSelections('collectionSelection').join(),
                        "ormtype": "string",
                        "fieldtype": "id",
                        "conditionDisplay": "In List"
                    }
                ];
            }
            $scope.newCollection.data.collectionConfig = $scope.collectionConfig;
            if ($scope.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(hibachiConfig.applicationKey, 0) !== 0) {
                $scope.newCollection.data.collectionConfig.baseEntityName = hibachiConfig.applicationKey + $scope.newCollection.data.collectionConfig.baseEntityName;
            }
            $scope.newCollection.$$save().then(function () {
                observerService.notify('addCollection', $scope.newCollection.data);
                selectionService.clearSelection('collectionSelection');
                dialogService.removePageDialog($index);
                $scope.closeSaving = false;
            }, function () {
                $scope.closeSaving = false;
            });
        };
    }
    return CreateCollection;
}());
exports.CreateCollection = CreateCollection;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var ConfirmationController = /** @class */ (function () {
    //@ngInject
    function ConfirmationController($scope, $log, $modalInstance) {
        $scope.deleteEntity = function (entity) {
            $log.debug("Deleting an entity.");
            $log.debug($scope.entity);
            this.close();
        };
        $scope.fireCallback = function (callbackFunction) {
            callbackFunction();
            this.close();
        };
        /**
        * Closes the modal window
        */
        $scope.close = function () {
            $modalInstance.close();
        };
        /**
        * Cancels the modal window
        */
        $scope.cancel = function () {
            $modalInstance.dismiss("cancel");
        };
    }
    return ConfirmationController;
}());
exports.ConfirmationController = ConfirmationController;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionCreateController = /** @class */ (function () {
    //@ngInject
    function CollectionCreateController($scope, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.collectionConfigService = collectionConfigService;
        this.$scope.entity_createcollectionCtrl = {};
        this.$scope.entity_createcollectionCtrl.baseCollections = [];
        this.collection = this.collectionConfigService.newCollectionConfig('Collection');
        this.collection.setDisplayProperties('collectionID,collectionName');
        this.getBaseCollections('Access');
        //on select change get collection
        this.$scope.entity_createcollectionCtrl.collectionObjectChanged = function () {
            _this.getBaseCollections(_this.$scope.entity_createcollectionCtrl.selectedOption);
        };
    }
    CollectionCreateController.prototype.getBaseCollections = function (baseCollectionObject) {
        var _this = this;
        this.collection.clearFilters();
        this.collection.addFilter('collectionObject', baseCollectionObject);
        this.collection.setPageShow(50);
        this.collection.getEntity().then(function (res) {
            _this.$scope.entity_createcollectionCtrl.baseCollections = res.pageRecords;
        });
    };
    return CollectionCreateController;
}());
exports.CollectionCreateController = CollectionCreateController;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollection = /** @class */ (function () {
    //@ngInject
    function SWCollection(hibachiPathBuilder, collectionPartialsPath) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collection.html",
            link: function (scope, $element, $attrs) {
                scope.tabsUniqueID = Math.floor(Math.random() * 999);
                scope.toggleCogOpen = $attrs.toggleoption;
                //Toggles open/close of filters and display options
                scope.toggleFiltersAndOptions = function () {
                    if (scope.toggleCogOpen === false) {
                        scope.toggleCogOpen = true;
                    }
                    else {
                        scope.toggleCogOpen = false;
                    }
                };
            }
        };
    }
    SWCollection.Factory = function () {
        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWCollection(hibachiPathBuilder, collectionPartialsPath); };
        directive.$inject = [
            'hibachiPathBuilder',
            'collectionPartialsPath'
        ];
        return directive;
    };
    return SWCollection;
}());
exports.SWCollection = SWCollection;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddFilterButtons = /** @class */ (function () {
    //@ngInject
    function SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            require: '^swFilterGroups',
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "addfilterbuttons.html",
            scope: {
                itemInUse: "=",
                readOnly: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);
                };
                scope.addFilterGroupItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse, true);
                };
            }
        };
    }
    SWAddFilterButtons.Factory = function () {
        var directive = function (collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAddFilterButtons;
}());
exports.SWAddFilterButtons = SWAddFilterButtons;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayOptions = /** @class */ (function () {
    //@ngInject
    function SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) {
        return {
            restrict: 'E',
            require: {
                swListingDisplay: "?^swListingDisplay",
                swListingControls: "?^swListingControls"
            },
            transclude: true,
            scope: {
                orderBy: "<",
                columns: '=',
                joins: "<",
                groupBys: "<",
                propertiesList: "<",
                saveCollection: "&?",
                baseEntityAlias: "<?",
                baseEntityName: "<?",
                listingName: "@?"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayoptions.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    this.removeColumn = function (columnIndex) {
                        if ($scope.columns.length) {
                            $scope.columns.splice(columnIndex, 1);
                        }
                    };
                }],
            link: function (scope, element, $attrs, controllers, observerService) {
                scope.breadCrumbs = [{
                        entityAlias: scope.baseEntityAlias,
                        cfc: scope.baseEntityAlias,
                        propertyIdentifier: scope.baseEntityAlias
                    }];
                scope.getPropertiesList = function () {
                    return scope.propertiesList;
                };
                scope.addDisplayDialog = {
                    isOpen: false,
                    toggleDisplayDialog: function () {
                        scope.addDisplayDialog.isOpen = !scope.addDisplayDialog.isOpen;
                    }
                };
                var getTitleFromProperty = function (selectedProperty) {
                    var baseEntityCfcName = scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + scope.baseEntityName.replace('Slatwall', '').slice(1);
                    var propertyIdentifier = selectedProperty.propertyIdentifier;
                    var title = '';
                    var propertyIdentifierArray = propertyIdentifier.replace(/^_/, '').split(/[._]+/);
                    var currentEntity;
                    var currentEntityInstance;
                    var prefix = 'entity.';
                    if (selectedProperty.$$group == "attribute") {
                        return selectedProperty.displayPropertyIdentifier;
                    }
                    angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {
                        //pass over the initial item
                        if (key !== 0) {
                            if (key === 1) {
                                currentEntityInstance = $hibachi['new' + scope.baseEntityName.replace('Slatwall', '')]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);
                            }
                            else {
                                var currentEntityInstance = $hibachi['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);
                            }
                            if (key < propertyIdentifierArray.length - 1) {
                                title += ' | ';
                            }
                        }
                    });
                    return title;
                };
                scope.addColumn = function (closeDialog) {
                    var selectedProperty = scope.selectedProperty;
                    if (angular.isDefined(scope.selectedAggregate)) {
                        selectedProperty = scope.selectedAggregate;
                    }
                    if (selectedProperty.$$group === 'simple' || 'attribute' || 'compareCollections') {
                        $log.debug(scope.columns);
                        if (angular.isDefined(selectedProperty)) {
                            var column = {
                                title: getTitleFromProperty(selectedProperty),
                                propertyIdentifier: selectedProperty.propertyIdentifier,
                                isVisible: true,
                                isDeletable: true,
                                isSearchable: true,
                                isExportable: true
                            };
                            //only add attributeid if the selectedProperty is attributeid
                            if (angular.isDefined(selectedProperty.attributeID)) {
                                column['attributeID'] = selectedProperty.attributeID;
                                column['attributeSetObject'] = selectedProperty.attributeSetObject;
                            }
                            if (angular.isDefined(selectedProperty.ormtype)) {
                                column['ormtype'] = selectedProperty.ormtype;
                            }
                            if ((!column['type'] || column['type'] == 'none') && selectedProperty.hb_formattype) {
                                column['type'] = selectedProperty.hb_formattype;
                            }
                            else {
                                column['type'] = 'none';
                            }
                            if (angular.isDefined(selectedProperty.aggregate)) {
                                column['ormtype'] = 'string';
                                column['aggregate'] = {
                                    aggregateFunction: selectedProperty.aggregate.toUpperCase(),
                                    aggregateAlias: selectedProperty.propertyIdentifier.split(/[._]+/).pop() + selectedProperty.aggregate.charAt(0).toUpperCase() + selectedProperty.aggregate.slice(1)
                                };
                                column['title'] += ' ' + rbkeyService.getRBKey('define.' + column['aggregate']['aggregateFunction']);
                            }
                            scope.columns.push(column);
                            if ((selectedProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                                var PIlimit = selectedProperty.propertyIdentifier.length;
                                if (selectedProperty.propertyIdentifier.indexOf('.') != -1) {
                                    PIlimit = selectedProperty.propertyIdentifier.indexOf('.');
                                }
                                var propertyIdentifierJoins = selectedProperty.propertyIdentifier.substring(1, PIlimit);
                                var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                                var current_collection = $hibachi.getEntityExample(scope.baseEntityName);
                                var _propertyIdentifier = '';
                                var joins = [];
                                if (angular.isDefined(scope.joins)) {
                                    joins = scope.joins;
                                }
                                for (var i = 1; i < propertyIdentifierParts.length; i++) {
                                    if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                        current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                        _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                        var newJoin = {
                                            associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                            alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                        };
                                        var joinFound = false;
                                        for (var j = 0; j < joins.length; j++) {
                                            if (joins[j].alias === newJoin.alias) {
                                                joinFound = true;
                                                break;
                                            }
                                        }
                                        if (!joinFound) {
                                            joins.push(newJoin);
                                        }
                                    }
                                }
                                scope.joins = joins;
                                if (angular.isUndefined(scope.groupBys) || scope.groupBys.split(',').length != scope.columns.length) {
                                    var groupbyArray = angular.isUndefined(scope.groupBys) ? [] : scope.groupBys.split(',');
                                    for (var col = 0; col < scope.columns.length; col++) {
                                        if ('attributeID' in scope.columns[col])
                                            continue;
                                        if (groupbyArray.indexOf(scope.columns[col].propertyIdentifier) == -1) {
                                            groupbyArray.push(scope.columns[col].propertyIdentifier);
                                        }
                                    }
                                    scope.groupBys = groupbyArray.join(',');
                                }
                            }
                            if (controllers.swListingControls) {
                                controllers.swListingControls.columnIsControllableMap[column.propertyIdentifier] = true;
                            }
                            scope.saveCollection();
                            if (angular.isDefined(closeDialog) && closeDialog === true) {
                                scope.addDisplayDialog.toggleDisplayDialog();
                                scope.selectBreadCrumb(0);
                            }
                        }
                    }
                };
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedPropertyChanged(null);
                };
                var unbindBaseEntityAlias = scope.$watch('baseEntityAlias', function (newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scope.breadCrumbs = [{
                                entityAlias: scope.baseEntityAlias,
                                cfc: scope.baseEntityAlias,
                                propertyIdentifier: scope.baseEntityAlias
                            }];
                        unbindBaseEntityAlias();
                    }
                });
                scope.selectedPropertyChanged = function (selectedProperty, aggregate) {
                    // drill down or select field?
                    if (!aggregate) {
                        scope.selectedProperty = selectedProperty;
                        scope.selectedAggregate = undefined;
                    }
                    else {
                        scope.selectedAggregate = selectedProperty;
                    }
                };
                jQuery(function ($) {
                    var panelList = angular.element(element).children('ul');
                    panelList.sortable({
                        // Only make the .panel-heading child elements support dragging.
                        // Omit this to make then entire <li>...</li> draggable.
                        handle: '.s-pannel-name',
                        update: function (event, ui) {
                            var tempColumnsArray = [];
                            $('.s-pannel-name', panelList).each(function (index, elem) {
                                var newIndex = $(elem).attr('j-column-index');
                                var columnItem = scope.columns[newIndex];
                                tempColumnsArray.push(columnItem);
                            });
                            scope.columns = tempColumnsArray;
                            scope.saveCollection();
                        }
                    });
                });
                if (!scope.saveCollection && controllers.swListingControls) {
                    scope.saveCollection = function () {
                        controllers.swListingControls.collectionConfig.columns = scope.columns;
                        if (controllers.swListingDisplay) {
                            controllers.swListingDisplay.columns = scope.columns;
                        }
                        controllers.swListingControls.saveCollection();
                    };
                }
                if (controllers.swListingDisplay) {
                    scope.getCollection = controllers.swListingDisplay.getCollection;
                }
                /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){
                 $("select").selectBoxIt();
                 unbindBaseEntityAlaisWatchListener();
                 });*/
            }
        };
    }
    SWDisplayOptions.Factory = function () {
        var directive = function ($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) { return new SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'rbkeyService'
        ];
        return directive;
    };
    return SWDisplayOptions;
}());
exports.SWDisplayOptions = SWDisplayOptions;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItem = /** @class */ (function () {
    //@ngInject
    function SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '?^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitem.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    var breadCrumb = {
                        entityAlias: scope.selectedProperty.name,
                        cfc: scope.selectedProperty.cfc,
                        propertyIdentifier: scope.selectedProperty.propertyIdentifier
                    };
                    scope.breadCrumbs.push(breadCrumb);
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                    }
                });
            }
        };
    }
    SWDisplayItem.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItem;
}());
exports.SWDisplayItem = SWDisplayItem;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItemAggregate = /** @class */ (function () {
    //@ngInject
    function SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitemaggregate.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.aggregate = {};
                scope.aggregate.selectedAggregate = '';
                scope.aggregateOptions = [
                    { id: 'average', value: 'Average' },
                    { id: 'count', value: 'Count' },
                    { id: 'sum', value: 'Sum' },
                    { id: 'min', value: 'Min' },
                    { id: 'max', value: 'Max' }
                ];
                scope.selectAggregate = function (aggregate) {
                    if (aggregate == 'count') {
                        scope.selectedProperty.aggregate = aggregate;
                        scope.selectedPropertyChanged({ selectedProperty: scope.selectedProperty });
                    }
                    else {
                        scope.aggregate.currentObject = scope.selectedProperty.cfc;
                    }
                };
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    selectedDisplayOption.aggregate = scope.aggregate.selectedAggregate;
                    selectedDisplayOption.aggregateObject = scope.aggregate.currentObject;
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                        scope.showDisplayItem = true;
                    }
                });
            }
        };
    }
    SWDisplayItemAggregate.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItemAggregate;
}());
exports.SWDisplayItemAggregate = SWDisplayItemAggregate;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollectionTable = /** @class */ (function () {
    //@ngInject
    function SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collectiontable.html",
            scope: {
                collection: "=",
                collectionConfig: "=",
                isRadio: "=?",
                //angularLink:true || false
                angularLinks: "=?"
            },
            link: function (scope, element, attrs) {
                if (angular.isUndefined(scope.angularLinks)) {
                    scope.angularLinks = false;
                }
                if (scope.collection.collectionObject) {
                    scope.collectionObject = $hibachi['new' + scope.collection.collectionObject]();
                }
                else if (scope.collectionConfig.baseEntityName) {
                    scope.collectionObject = scope.collectionConfig.baseEntityName;
                }
                var escapeRegExp = function (str) {
                    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                };
                scope.replaceAll = function (str, find, replace) {
                    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
                };
                /*
                 * Handles setting the key on the data.
                 * */
                angular.forEach(scope.collectionConfig.columns, function (column) {
                    $log.debug("Config Key : " + column);
                    column.key = column.propertyIdentifier.replace(/\./g, '_').replace(scope.collectionConfig.baseEntityAlias + '_', '');
                });
                scope.addSelection = function (selectionid, selection) {
                    selectionService.addSelection(selectionid, selection);
                };
                scope.getCellValue = function (pageRecord, column) {
                    var value = '';
                    if (angular.isDefined(column.aggregate)) {
                        value = pageRecord[column.aggregate.aggregateAlias];
                    }
                    else if (column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias, '').charAt(0) == '.') {
                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '.', '')];
                    }
                    else {
                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '_', '').replace(/\./g, '_')];
                    }
                    var type = 'none';
                    if (angular.isDefined(column.type) && column.type != 'none') {
                        type = column.type;
                    }
                    if (type == 'none' && angular.isDefined(column.ormtype) && column.ormtype != 'none') {
                        type = column.ormtype;
                    }
                    if (type != 'none' && $injector.has(type + 'Filter')) {
                        return $filter(type)(value);
                    }
                    else {
                        return value;
                    }
                };
            }
        };
    }
    SWCollectionTable.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) { return new SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'selectionService',
            '$hibachi',
            '$filter',
            '$injector'
        ];
        return directive;
    };
    return SWCollectionTable;
}());
exports.SWCollectionTable = SWCollectionTable;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnItem = /** @class */ (function () {
    //@ngInject
    function SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService) {
        return {
            restrict: 'A',
            require: {
                swDisplayOptions: "?^swDisplayOptions",
                swListingControls: "?^swListingControls"
            },
            scope: {
                column: "=",
                columns: "=",
                columnIndex: "=",
                saveCollection: "&?",
                propertiesList: "<",
                orderBy: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "columnitem.html",
            link: function (scope, element, attrs, controller, observerService) {
                if (!scope.saveCollection && controller.swListingControls) {
                    scope.saveCollection = function () {
                        controller.swListingControls.collectionConfig.columns = scope.columns;
                        controller.swDisplayOptions.columns = scope.columns;
                        controller.swListingControls.saveCollection();
                    };
                }
                scope.editingDisplayTitle = false;
                scope.editDisplayTitle = function () {
                    if (angular.isUndefined(scope.column.displayTitle) || !scope.column.displayTitle.length) {
                        scope.column.displayTitle = scope.column.title;
                    }
                    scope.previousDisplayTitle = scope.column.displayTitle;
                    scope.editingDisplayTitle = true;
                };
                scope.saveDisplayTitle = function () {
                    scope.saveCollection();
                    scope.editingDisplayTitle = false;
                };
                scope.cancelDisplayTitle = function () {
                    scope.column.displayTitle = scope.previousDisplayTitle;
                    scope.editingDisplayTitle = false;
                };
                if (angular.isUndefined(scope.column.sorting)) {
                    scope.column.sorting = {
                        active: false,
                        sortOrder: 'asc',
                        priority: 0
                    };
                }
                scope.toggleVisible = function (column) {
                    if (angular.isUndefined(column.isVisible)) {
                        column.isVisible = false;
                    }
                    column.isVisible = !column.isVisible;
                    scope.saveCollection();
                };
                scope.toggleSearchable = function (column) {
                    if (angular.isUndefined(column.isSearchable)) {
                        column.isSearchable = false;
                    }
                    column.isSearchable = !column.isSearchable;
                    scope.saveCollection();
                };
                scope.toggleExportable = function (column) {
                    $log.debug('toggle exporable');
                    if (angular.isUndefined(column.isExportable)) {
                        column.isExportable = false;
                    }
                    column.isExportable = !column.isExportable;
                    scope.saveCollection();
                };
                var compareByPriority = function (a, b) {
                    if (a.sorting && b.sorting && angular.isDefined(a.sorting) && angular.isDefined(a.sorting.priority)) {
                        if (a.sorting.priority < b.sorting.priority) {
                            return -1;
                        }
                        if (a.sorting.priority > b.sorting.priority) {
                            return 1;
                        }
                    }
                    return 0;
                };
                var updateOrderBy = function () {
                    if (angular.isDefined(scope.columns)) {
                        var columnsCopy = angular.copy(scope.columns);
                        columnsCopy.sort(compareByPriority);
                        scope.orderBy = [];
                        angular.forEach(columnsCopy, function (column) {
                            if (angular.isDefined(column.sorting) && column.sorting.active === true) {
                                var orderBy = {
                                    propertyIdentifier: column.propertyIdentifier,
                                    direction: column.sorting.sortOrder
                                };
                                if (column.aggregate && column.aggregate.aggregateFunction) {
                                    var aggregateFunction = column.aggregate.aggregateFunction.toUpperCase();
                                    if (aggregateFunction == 'AVERAGE') {
                                        aggregateFunction = 'AVG';
                                    }
                                    orderBy.propertyIdentifier = aggregateFunction + '(' + column.propertyIdentifier + ')';
                                }
                                scope.orderBy.push(orderBy);
                            }
                        });
                    }
                };
                scope.toggleSortable = function (column) {
                    $log.debug('toggle sortable');
                    if (angular.isUndefined(column.sorting)) {
                        column.sorting = {
                            active: true,
                            sortOrder: 'asc',
                            priority: 0
                        };
                    }
                    if (column.sorting.active === true) {
                        if (column.sorting.sortOrder === 'asc') {
                            column.sorting.sortOrder = 'desc';
                        }
                        else {
                            removeSorting(column);
                            column.sorting.active = false;
                        }
                    }
                    else {
                        column.sorting.active = true;
                        column.sorting.sortOrder = 'asc';
                        column.sorting.priority = getActivelySorting().length;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var removeSorting = function (column, saving) {
                    if (column.sorting.active === true) {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority > column.sorting.priority) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = 0;
                    }
                    if (!saving) {
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
                scope.prioritize = function (column) {
                    if (column.sorting.priority === 1) {
                        var activelySorting = getActivelySorting();
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = activelySorting.length;
                    }
                    else {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority === column.sorting.priority - 1) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority + 1;
                            }
                        }
                        column.sorting.priority -= 1;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var getActivelySorting = function () {
                    var activelySorting = [];
                    for (var i in scope.columns) {
                        if (scope.columns[i].sorting.active === true) {
                            activelySorting.push(scope.columns[i]);
                        }
                    }
                    return activelySorting;
                };
                scope.removeColumn = function (columnIndex) {
                    if (scope.columns[columnIndex].isDeletable) {
                        removeSorting(scope.columns[columnIndex], true);
                        controller.swDisplayOptions.removeColumn(columnIndex);
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
            }
        };
    }
    SWColumnItem.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, observerService) { return new SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'observerService'
        ];
        return directive;
    };
    return SWColumnItem;
}());
exports.SWColumnItem = SWColumnItem;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWConditionCriteria = /** @class */ (function () {
    //@ngInject
    function SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        /* Template info begin*/
        var getTemplate = function (selectedFilterProperty) {
            var template = '';
            var templatePath = '';
            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {
                templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteria.html";
            }
            else {
                var criteriaormtype = selectedFilterProperty.ormtype;
                var criteriafieldtype = selectedFilterProperty.fieldtype;
                /*TODO: convert all switches to object literals*/
                switch (criteriaormtype) {
                    case 'boolean':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaboolean.html";
                        break;
                    case 'string':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriastring.html";
                        break;
                    case 'timestamp':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriadate.html";
                        break;
                    case 'big_decimal':
                    case 'integer':
                    case 'float':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criterianumber.html";
                        break;
                }
                switch (criteriafieldtype) {
                    case "many-to-one":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytoone.html";
                        break;
                    case "many-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytomany.html";
                        break;
                    case "one-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaonetomany.html";
                        break;
                }
            }
            var templateLoader = $http.get(templatePath, { cache: $templateCache });
            return templateLoader;
        };
        /* Template info end*/
        /* Options info begin */
        var getStringOptions = function (type) {
            var stringOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                stringOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Contains",
                        comparisonOperator: "like",
                        pattern: "%w%"
                    },
                    {
                        display: "Doesn't Contain",
                        comparisonOperator: "not like",
                        pattern: "%w%"
                    },
                    {
                        display: "Starts With",
                        comparisonOperator: "like",
                        pattern: "w%"
                    },
                    {
                        display: "Doesn't Start With",
                        comparisonOperator: "not like",
                        pattern: "w%"
                    },
                    {
                        display: "Ends With",
                        comparisonOperator: "like",
                        pattern: "%w"
                    },
                    {
                        display: "Doesn't End With",
                        comparisonOperator: "not like",
                        pattern: "%w"
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
                if (type === 'condition') {
                    stringOptions = [
                        {
                            display: "Equals",
                            comparisonOperator: "="
                        },
                        {
                            display: "In List",
                            comparisonOperator: "in"
                        },
                        {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    ];
                }
            }
            return stringOptions;
        };
        var getBooleanOptions = function (type) {
            var booleanOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter' || type === 'condition') {
                booleanOptions = [
                    {
                        display: "True",
                        comparisonOperator: "=",
                        value: "True"
                    },
                    {
                        display: "False",
                        comparisonOperator: "=",
                        value: "False"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return booleanOptions;
        };
        var getDateOptions = function (type) {
            var dateOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter') {
                dateOptions = [
                    {
                        display: "Date",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'exactDate',
                        }
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Today",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: 0,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Yesterday",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: -1,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Week",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Month",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Quarter",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Year",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Last N Hour(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'h',
                            measureTypeDisplay: 'Hours'
                        }
                    },
                    {
                        display: "Last N Day(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureTypeDisplay: 'Days'
                        }
                    },
                    {
                        display: "Last N Week(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            measureTypeDisplay: 'Weeks'
                        }
                    },
                    {
                        display: "Last N Month(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            measureTypeDisplay: 'Months'
                        }
                    },
                    {
                        display: "Last N Quarter(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            measureTypeDisplay: 'Quarters'
                        }
                    },
                    {
                        display: "Last N Year(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            measureTypeDisplay: 'Years'
                        }
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                dateOptions = [
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return dateOptions;
        };
        var getNumberOptions = function (type) {
            var numberOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        type: "range"
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        type: "range"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return numberOptions;
        };
        var getOneToManyOptions = function (type) {
            var oneToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                oneToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    }
                ];
            }
            if (type === 'condition') {
                oneToManyOptions = [];
            }
            return oneToManyOptions;
        };
        var getManyToManyOptions = function (type) {
            var manyToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    },
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                manyToManyOptions = [
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            return manyToManyOptions;
        };
        var getManyToOneOptions = function (type) {
            var manyToOneOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToOneOptions = {
                    drillEntity: {},
                    hasEntity: {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    notHasEntity: {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                };
            }
            return manyToOneOptions;
        };
        /* Options info end */
        var linker = function (scope, element, attrs) {
            /*show the user the value without % symbols as these are reserved*/
            scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                if (angular.isDefined(criteriaValue)) {
                    scope.selectedFilterProperty.criteriaValue = $filter('likeFilter')(criteriaValue);
                }
            });
            scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                if (angular.isDefined(selectedFilterProperty)) {
                    $log.debug('watchSelectedFilterProperty');
                    $log.debug(scope.selectedFilterProperty);
                    /*prepopulate if we have a comparison operator and value*/
                    if (selectedFilterProperty === null) {
                        return;
                    }
                    if (angular.isDefined(selectedFilterProperty.ormtype)) {
                        switch (scope.selectedFilterProperty.ormtype) {
                            case "boolean":
                                scope.conditionOptions = getBooleanOptions();
                                break;
                            case "string":
                                scope.conditionOptions = getStringOptions();
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    //scope.selectedFilterProperty.criteriaValue = '';
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                    else {
                                        selectedFilterProperty.showCriteriaValue = true;
                                    }
                                };
                                break;
                            case "timestamp":
                                scope.conditionOptions = getDateOptions();
                                scope.today = function () {
                                    if (angular.isDefined(scope.selectedFilterProperty)) {
                                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                                    }
                                };
                                scope.clear = function () {
                                    scope.selectedFilterProperty.criteriaRangeStart = null;
                                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                                };
                                scope.openCalendarStart = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarStart = true;
                                };
                                scope.openCalendarEnd = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarEnd = true;
                                };
                                scope.formats = [
                                    'dd-MMMM-yyyy',
                                    'yyyy/MM/dd',
                                    'dd.MM.yyyy',
                                    'shortDate'
                                ];
                                scope.format = scope.formats[1];
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    $log.debug('selectedConditionChanged Begin');
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    //check whether condition is checking for null values in date
                                    if (angular.isDefined(selectedCondition.dateInfo)) {
                                        //is condition a calculation
                                        if (selectedCondition.dateInfo.type === 'calculation') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = true;
                                            selectedCondition.disableCriteriaEnd = true;
                                            //if item is a calculation of an N number of measure display the measure and number input
                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                                $log.debug('Not toDate');
                                                selectedCondition.showNumberOf = true;
                                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                                            }
                                            else {
                                                $log.debug('toDate');
                                                var today = Date.parse('today');
                                                var todayEOD = today.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                                //get this Measure to date
                                                switch (selectedCondition.dateInfo.measureType) {
                                                    case 'd':
                                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                                        dateBOD.setHours(0, 0, 0, 0);
                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                                        break;
                                                    case 'w':
                                                        var firstDayOfWeek = Date.today().last().monday();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                                        break;
                                                    case 'm':
                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                                        break;
                                                    case 'q':
                                                        var month = Date.parse('today').toString('MM');
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                                        break;
                                                    case 'y':
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var firstDayOfYear = new Date(year, 0, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                                        break;
                                                }
                                            }
                                        }
                                        if (selectedCondition.dateInfo.type === 'range') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = false;
                                            selectedCondition.showNumberOf = false;
                                        }
                                        if (selectedCondition.dateInfo.type === 'exactDate') {
                                            selectedCondition.showCriteriaEnd = false;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = true;
                                            if (!selectedCondition.dateInfo.measureType) {
                                                selectedCondition.conditionDisplay = '';
                                                selectedCondition.showCriteriaStart = true;
                                                selectedCondition.showNumberOf = false;
                                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                            }
                                            else {
                                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                                selectedCondition.showCriteriaStart = false;
                                                selectedCondition.showNumberOf = true;
                                            }
                                        }
                                    }
                                    else {
                                        selectedCondition.showCriteriaStart = false;
                                        selectedCondition.showCriteriaEnd = false;
                                        selectedCondition.showNumberOf = false;
                                        selectedCondition.conditionDisplay = '';
                                    }
                                    $log.debug('selectedConditionChanged End');
                                    $log.debug('selectedConditionChanged Result');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    if (selectedCondition.dateInfo.type === 'calculation') {
                                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                                        switch (selectedCondition.dateInfo.measureType) {
                                            case 'h':
                                                var today = Date.parse('today');
                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                                break;
                                            case 'd':
                                                var lastFullDay = Date.parse('today').add(-1).days();
                                                lastFullDay.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                                break;
                                            case 'w':
                                                var lastFullWeekEnd = Date.today().last().sunday();
                                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                                break;
                                            case 'm':
                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                                break;
                                            case 'q':
                                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                                break;
                                            case 'y':
                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                                break;
                                        }
                                    }
                                    if (selectedCondition.dateInfo.type === 'exactDate') {
                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                    }
                                    if (selectedCondition.dateInfo.type === 'range') {
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                        }
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {
                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                                        }
                                    }
                                    $log.debug('criteriaRangeChanged');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                break;
                            case "big_decimal":
                            case "integer":
                            case "float":
                                scope.conditionOptions = getNumberOptions();
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                };
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    selectedFilterProperty.showCriteriaValue = true;
                                    //check whether the type is a range
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                                    }
                                    //is null or is not null
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                };
                                break;
                        }
                    }
                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {
                        switch (scope.selectedFilterProperty.fieldtype) {
                            case "many-to-one":
                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);
                                $log.debug('many-to-one');
                                $log.debug(scope.selectedFilterProperty);
                                $log.debug(scope.filterPropertiesList);
                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);
                                    filterPropertiesPromise.then(function (value) {
                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                                    }, function (reason) {
                                    });
                                }
                                break;
                            case "many-to-many":
                            case "one-to-many":
                                scope.manyToManyOptions = getManyToManyOptions();
                                scope.oneToManyOptions = getOneToManyOptions();
                                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);
                                existingCollectionsPromise.then(function (value) {
                                    scope.collectionOptions = value.data;
                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {
                                        for (var i in scope.collectionOptions) {
                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {
                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                                            }
                                        }
                                        for (var i in scope.oneToManyOptions) {
                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {
                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                                            }
                                        }
                                    }
                                });
                                break;
                        }
                    }
                    $log.debug('workflowCondition');
                    $log.debug(scope.workflowCondition);
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.workflowCondition.value)
                                && scope.workflowCondition.value.length) {
                                var dateRangeArray = scope.workflowCondition.value.split("-");
                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));
                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));
                            }
                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {
                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                    $log.debug('templateLoader');
                    $log.debug(selectedFilterProperty);
                    var templateLoader = getTemplate(selectedFilterProperty);
                    var promise = templateLoader.success(function (html) {
                        element.html(html);
                        $compile(element.contents())(scope);
                    });
                }
            });
            scope.selectedCriteriaChanged = function (selectedCriteria) {
                $log.debug(selectedCriteria);
                //update breadcrumbs as array of filterpropertylist keys
                $log.debug(scope.selectedFilterProperty);
                var breadCrumb = {
                    entityAlias: scope.selectedFilterProperty.name,
                    cfc: scope.selectedFilterProperty.cfc,
                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier
                };
                scope.workflowCondition.breadCrumbs.push(breadCrumb);
                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                //update criteria to display the condition of the new critera we have selected
            };
        };
        return {
            restrict: 'A',
            scope: {
                workflowCondition: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&"
            },
            link: linker
        };
    }
    SWConditionCriteria.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWConditionCriteria;
}());
exports.SWConditionCriteria = SWConditionCriteria;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCriteria = /** @class */ (function () {
    function SWCriteria(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                filterItem: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&",
                comparisonType: "=",
                collectionConfig: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteria.html',
            link: function (scope, element, attrs) {
            }
        };
    }
    SWCriteria.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteria(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteria;
}());
exports.SWCriteria = SWCriteria;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaBoolean = /** @class */ (function () {
    function SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaboolean.html',
            link: function (scope, element, attrs) {
                var getBooleanOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var booleanOptions = [];
                    if (type === 'filter') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "=",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "=",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "eq",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "eq",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return booleanOptions;
                };
                scope.conditionOptions = getBooleanOptions(scope.comparisonType);
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaBoolean.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaBoolean;
}());
exports.SWCriteriaBoolean = SWCriteriaBoolean;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaDate = /** @class */ (function () {
    function SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriadate.html',
            link: function (scope, element, attrs) {
                var getDateOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var dateOptions = [];
                    if (type === 'filter') {
                        dateOptions = [
                            {
                                display: "Date",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                }
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Today",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: 0,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Yesterday",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: -1,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Week",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Month",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Quarter",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Year",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Last N Hour(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'h',
                                    measureTypeDisplay: 'Hours'
                                }
                            },
                            {
                                display: "Last N Day(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Last N Week(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    measureTypeDisplay: 'Weeks'
                                }
                            },
                            {
                                display: "Last N Month(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Last N Quarter(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    measureTypeDisplay: 'Quarters'
                                }
                            },
                            {
                                display: "Last N Year(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        dateOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return dateOptions;
                };
                scope.conditionOptions = getDateOptions(scope.comparisonType);
                scope.today = function () {
                    if (angular.isDefined(scope.selectedFilterProperty)) {
                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                    }
                };
                scope.clear = function () {
                    scope.selectedFilterProperty.criteriaRangeStart = null;
                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                };
                scope.openCalendarStart = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarStart = true;
                };
                scope.openCalendarEnd = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarEnd = true;
                };
                scope.formats = [
                    'dd-MMMM-yyyy',
                    'yyyy/MM/dd',
                    'dd.MM.yyyy',
                    'shortDate'
                ];
                scope.format = scope.formats[1];
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    $log.debug('selectedConditionChanged Begin');
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    //check whether condition is checking for null values in date
                    if (angular.isDefined(selectedCondition.dateInfo)) {
                        //is condition a calculation
                        if (selectedCondition.dateInfo.type === 'calculation') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = true;
                            selectedCondition.disableCriteriaEnd = true;
                            //if item is a calculation of an N number of measure display the measure and number input
                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                $log.debug('Not toDate');
                                selectedCondition.showNumberOf = true;
                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                            }
                            else {
                                $log.debug('toDate');
                                var today = Date.parse('today');
                                var todayEOD = today.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                //get this Measure to date
                                switch (selectedCondition.dateInfo.measureType) {
                                    case 'd':
                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                        dateBOD.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                        break;
                                    case 'w':
                                        var firstDayOfWeek = Date.today().last().monday();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                        break;
                                    case 'm':
                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                        break;
                                    case 'q':
                                        var month = Date.parse('today').toString('MM');
                                        var year = Date.parse('today').toString('yyyy');
                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                        break;
                                    case 'y':
                                        var year = Date.parse('today').toString('yyyy');
                                        var firstDayOfYear = new Date(year, 0, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                        break;
                                }
                            }
                        }
                        if (selectedCondition.dateInfo.type === 'range') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = false;
                            selectedCondition.showNumberOf = false;
                        }
                        if (selectedCondition.dateInfo.type === 'exactDate') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = false;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = true;
                            if (!selectedCondition.dateInfo.measureType) {
                                selectedCondition.conditionDisplay = '';
                                selectedCondition.showCriteriaStart = true;
                                selectedCondition.showNumberOf = false;
                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                            }
                            else {
                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                selectedCondition.showCriteriaStart = false;
                                selectedCondition.showNumberOf = true;
                            }
                        }
                    }
                    else {
                        selectedCondition.showCriteriaStart = false;
                        selectedCondition.showCriteriaEnd = false;
                        selectedCondition.showNumberOf = false;
                        selectedCondition.conditionDisplay = '';
                    }
                    $log.debug('selectedConditionChanged End');
                    $log.debug('selectedConditionChanged Result');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedFilterProperty);
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    if (selectedCondition.dateInfo.type === 'calculation') {
                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                        switch (selectedCondition.dateInfo.measureType) {
                            case 'h':
                                var today = Date.parse('today');
                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                break;
                            case 'd':
                                var lastFullDay = Date.parse('today').add(-1).days();
                                lastFullDay.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                break;
                            case 'w':
                                var lastFullWeekEnd = Date.today().last().sunday();
                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                break;
                            case 'm':
                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                break;
                            case 'q':
                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                break;
                            case 'y':
                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                break;
                        }
                    }
                    if (selectedCondition.dateInfo.type === 'exactDate' && angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart.setHours)) {
                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                    }
                    if (selectedCondition.dateInfo.type === 'range') {
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                        }
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                        }
                    }
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                if (angular.isUndefined(scope.filterItem.$$isNew) || scope.filterItem.$$isNew === false) {
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.filterItem.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.filterItem.value)
                                && scope.filterItem.value.length) {
                                var dateRangeArray = scope.filterItem.value.split("-");
                                var rangeStart = new Date(parseInt(dateRangeArray[0])).toUTCString();
                                rangeStart = rangeStart.split(' ').slice(0, 5).join(' ');
                                var rangeEnd = new Date(parseInt(dateRangeArray[1])).toUTCString();
                                rangeEnd = rangeEnd.split(' ').slice(0, 5).join(' ');
                                scope.selectedFilterProperty.criteriaRangeStart = rangeStart;
                                scope.selectedFilterProperty.criteriaRangeEnd = rangeEnd;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                }
                else {
                    scope.selectedFilterProperty.criteriaValue = '';
                    scope.selectedFilterProperty.criteriaRangeStart = '';
                    scope.selectedFilterProperty.criteriaRangeEnd = '';
                }
            }
        };
    }
    SWCriteriaDate.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaDate;
}());
exports.SWCriteriaDate = SWCriteriaDate;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToMany = /** @class */ (function () {
    function SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getManyToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    $log.debug('type', type);
                    var manyToManyOptions = [];
                    if (type == 'filter') {
                        manyToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            },
                            {
                                display: "Empty",
                                comparisonOperator: "is",
                                value: "null"
                            },
                            {
                                display: "Not Empty",
                                comparisonOperator: "is not",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        manyToManyOptions = [];
                    }
                    return manyToManyOptions;
                };
                scope.manyToManyOptions = getManyToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.manyToManyOptions) {
                            if (scope.manyToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaManyToMany.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService',
        ];
        return directive;
    };
    return SWCriteriaManyToMany;
}());
exports.SWCriteriaManyToMany = SWCriteriaManyToMany;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToOne = /** @class */ (function () {
    function SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytoone.html',
            link: function (scope, element, attrs) {
                var getManyToOneOptions = function () {
                    var manyToOneOptions = {
                        drillEntity: {},
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    };
                    return manyToOneOptions;
                };
                scope.manyToOneOptions = getManyToOneOptions();
                scope.conditionOptions = getManyToOneOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria) {
                        $log.debug(selectedCriteria);
                        $log.debug('changed');
                        //update breadcrumbs as array of filterpropertylist keys
                        $log.debug(scope.selectedFilterProperty);
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaManyToOne.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaManyToOne;
}());
exports.SWCriteriaManyToOne = SWCriteriaManyToOne;
// 'use strict';
// angular.module('slatwalladmin')
// .directive('swCriteriaManyToOne', [
// 	'$log',
// 	'$hibachi',
// 	'$filter',
// 	'collectionPartialsPath',
// 	'collectionService',
// 	'metadataService',
// 	function(
// 		$log,
// 		$hibachi,
// 		$filter,
// 		collectionPartialsPath,
// 		collectionService,
// 		metadataService
// 	){
// 		return {
// 			restrict: 'E',
// 			templateUrl:collectionPartialsPath+'criteriamanytoone.html',
// 			link: function(scope, element, attrs){
// 				var getManyToOneOptions = function(){
// 			    	var manyToOneOptions = {
// 			            drillEntity:{},
// 						hasEntity:{
// 							display:"Defined",
// 							comparisonOperator:"is not",
// 							value:"null"
// 						},
// 						notHasEntity:{
// 							display:"Not Defined",
// 							comparisonOperator:"is",
// 							value:"null"
// 						}
// 			    	};
// 			    	return manyToOneOptions;
// 			    };
// 			    scope.manyToOneOptions = getManyToOneOptions();
// 			    scope.conditionOptions = getManyToOneOptions();
// 				$log.debug('many-to-one');
// 				$log.debug(scope.selectedFilterProperty);
// 				$log.debug(scope.filterPropertiesList);
// 				scope.$watch('selectedFilterProperty',function(selectedFilterProperty){
// 					if(angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])){
// 						var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
// 						filterPropertiesPromise.then(function(value){
// 							scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
// 							metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier],scope.selectedFilterProperty.propertyIdentifier);
// 						}, function(reason){
// 						});
// 					}
// 					scope.selectedCriteriaChanged = function(selectedCriteria){
// 						$log.debug(selectedCriteria);
// 						$log.debug('changed');
// 						//update breadcrumbs as array of filterpropertylist keys
// 						$log.debug(scope.selectedFilterProperty);
// 						var breadCrumb = {
// 								entityAlias:scope.selectedFilterProperty.name,
// 								cfc:scope.selectedFilterProperty.cfc,
// 								propertyIdentifier:scope.selectedFilterProperty.propertyIdentifier,
// 								rbKey:rbkeyService.getRBKey('entity.'+scope.selectedFilterProperty.cfc.replace('_',''))
// 						};
// 						$log.debug('breadcrumb');
// 						$log.debug(breadCrumb);
// 						$log.debug(scope.filterItem.breadCrumbs);
// 						scope.filterItem.breadCrumbs.push(breadCrumb);
// 						//populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
// 						scope.selectedFilterPropertyChanged({selectedFilterProperty:scope.selectedFilterProperty.selectedCriteriaType});
// 						//update criteria to display the condition of the new critera we have selected
// 						$log.debug(scope.selectedFilterProperty);
// 					};
// 				});
// 			}
// 		};
// 	}
// ]);


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaNumber = /** @class */ (function () {
    function SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criterianumber.html',
            link: function (scope, element, attrs) {
                var getNumberOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var numberOptions = [];
                    if (type === 'filter') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                type: "range"
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                type: "range"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: ">"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: ">="
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "<"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "<="
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: "gt"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: "gte"
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "lt"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "lte"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return numberOptions;
                };
                scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                    if (angular.isDefined(criteriaValue)) {
                        scope.selectedFilterProperty.criteriaValue = criteriaValue;
                        $log.debug(scope.selectedFilterProperty);
                    }
                });
                scope.conditionOptions = getNumberOptions(scope.comparisonType);
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    selectedFilterProperty.showCriteriaValue = true;
                    //check whether the type is a range
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                        selectedFilterProperty.showCriteriaValue = false;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                    }
                    //is null or is not null
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                };
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    $log.debug('populate');
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        $log.debug(scope.filterItem);
                        if (scope.filterItem.comparisonOperator === 'between' || scope.filterItem.comparisonOperator === 'not between') {
                            var criteriaRangeArray = scope.filterItem.value.split('-');
                            $log.debug(criteriaRangeArray);
                            scope.selectedFilterProperty.criteriaRangeStart = parseInt(criteriaRangeArray[0]);
                            scope.selectedFilterProperty.criteriaRangeEnd = parseInt(criteriaRangeArray[1]);
                        }
                        else {
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        }
                        if (angular.isDefined(scope.filterItem.criteriaNumberOf)) {
                            scope.selectedFilterProperty.criteriaNumberOf = scope.filterItem.criteriaNumberOf;
                        }
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaNumber.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaNumber;
}());
exports.SWCriteriaNumber = SWCriteriaNumber;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaOneToMany = /** @class */ (function () {
    function SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaonetomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getOneToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var oneToManyOptions = [];
                    if (type == 'filter') {
                        oneToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            }
                            /*,
                             {
                             display:"Empty",
                             comparisonOperator:"is",
                             value:"null"
                             },
                             {
                             display:"Not Empty",
                             comparisonOperator:"is not",
                             value:"null"
                             }*/
                        ];
                    }
                    else if (type === 'condition') {
                        oneToManyOptions = [];
                    }
                    return oneToManyOptions;
                };
                $log.debug('onetomany');
                $log.debug(scope.selectedFilterProperty);
                scope.oneToManyOptions = getOneToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.oneToManyOptions) {
                            if (scope.oneToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', '')),
                        filterProperty: scope.selectedFilterProperty
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    $log.debug('criteriaChanged');
                    //$log.debug(selectedFilterPropertyChanged);
                    $log.debug(scope.selectedFilterProperty);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    scope.toggleCollectionOptions();
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaOneToMany.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaOneToMany;
}());
exports.SWCriteriaOneToMany = SWCriteriaOneToMany;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaRelatedObject = /** @class */ (function () {
    function SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriarelatedobject.html',
            link: function (scope, element, attrs) {
                var getRelatedObjectOptions = function () {
                    var relatedObjectOptions = {
                        drillEntity: null,
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        },
                        aggregate: {
                            aggregate: ""
                        }
                    };
                    return relatedObjectOptions;
                };
                scope.aggregate = {};
                scope.aggregate.selectedAggregate = '';
                scope.aggregateOptions = ['Average', 'Count', 'Sum', 'Min', 'Max'];
                scope.selectAggregate = function (aggregate) {
                    scope.selectedFilterProperty.selectedCriteriaType.aggregate = aggregate;
                };
                scope.relatedObjectOptions = getRelatedObjectOptions();
                scope.conditionOptions = getRelatedObjectOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria, selectedAggregate) {
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        if (selectedAggregate) {
                            scope.selectedFilterProperty.selectedCriteriaType.ormtype = 'integer';
                            scope.selectedFilterProperty.selectedCriteriaType.aggregate = selectedAggregate;
                        }
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaRelatedObject.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaRelatedObject;
}());
exports.SWCriteriaRelatedObject = SWCriteriaRelatedObject;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaString = /** @class */ (function () {
    function SWCriteriaString(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriastring.html',
            link: function (scope, element, attrs) {
                var getStringOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var stringOptions = [];
                    if (type === 'filter') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "Contains",
                                comparisonOperator: "like",
                                pattern: "%w%"
                            },
                            {
                                display: "Doesn't Contain",
                                comparisonOperator: "not like",
                                pattern: "%w%"
                            },
                            {
                                display: "Starts With",
                                comparisonOperator: "like",
                                pattern: "w%"
                            },
                            {
                                display: "Doesn't Start With",
                                comparisonOperator: "not like",
                                pattern: "w%"
                            },
                            {
                                display: "Ends With",
                                comparisonOperator: "like",
                                pattern: "%w"
                            },
                            {
                                display: "Doesn't End With",
                                comparisonOperator: "not like",
                                pattern: "%w"
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return stringOptions;
                };
                //initialize values
                scope.conditionOptions = getStringOptions(scope.comparisonType);
                scope.inListArray = [];
                if (angular.isDefined(scope.filterItem.value)) {
                    scope.inListArray = scope.filterItem.value.split(',');
                }
                scope.newListItem = '';
                //declare functions
                scope.addToValueInListFormat = function (inListItem) {
                    // Adds item into array
                    scope.inListArray.push(inListItem);
                    //set value field to the user generated list
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                    scope.newListItem = '';
                };
                scope.removelistItem = function (argListIndex) {
                    scope.inListArray.splice(argListIndex, 1);
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                };
                scope.clearField = function () {
                    scope.newListItem = '';
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    //scope.selectedFilterProperty.criteriaValue = '';
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                    else {
                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'in' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'not in') {
                            selectedFilterProperty.showCriteriaValue = false;
                            scope.comparisonOperatorInAndNotInFlag = true;
                        }
                        else {
                            selectedFilterProperty.showCriteriaValue = true;
                        }
                    }
                };
                scope.$watch('filterItem.value', function (criteriaValue) {
                    //remove percents for like values
                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {
                        scope.filterItem.value = scope.filterItem.value.replace('%', '');
                    }
                });
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isDefined(selectedFilterProperty)) {
                        angular.forEach(scope.conditionOptions, function (conditionOption) {
                            if (conditionOption.display == scope.filterItem.conditionDisplay) {
                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                                if (angular.isDefined(scope.selectedConditionChanged)) {
                                    scope.selectedConditionChanged(scope.selectedFilterProperty);
                                }
                            }
                        });
                    }
                });
            }
        };
    }
    SWCriteriaString.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaString(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaString;
}());
exports.SWCriteriaString = SWCriteriaString;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEditFilterItem = /** @class */ (function () {
    function SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) {
        return {
            require: {
                swFilterGroups: '^swFilterGroups',
                swListingControls: '?^swListingControls'
            },
            restrict: 'E',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                filterPropertiesList: "=",
                saveCollection: "&?",
                removeFilterItem: "&",
                filterItemIndex: "=",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "editfilteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                if (!scope.saveCollection && filterGroupsController.swListingControls) {
                    scope.saveCollection = function () {
                        filterGroupsController.swListingControls.collectionConfig = scope.collectionConfig;
                        filterGroupsController.swListingControls.saveCollection();
                    };
                }
                function daysBetween(first, second) {
                    // Copy date parts of the timestamps, discarding the time parts.
                    var one = new Date(first.getFullYear(), first.getMonth(), first.getDate());
                    var two = new Date(second.getFullYear(), second.getMonth(), second.getDate());
                    // Do the math.
                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
                    var millisBetween = two.getTime() - one.getTime();
                    var days = millisBetween / millisecondsPerDay;
                    // Round down.
                    return Math.floor(days);
                }
                if (angular.isUndefined(scope.filterItem.breadCrumbs)) {
                    scope.filterItem.breadCrumbs = [];
                    if (scope.filterItem.propertyIdentifier === "") {
                        scope.filterItem.breadCrumbs = [
                            {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: scope.collectionConfig.baseEntityAlias,
                                cfc: scope.collectionConfig.baseEntityAlias,
                                propertyIdentifier: scope.collectionConfig.baseEntityAlias
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.filterItem.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.filterItem.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.filterItem.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.filterItem.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                scope.filterGroupItem = filterGroupsController.swFilterGroups.getFilterGroupItem();
                scope.togglePrepareForFilterGroup = function () {
                    scope.filterItem.$$prepareForFilterGroup = !scope.filterItem.$$prepareForFilterGroup;
                };
                //public functions
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    $log.debug('selectBreadCrumb');
                    $log.debug(scope.selectedFilterProperty);
                    //scope.selectedFilterPropertyChanged(scope.filterItem.breadCrumbs[scope.filterItem.breadCrumbs.length -1].filterProperty);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    if (angular.isDefined(scope.selectedFilterProperty) && scope.selectedFilterProperty === null) {
                        scope.selectedFilterProperty = {};
                    }
                    if (angular.isDefined(scope.selectedFilterProperty) && angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType)) {
                        delete scope.selectedFilterProperty.selectedCriteriaType;
                    }
                    if (angular.isDefined(scope.filterItem.value)) {
                        delete scope.filterItem.value;
                    }
                    scope.selectedFilterProperty.showCriteriaValue = false;
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterGroupsController.swFilterGroups.setItemInUse);
                    this.observerService.notify('collectionConfigUpdated', {
                        collectionConfig: collectionService
                    });
                };
                scope.cancelFilterItem = function () {
                    $log.debug('cancelFilterItem');
                    $log.debug(scope.filterItemIndex);
                    //scope.deselectItems(scope.filterGroupItem[filterItemIndex]);
                    scope.filterItem.setItemInUse(false);
                    scope.filterItem.$$isClosed = true;
                    for (var siblingIndex in scope.filterItem.$$siblingItems) {
                        scope.filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                    }
                    if (scope.filterItem.$$isNew === true) {
                        observerService.notify('filterItemAction', { action: 'remove', filterItemIndex: scope.filterItemIndex });
                        scope.removeFilterItem({ filterItemIndex: scope.filterItemIndex });
                    }
                    else {
                        observerService.notify('filterItemAction', { action: 'close', filterItemIndex: scope.filterItemIndex });
                    }
                };
                scope.saveFilter = function (selectedFilterProperty, filterItem, callback) {
                    var _this = this;
                    $log.debug('saveFilter begin');
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType) && angular.equals({}, selectedFilterProperty.selectedCriteriaType)) {
                        return;
                    }
                    if ((selectedFilterProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                        var propertyIdentifierStart = (selectedFilterProperty.propertyIdentifier.charAt(0) == '_') ? 1 : 0;
                        var propertyIdentifierEnd = (selectedFilterProperty.propertyIdentifier.indexOf('.') == -1) ? selectedFilterProperty.propertyIdentifier.length : selectedFilterProperty.propertyIdentifier.indexOf('.');
                        var propertyIdentifierJoins = selectedFilterProperty.propertyIdentifier.substring(propertyIdentifierStart, propertyIdentifierEnd);
                        var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                        var current_collection = $hibachi.getEntityExample(scope.collectionConfig.baseEntityName);
                        var _propertyIdentifier = '';
                        var joins = [];
                        if (angular.isDefined(scope.collectionConfig.joins)) {
                            joins = scope.collectionConfig.joins;
                        }
                        for (var i = 1; i < propertyIdentifierParts.length; i++) {
                            if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                var newJoin = {
                                    associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                    alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                };
                                var joinFound = false;
                                for (var j = 0; j < joins.length; j++) {
                                    if (joins[j].alias === newJoin.alias) {
                                        joinFound = true;
                                        break;
                                    }
                                }
                                if (!joinFound) {
                                    joins.push(newJoin);
                                }
                            }
                        }
                        scope.collectionConfig.joins = joins;
                        if (angular.isDefined(scope.collectionConfig.columns) && (angular.isUndefined(scope.collectionConfig.groupBys) || scope.collectionConfig.groupBys.split(',').length != scope.collectionConfig.columns.length)) {
                            var groupbyArray = angular.isUndefined(scope.collectionConfig.groupBys) ? [] : scope.collectionConfig.groupBys.split(',');
                            for (var column = 0; column < scope.collectionConfig.columns.length; column++) {
                                if (groupbyArray.indexOf(scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
                                    groupbyArray.push(scope.collectionConfig.columns[column].propertyIdentifier);
                                }
                            }
                            scope.collectionConfig.groupBys = groupbyArray.join(',');
                        }
                    }
                    if (angular.isDefined(selectedFilterProperty) && angular.isDefined(selectedFilterProperty.selectedCriteriaType)) {
                        //populate filterItem with selectedFilterProperty values
                        filterItem.$$isNew = false;
                        filterItem.propertyIdentifier = selectedFilterProperty.propertyIdentifier;
                        filterItem.displayPropertyIdentifier = selectedFilterProperty.displayPropertyIdentifier;
                        switch (selectedFilterProperty.ormtype) {
                            case 'boolean':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                filterItem.displayValue = filterItem.value;
                                break;
                            case 'string':
                                if (angular.isDefined(selectedFilterProperty.attributeID)) {
                                    filterItem.attributeID = selectedFilterProperty.attributeID;
                                    filterItem.attributeSetObject = selectedFilterProperty.attributeSetObject;
                                }
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value.toString();
                                    //if has a pattern then we need to evaluate where to add % for like statement
                                }
                                else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.pattern)) {
                                    filterItem.pattern = selectedFilterProperty.selectedCriteriaType.pattern;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //TODO:simplify timestamp and big decimal to leverage reusable function for null, range, and value
                            case 'timestamp':
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is it null or a range
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                    filterItem.displayValue = filterItem.value;
                                }
                                else {
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'calculation') {
                                        var _daysBetween = daysBetween(new Date(selectedFilterProperty.criteriaRangeStart), new Date(selectedFilterProperty.criteriaRangeEnd));
                                        filterItem.value = _daysBetween;
                                        filterItem.displayValue = selectedFilterProperty.selectedCriteriaType.display;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                    else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'exactDate') {
                                        if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.dateInfo.measureType)) {
                                            filterItem.value = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                            filterItem.displayValue = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        }
                                        else {
                                            filterItem.measureType = selectedFilterProperty.selectedCriteriaType.dateInfo.measureType;
                                            filterItem.measureCriteria = selectedFilterProperty.selectedCriteriaType.dateInfo.type;
                                            filterItem.criteriaNumberOf = "0";
                                            if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                                filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                            }
                                            filterItem.value = filterItem.criteriaNumberOf;
                                            filterItem.displayValue = filterItem.criteriaNumberOf;
                                            switch (filterItem.measureType) {
                                                case 'd':
                                                    filterItem.displayValue += ' Day';
                                                    break;
                                                case 'm':
                                                    filterItem.displayValue += ' Month';
                                                    break;
                                                case 'y':
                                                    filterItem.displayValue += ' Year';
                                                    break;
                                            }
                                            filterItem.displayValue += ((filterItem.criteriaNumberOf > 1) ? 's' : '') + ' Ago';
                                        }
                                    }
                                    else {
                                        var dateValueString = utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeStart) + '-' + utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeEnd);
                                        filterItem.value = dateValueString;
                                        var formattedDateValueString = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        filterItem.displayValue = formattedDateValueString;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                }
                                break;
                            case 'big_decimal':
                            case 'integer':
                            case 'float':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                else {
                                    if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        filterItem.value = selectedFilterProperty.criteriaValue;
                                    }
                                    else {
                                        var decimalValueString = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                        filterItem.value = decimalValueString;
                                    }
                                }
                                if (angular.isDefined(selectedFilterProperty.aggregate)) {
                                    filterItem.aggregate = selectedFilterProperty.aggregate;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                        }
                        switch (selectedFilterProperty.fieldtype) {
                            case 'one-to-many':
                            case 'many-to-many':
                            case 'many-to-one':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //case 'one-to-many':
                            //
                            //case 'many-to-many':
                            //    filterItem.collectionID = selectedFilterProperty.selectedCollection.collectionID;
                            //    filterItem.displayValue = selectedFilterProperty.selectedCollection.collectionName;
                            //    filterItem.criteria = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                            //
                            //    break;
                        }
                        if (angular.isUndefined(filterItem.displayValue)) {
                            filterItem.displayValue = filterItem.value;
                        }
                        if (angular.isDefined(selectedFilterProperty.ormtype)) {
                            filterItem.ormtype = selectedFilterProperty.ormtype;
                        }
                        if (angular.isDefined(selectedFilterProperty.fieldtype)) {
                            filterItem.fieldtype = selectedFilterProperty.fieldtype;
                        }
                        for (var siblingIndex in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                        }
                        filterItem.conditionDisplay = selectedFilterProperty.selectedCriteriaType.display;
                        //if the add to New group checkbox has been checked then we need to transplant the filter item into a filter group
                        if (filterItem.$$prepareForFilterGroup === true) {
                            collectionService.transplantFilterItemIntoFilterGroup(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterItem);
                        }
                        //persist Config and
                        scope.saveCollection();
                        $log.debug(selectedFilterProperty);
                        $log.debug(filterItem);
                        var timeoutpromise = $timeout(function () {
                            callback();
                        });
                        timeoutpromise.then(function () {
                            observerService.notify('filterItemAction', { action: 'add', filterItemIndex: scope.filterItemIndex, collectionConfig: _this.collectionConfig });
                        });
                        $log.debug('saveFilter end');
                    }
                };
            }
        };
    }
    SWEditFilterItem.Factory = function () {
        var directive = function ($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) { return new SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService); };
        directive.$inject = [
            '$log',
            '$filter',
            '$timeout',
            '$hibachi',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService',
            'observerService',
            'utilityService'
        ];
        return directive;
    };
    return SWEditFilterItem;
}());
exports.SWEditFilterItem = SWEditFilterItem;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroups = /** @class */ (function () {
    function SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService) {
        return {
            restrict: 'EA',
            scope: {
                collectionConfig: "=?",
                filterGroupItem: "=?",
                filterPropertiesList: "=?",
                saveCollection: "&",
                filterGroup: "=?",
                comparisonType: "=?",
                simple: "=",
                readOnly: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroups.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    //if the filter group comparisontype is not specified, then assume we are doing filters
                    if (!angular.isDefined($scope.comparisonType)) {
                        $scope.comparisonType = 'filter';
                    }
                    $scope.itemInUse = false;
                    $log.debug('collectionConfig');
                    $log.debug($scope.collectionConfig);
                    this.getFilterGroup = function () {
                        return $scope.filterGroup;
                    };
                    this.getFilterGroupItem = function () {
                        return $scope.filterGroupItem;
                    };
                    this.setItemInUse = function (booleanValue) {
                        $scope.itemInUse = booleanValue;
                    };
                    this.getItemInUse = function () {
                        return $scope.itemInUse;
                    };
                    this.saveCollection = function () {
                        $scope.saveCollection();
                    };
                    $scope.deselectItems = function (filterItem) {
                        for (var i in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[i].$$disabled = false;
                        }
                    };
                    this.removeFilterItem = function (filterItemIndex) {
                        if (angular.isDefined(filterItemIndex)) {
                            $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);
                            $scope.filterGroupItem[filterItemIndex].setItemInUse(false);
                            //remove item
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.filterGroupItem.splice(filterItemIndex, 1);
                            //make sure first item has no logical operator if it exists
                            if ($scope.filterGroupItem.length) {
                                delete $scope.filterGroupItem[0].logicalOperator;
                            }
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.saveCollection();
                        }
                    };
                    this.removeFilterGroupItem = function (filterGroupItemIndex) {
                        //remove Item
                        $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);
                        $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);
                        $scope.filterGroupItem.splice(filterGroupItemIndex, 1);
                        //make sure first item has no logical operator if it exists
                        if ($scope.filterGroupItem.length) {
                            delete $scope.filterGroupItem[0].logicalOperator;
                        }
                        $log.debug('removeFilterGroupItem');
                        $log.debug(filterGroupItemIndex);
                        $scope.saveCollection();
                    };
                }]
        };
    }
    SWFilterGroups.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder, observerService) { return new SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder',
            'observerService'
        ];
        return directive;
    };
    return SWFilterGroups;
}());
exports.SWFilterGroups = SWFilterGroups;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterItem = /** @class */ (function () {
    function SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: '^swFilterGroups',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterItemIndex: "=",
                saveCollection: "&",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                scope.baseEntityAlias = scope.collectionConfig.baseEntityAlias;
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                if (angular.isUndefined(scope.filterItem.$$disabled)) {
                    scope.filterItem.$$disabled = false;
                }
                if (angular.isUndefined(scope.filterItem.siblingItems)) {
                    scope.filterItem.$$siblingItems = scope.siblingItems;
                }
                scope.filterItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.selectFilterItem = function (filterItem) {
                    collectionService.selectFilterItem(filterItem);
                };
                scope.removeFilterItem = function () {
                    filterGroupsController.removeFilterItem(scope.filterItemIndex, filterGroupsController.getFilterGroupItem());
                };
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterItem.Factory = function () {
        var directive = function ($log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterItem;
}());
exports.SWFilterItem = SWFilterItem;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroupItem = /** @class */ (function () {
    function SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: "^swFilterGroups",
            scope: {
                collectionConfig: "=",
                filterGroupItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterGroupItemIndex: "=",
                saveCollection: "&",
                comparisonType: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                var Partial = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroupitem.html";
                var templateLoader = $http.get(Partial, { cache: $templateCache });
                var promise = templateLoader.success(function (html) {
                    element.html(html);
                }).then(function (response) {
                    element.replaceWith($compile(element.html())(scope));
                });
                //for(item in filterGroupItem){}
                scope.filterGroupItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.filterGroupItem.$$index = scope.filterGroupItemIndex;
                scope.removeFilterGroupItem = function () {
                    filterGroupsController.removeFilterGroupItem(scope.filterGroupItemIndex);
                };
                scope.filterGroupItem.removeFilterGroupItem = scope.removeFilterGroupItem;
                scope.filterGroupItem.$$disabled = false;
                if (angular.isUndefined(scope.filterGroupItem.$$isClosed)) {
                    scope.filterGroupItem.$$isClosed = true;
                }
                scope.filterGroupItem.$$siblingItems = scope.siblingItems;
                scope.selectFilterGroupItem = function (filterGroupItem) {
                    collectionService.selectFilterGroupItem(filterGroupItem);
                };
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterGroupItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterGroupItem.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterGroupItem;
}());
exports.SWFilterGroupItem = SWFilterGroupItem;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWRestrictionConfigController = /** @class */ (function () {
    //@ngInject
    function SWRestrictionConfigController($timeout, collectionConfigService, $hibachi, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.$onDestroy = function () {
            _this.observerService.detachByEvent('saveCollection');
        };
        this.setCollectionConfig = function (payload) {
            _this.permissionRecordRestriction.data.collectionConfig = angular.toJson(payload.collectionConfig.getCollectionConfig());
            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].collectionConfig.$setViewValue(payload.collectionConfig.getCollectionConfig());
            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].$setDirty(true);
            _this.permissionRecordRestriction.$$save();
        };
        var permissionRecordRestrictionRequest = this.$hibachi.getPermissionRecordRestriction(this.permissionRecordRestrictionId);
        permissionRecordRestrictionRequest.promise.then(function () {
            var collectionConfig = _this.collectionConfigService.newCollectionConfig();
            _this.permissionRecordRestriction = permissionRecordRestrictionRequest.value;
            collectionConfig.loadJson(_this.permissionRecordRestriction.collectionConfig);
            _this.collectionConfig = collectionConfig;
        });
        observerService.attach(this.setCollectionConfig, 'saveCollection');
    }
    return SWRestrictionConfigController;
}());
var SWRestrictionConfig = /** @class */ (function () {
    //@ngInject
    function SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath) {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            permissionRecordRestrictionId: "@?"
        };
        this.controller = SWRestrictionConfigController;
        this.controllerAs = "swRestrictionConfig";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'restrictionconfig.html';
    }
    SWRestrictionConfig.Factory = function () {
        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath); };
        directive.$inject = ['hibachiPathBuilder', 'collectionPartialsPath'];
        return directive;
    };
    return SWRestrictionConfig;
}());
exports.SWRestrictionConfig = SWRestrictionConfig;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AggregateFilter = /** @class */ (function () {
    function AggregateFilter() {
    }
    //@ngInject
    AggregateFilter.Factory = function ($filter) {
        return function (property) {
            return property.filter(function (item) {
                if (item.fieldtype && item.fieldtype !== 'id') {
                    return false;
                }
                if (item.ormtype && ['big_decimal', 'double', 'float', 'integer'].indexOf(item.ormtype) < 0) {
                    return false;
                }
                return true;
            });
        };
    };
    return AggregateFilter;
}());
exports.AggregateFilter = AggregateFilter;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Store = __webpack_require__(45);
var ListingService = /** @class */ (function () {
    //@ngInject
    function ListingService($timeout, $q, collectionConfigService, filterService, historyService, observerService, rbkeyService, selectionService, utilityService, $hibachi) {
        var _this = this;
        this.$timeout = $timeout;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filterService = filterService;
        this.historyService = historyService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.selectionService = selectionService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.listingDisplays = {};
        this.state = {};
        /**
         * The reducer is responsible for modifying the state of the state object into a new state for listeners.
         */
        this.listingDisplayStateReducer = function (state, action) {
            switch (action.type) {
                case 'LISTING_PAGE_RECORDS_UPDATE':
                    return __assign({}, state, { action: action });
                case 'CURRENT_PAGE_RECORDS_SELECTED':
                    return __assign({}, state, { action: action });
                case 'ADD_SELECTION':
                    return __assign({}, state, { action: action });
                default:
                    return state;
            }
        };
        //Event Functions
        this.getListingPageRecordsUpdateEventString = function (listingID) {
            return listingID + "pageRecordsUpdated";
        };
        this.getListingOrderByChangedEventString = function (listingID) {
            return listingID + "orderByChanged";
        };
        this.getListingInitiatedEventString = function (listingID) {
            return listingID + "initiated";
        };
        this.notifyListingPageRecordsUpdate = function (listingID) {
            //This is how we would dispatch so that controllers can get the updated state.
            _this.listingDisplayStore.dispatch({
                type: "LISTING_PAGE_RECORDS_UPDATE",
                payload: { listingID: listingID, listingPageRecordsUpdateEventString: _this.getListingPageRecordsUpdateEventString(listingID) }
            });
            _this.observerService.notify(_this.getListingPageRecordsUpdateEventString(listingID), listingID);
        };
        this.attachToListingPageRecordsUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingPageRecordsUpdateEventString(listingID), id);
        };
        this.attachToOrderByChangedUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingOrderByChangedEventString(listingID), id);
        };
        this.attachToListingInitiated = function (listingID, callback) {
            _this.observerService.attach(callback, _this.getListingInitiatedEventString(listingID));
            if (_this.historyService.hasHistory(_this.getListingInitiatedEventString(listingID))) {
                callback();
            }
        };
        //End Event Functions
        //core getters and setters
        this.setListingState = function (listingID, state) {
            _this.listingDisplays[listingID] = state;
            _this.observerService.notifyAndRecord(_this.getListingInitiatedEventString(listingID));
        };
        this.getListing = function (listingID) {
            return _this.listingDisplays[listingID];
        };
        this.getListingColumns = function (listingID) {
            return _this.getListing(listingID).columns || _this.getListingCollectionConfigColumns(listingID);
        };
        this.getListingCollectionConfigColumns = function (listingID) {
            if (_this.getListing(listingID).collectionConfig != null) {
                return _this.getListing(listingID).collectionConfig.columns;
            }
        };
        this.getListingExampleEntity = function (listingID) {
            if (_this.getListing(listingID).exampleEntity != null) {
                return _this.getListing(listingID).exampleEntity;
            }
            else {
                _this.setupExampleEntity(listingID);
            }
        };
        this.getListingCollectionConfigColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingCollectionConfigColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingBaseEntityName = function (listingID) {
            var baseEntityName = _this.getListing(listingID).baseEntityName || _this.getListing(listingID).collectionObject;
            if (baseEntityName == null && _this.getListing(listingID).collectionConfig != null) {
                baseEntityName = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            if (baseEntityName == null && _this.getListing(listingID).collectionData != null) {
                baseEntityName = _this.getListing(listingID).collectionData.collectionObject;
            }
            return baseEntityName;
        };
        this.getListingBaseEntityPrimaryIDPropertyName = function (listingID) {
            if (_this.getListingExampleEntity(listingID) != null) {
                return _this.getListingExampleEntity(listingID).$$getIDName();
            }
        };
        this.getListingPrimaryEntityName = function (listingID) {
            return _this.getListing(listingID).baseEntityName ||
                _this.getListing(listingID).collectionObject ||
                _this.getListing(listingID).collectionConfig.baseEntityName;
        };
        this.getListingEntityPrimaryIDPropertyName = function (listingID) {
            return _this.$hibachi.getPrimaryIDPropertyNameByEntityName(_this.getListingPrimaryEntityName(listingID));
        };
        this.getListingPageRecords = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).collectionData) &&
                angular.isDefined(_this.getListing(listingID).collectionData.pageRecords)) {
                return _this.getListing(listingID).collectionData.pageRecords;
            }
        };
        this.getCollection = function (listingID) {
            return _this.getListing(listingID).getCollection();
        };
        this.getPageRecordsWithManualSortOrder = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) && _this.getListingPageRecords(listingID) != null) {
                var pageRecords = _this.getListingPageRecords(listingID);
                var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
                var primaryIDWithBaseAlias = _this.getListing(listingID).collectionConfig.baseEntityAlias + '.' + primaryIDPropertyName;
                var pageRecordsWithManualSortOrder = {};
                _this.$timeout(function () {
                    for (var j = 0; j < pageRecords.length; j++) {
                        var pageRecord = pageRecords[j];
                        var primaryID = pageRecords[j][primaryIDPropertyName];
                        var sortOrder = j + 1;
                        var primaryIDColumnIndex = _this.getListingCollectionConfigColumnIndexByPropertyIdentifier(listingID, primaryIDWithBaseAlias);
                        if (angular.isDefined(primaryID)) {
                            pageRecordsWithManualSortOrder[primaryID] = sortOrder;
                        }
                        else if (primaryIDColumnIndex !== -1) {
                            var column = _this.getListingCollectionConfigColumns(listingID)[primaryIDColumnIndex];
                            if (angular.isDefined(column.fallbackPropertyIdentifiers)) {
                                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.split(",");
                                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                                    if (angular.isDefined(pageRecord[fallbackPropertyArray[i]])) {
                                        pageRecordsWithManualSortOrder[pageRecord[fallbackPropertyArray[i]]] = sortOrder;
                                    }
                                }
                            }
                        }
                    }
                    _this.getListing(listingID).pageRecordsWithManualSortOrder = angular.toJson(pageRecordsWithManualSortOrder);
                    return _this.getListing(listingID).pageRecordsWithManualSortOrders;
                }, 0);
            }
            else {
                return angular.toJson({});
            }
        };
        //Begin Listing Page Record Functions
        this.getListingPageRecordIndexByPageRecord = function (listingID, pageRecordToCompare) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
            for (var j = 0; j < pageRecords.length; j++) {
                var pageRecord = pageRecords[j];
                if (pageRecord[primaryIDPropertyName] == pageRecordToCompare[primaryIDPropertyName]) {
                    return j;
                }
            }
            return -1;
        };
        this.insertListingPageRecord = function (listingID, pageRecord) {
            pageRecord.newFlag = true;
            if (angular.isDefined(_this.getListingPageRecords(listingID))) {
                _this.notifyListingPageRecordsUpdate(listingID);
                _this.getListingPageRecords(listingID).unshift(pageRecord); //insert at beginning be default
            }
        };
        this.removeListingPageRecord = function (listingID, pageRecord) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord) != -1) {
                _this.notifyListingPageRecordsUpdate(listingID);
                return pageRecords.splice(_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord), 1)[0]; //this will always be an array of one element
            }
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            if (propertyIdentifier) {
                var propertyIdentifierWithoutAlias = '';
                if (propertyIdentifier.indexOf('_') === 0) {
                    var underscoreCount = (propertyIdentifier.match(new RegExp("_", "g") || [])).length;
                    if (underscoreCount > 1) {
                        var properSubStr = propertyIdentifier.substring(1);
                        propertyIdentifierWithoutAlias = properSubStr.substring(properSubStr.indexOf('_') + 1, properSubStr.length);
                    }
                    else {
                        propertyIdentifierWithoutAlias = propertyIdentifier.substring(propertyIdentifier.indexOf('.') + 1);
                    }
                }
                else {
                    propertyIdentifierWithoutAlias = propertyIdentifier;
                }
                return _this.utilityService.replaceAll(propertyIdentifierWithoutAlias, '.', '_');
            }
            return '';
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            var pageRecordValue = pageRecord[_this.getPageRecordKey(column.propertyIdentifier)] || "";
            //try to find the property again if we need to...
            if (pageRecordValue == "") {
                for (var property in pageRecord) {
                    if (property.indexOf(_this.getPageRecordKey(column.propertyIdentifier).trim()) != -1) {
                        //use this record
                        pageRecordValue = pageRecord[property];
                    }
                }
            }
            //last change to find the value
            if ((angular.isUndefined(pageRecordValue) ||
                (angular.isString(pageRecordValue) && pageRecordValue.trim().length == 0)) &&
                angular.isDefined(column.fallbackPropertyIdentifiers)) {
                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.replace('.', '_').split(",");
                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                    if (angular.isDefined(pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])])) {
                        pageRecordValue = pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])];
                        break;
                    }
                }
            }
            return pageRecordValue;
        };
        this.selectCurrentPageRecords = function (listingID) {
            if (!_this.getListing(listingID).collectionData.pageRecords)
                return;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                if (_this.getListing(listingID).isCurrentPageRecordsSelected == true) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
                else {
                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
            }
        };
        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */
        this.getSelectedBy = function (listingID, propertyName, value) {
            if (!listingID || !propertyName || !value) {
                return -1;
            }
            ;
            return _this.getListing(listingID).collectionData.pageRecords.findIndex(function (record) { return record[propertyName] == value; });
        };
        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */
        this.getAllSelected = function (listingID) {
            if (!listingID)
                return -1;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                _this.selectionService.getSelections(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
            }
        };
        this.clearAllSelections = function (listingID) {
            if (!listingID)
                return -1;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
            }
        };
        this.getNGClassObjectForPageRecordRow = function (listingID, pageRecord) {
            var classObjectString = "{";
            angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter, index) {
                classObjectString = classObjectString.concat("'" + colorFilter.colorClass + "':" + _this.getColorFilterConditionString(colorFilter, pageRecord));
                classObjectString = classObjectString.concat(",");
            });
            classObjectString = classObjectString.concat(" 's-child':" + _this.getPageRecordIsChild(listingID, pageRecord));
            var newFlag = false;
            if (pageRecord && pageRecord.newFlag != null && typeof pageRecord.newFlag === 'string' && pageRecord.newFlag.trim() !== '') {
                newFlag = pageRecord.newFlag;
            }
            classObjectString = classObjectString.concat(",'s-selected-row':" + newFlag);
            classObjectString = classObjectString.concat(",'s-disabled':" + _this.getPageRecordMatchesDisableRule(listingID, pageRecord));
            classObjectString = classObjectString.concat(",'s-edited':pageRecord.edited");
            return classObjectString + "}";
        };
        this.getPageRecordIsChild = function (listingID, pageRecord) {
            var isChild = false;
            //todo implement
            return isChild;
        };
        //End Listing Page Record Functions
        //Row Save Functionality
        this.determineRowEdited = function (pageRecords, pageRecordIndex) {
            var fieldCount = 0;
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                fieldCount++;
                if (fieldCount > 1) {
                    pageRecords[pageRecordIndex].edited = true;
                    return true;
                }
            }
            pageRecords[pageRecordIndex].edited = false;
            return false;
        };
        this.markUnedited = function (listingID, pageRecordIndex, propertyDisplayID) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isDefined(pageRecords[pageRecordIndex].editedFields[propertyDisplayID])) {
                delete pageRecords[pageRecordIndex].editedFields[propertyDisplayID];
            }
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markEdited = function (listingID, pageRecordIndex, propertyDisplayID, saveCallback) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isUndefined(pageRecords[pageRecordIndex].editedFields) && !angular.isObject(pageRecords[pageRecordIndex].editedFields)) {
                pageRecords[pageRecordIndex].editedFields = {};
            }
            pageRecords[pageRecordIndex].editedFields[propertyDisplayID] = saveCallback;
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markSaved = function (listingID, pageRecordIndex) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var savePromises = [];
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                if (angular.isFunction(pageRecords[pageRecordIndex].editedFields[key])) {
                    savePromises.push(pageRecords[pageRecordIndex].editedFields[key]());
                }
            }
            _this.$q.all(savePromises).then(function () {
                delete pageRecords[pageRecordIndex].editedFields;
                pageRecords[pageRecordIndex].edited = false;
            });
        };
        //End Row Save Functionality
        //Setup Functions
        this.setupInSingleCollectionConfigMode = function (listingID, listingDisplayScope) {
            if (_this.getListing(listingID).collectionObject != null &&
                _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            _this.initCollectionConfigData(listingID, _this.getListing(listingID).collectionConfig);
            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
            listingDisplayScope.$watch('swListingDisplay.collectionPromise', function (newValue, oldValue) {
                if (newValue) {
                    _this.$q.when(_this.getListing(listingID).collectionPromise).then(function (data) {
                        _this.getListing(listingID).collectionData = data;
                        _this.setupDefaultCollectionInfo(listingID);
                        if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
                        }
                        else {
                            _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);
                        }
                        _this.notifyListingPageRecordsUpdate(listingID);
                        _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||
                            _this.getListing(listingID).collectionData.records;
                        _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        _this.getListing(listingID).searching = false;
                        _this.getListing(listingID).columnCount = _this.getListing(listingID).columns.length + 1;
                        if (_this.getListing(listingID).selectable || _this.getListing(listingID).multiselectable || _this.getListing(listingID).sortable) {
                            _this.getListing(listingID).columnCount++;
                        }
                    });
                }
            });
        };
        this.setupInMultiCollectionConfigMode = function (listingID) {
            angular.forEach(_this.getListing(listingID).collectionConfigs, function (value, key) {
                _this.getListing(listingID).collectionObjects[key] = value.baseEntityName;
            });
        };
        this.setupDefaultCollectionInfo = function (listingID) {
            if (_this.getListing(listingID).hasCollectionPromise
                && angular.isDefined(_this.getListing(listingID).collection)
                && _this.getListing(listingID).collectionConfig == null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collection.collectionObject;
                _this.getListing(listingID).collectionConfig = _this.collectionConfigService.newCollectionConfig(_this.getListing(listingID).collectionObject);
                _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collection.collectionConfig);
            }
            if (_this.getListing(listingID).multiSlot == false) {
                _this.$timeout(function () {
                    _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collectionData.collectionConfig);
                    _this.getListing(listingID).columns = _this.getListing(listingID).collectionConfig.columns;
                });
            }
            if (_this.getListing(listingID).paginator != null
                && _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
            }
        };
        this.addColumn = function (listingID, column) {
            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.baseEntityAlias != null) {
                column.propertyIdentifier = _this.getListing(listingID).collectionConfig.baseEntityAlias + "." + column.propertyIdentifier;
            }
            else if (_this.getListingBaseEntityName(listingID) != null) {
                column.propertyIdentifier = '_' + _this.getListingBaseEntityName(listingID).toLowerCase() + '.' + column.propertyIdentifier;
            }
            if (_this.getListingColumnIndexByPropertyIdentifier(listingID, column.propertyIdentifier) === -1) {
                if (column.aggregate) {
                    _this.getListing(listingID).aggregates.push(column.aggregate);
                }
                else {
                    _this.getListing(listingID).columns.push(column);
                }
            }
        };
        this.setupColumns = function (listingID, collectionConfig, collectionObject) {
            //assumes no alias formatting
            if (_this.getListing(listingID).columns.length == 0 &&
                collectionConfig != null) {
                if (collectionConfig.columns == null) {
                    collectionConfig.getEntity().then(function () {
                        for (var j = 0; j < collectionConfig.columns.length; j++) {
                            var column = collectionConfig.columns[j];
                            if (column.isVisible) {
                                _this.getListing(listingID).columns.push(column);
                            }
                        }
                    }, function () {
                        throw ("listing display couldn't initiate no columns");
                    });
                }
                else {
                    for (var j = 0; j < collectionConfig.columns.length; j++) {
                        var column = collectionConfig.columns[j];
                        if (column.isVisible) {
                            _this.getListing(listingID).columns.push(column);
                        }
                    }
                }
            }
            for (var i = 0; i < _this.getListing(listingID).columns.length; i++) {
                var column = _this.getListing(listingID).columns[i];
                _this.setupColumn(listingID, column, collectionConfig, collectionObject);
            }
        };
        this.setupColumn = function (listingID, column, collectionConfig, collectionObject) {
            if (_this.getListing(listingID).collectionConfig != null && !column.hasCellView) {
                _this.getListing(listingID).collectionConfig.addColumn(column.propertyIdentifier, undefined, column);
            }
            if (!collectionConfig && _this.getListing(listingID).collectionConfig != null) {
                collectionConfig = _this.getListing(listingID).collectionConfig != null;
            }
            var baseEntityName = _this.getListingBaseEntityName(listingID);
            if (!collectionObject) {
                collectionObject = baseEntityName;
            }
            //if we have entity information we can make some inferences about the column
            if (baseEntityName != null) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(baseEntityName, column.propertyIdentifier);
                if (angular.isUndefined(column.title)) {
                    column.title = _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                }
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
                var metadata = _this.$hibachi.getPropertyByEntityNameAndPropertyName(lastEntity, _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (metadata && angular.isDefined(metadata.persistent)) {
                    column.persistent = metadata.persistent;
                }
                if (metadata && angular.isDefined(metadata.ormtype)) {
                    column.ormtype = metadata.ormtype;
                }
                if (angular.isUndefined(column.type) || column.type == 'none') {
                    if (angular.isDefined(metadata) && angular.isDefined(metadata.hb_formattype)) {
                        column.type = metadata.hb_formattype;
                    }
                    else {
                        column.type = "none";
                    }
                }
                if (column.propertyIdentifier) {
                    _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, column.propertyIdentifier);
                }
                else if (column.processObjectProperty) {
                    column.searchable = false;
                    column.sort = false;
                    _this.getListing(listingID).allprocessobjectproperties = _this.utilityService.listAppend(_this.getListing(listingID).allprocessobjectproperties, column.processObjectProperty);
                }
                if (column.tdclass) {
                    var tdclassArray = column.tdclass.split(' ');
                    if (tdclassArray.indexOf("primary") >= 0 && _this.getListing(listingID).expandable) {
                        _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-expandsortproperty=' + column.propertyIdentifier, " ");
                        column.sort = false;
                    }
                }
            }
            if (angular.isDefined(column.tooltip)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.tooltip);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            else {
                column.tooltip = '';
            }
            if (angular.isDefined(column.queryString)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.queryString);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            //if the passed in collection has columns perform some formatting
            if (_this.getListing(listingID).hasCollectionPromise) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(collectionObject, _this.utilityService.listRest(column.propertyIdentifier, '.'));
                column.title = column.title || _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
            }
            _this.columnOrderBy(listingID, column);
        };
        this.initCollectionConfigData = function (listingID, collectionConfig) {
            //kick off other essential setup
            _this.setupSelect(listingID);
            _this.setupMultiselect(listingID);
            _this.setupExampleEntity(listingID);
            if (collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).filterGroups, function (filterGroup) {
                    collectionConfig.addFilterGroup(filterGroup);
                });
                angular.forEach(_this.getListing(listingID).filters, function (filter) {
                    collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
                angular.forEach(_this.getListing(listingID).orderBys, function (orderBy) {
                    collectionConfig.addOrderBy(orderBy.orderBy);
                });
                angular.forEach(_this.getListing(listingID).aggregates, function (aggregate) {
                    collectionConfig.addDisplayAggregate(aggregate.propertyIdentifier, aggregate.aggregateFunction, aggregate.aggregateAlias);
                });
                //make sure we have necessary properties to make the actions
                angular.forEach(_this.getListing(listingID).actions, function (action) {
                    if (angular.isDefined(action.queryString)) {
                        var parsedProperties = _this.utilityService.getPropertiesFromString(action.queryString);
                        if (parsedProperties && parsedProperties.length) {
                            collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                        }
                    }
                });
                //also make sure we have necessary color filter properties
                angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter) {
                    if (angular.isDefined(colorFilter.propertyToCompare)) {
                        collectionConfig.addDisplayProperty(colorFilter.propertyToCompare, "", { isVisible: false });
                    }
                });
                if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                    collectionConfig.addDisplayProperty(_this.getListingExampleEntity(listingID).$$getIDName(), undefined, { isVisible: false });
                }
                collectionConfig.setPageShow(_this.getListing(listingID).paginator.pageShow);
                collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.currentPage);
                if (_this.getListing(listingID).multiselectable && (!_this.getListing(listingID).columns || !_this.getListing(listingID).columns.length)) {
                    //check if it has an active flag and if so then add the active flag
                    if (_this.getListing(listingID).exampleEntity.metaData.activeProperty && !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addFilter('activeFlag', 1, '=', undefined, true);
                    }
                }
                _this.setupHierarchicalExpandable(listingID, collectionConfig);
            }
            _this.setupSortable(listingID);
            _this.updateColumnAndAdministrativeCount(listingID);
        };
        this.setupSortable = function (listingID) {
            _this.attachToListingPageRecordsUpdate(listingID, _this.getPageRecordsWithManualSortOrder, _this.utilityService.createID(32));
        };
        this.setupSelect = function (listingID) {
            if (_this.getListing(listingID).selectFieldName && _this.getListing(listingID).selectFieldName.length) {
                _this.getListing(listingID).selectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-select', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-selectfield="' + _this.getListing(listingID).selectFieldName + '"', ' ');
            }
        };
        this.setupMultiselect = function (listingID) {
            if (_this.getListing(listingID).multiselectFieldName && _this.getListing(listingID).multiselectFieldName.length) {
                _this.getListing(listingID).multiselectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-multiselect', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-multiselectpropertyidentifier="' + _this.getListing(listingID).multiselectPropertyIdentifier + '"', ' ');
                //attach observer so we know when a selection occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).updateMultiselectValues, _this.getListing(listingID).defaultSelectEvent, _this.getListing(listingID).collectionObject);
                //attach observer so we know when a pagination change occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).paginationPageChange, 'swPaginationAction');
            }
            if (_this.getListing(listingID).multiselectValues && _this.getListing(listingID).multiselectValues.length) {
                //select all owned ids
                var multiSelectValuesArray = _this.getListing(listingID).multiselectValues.split(',');
                angular.forEach(multiSelectValuesArray, function (value) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, value);
                });
            }
            if (_this.getListing(listingID).multiselectIdPaths && _this.getListing(listingID).multiselectIdPaths.length) {
                angular.forEach(_this.getListing(listingID).multiselectIdPaths.split(','), function (value) {
                    var id = _this.getListing(listingID).utilityService.listLast(value, '/');
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, id);
                });
            }
        };
        this.setupExampleEntity = function (listingID) {
            _this.getListing(listingID).exampleEntity = _this.$hibachi.getEntityExample(_this.getListingBaseEntityName(listingID));
            if (_this.getListing(listingID).exampleEntity != null) {
                //Look for Hierarchy in example entity
                if (!_this.getListing(listingID).parentPropertyName || (_this.getListing(listingID).parentPropertyName && !_this.getListing(listingID).parentPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName) {
                        _this.getListing(listingID).parentPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName;
                    }
                }
                if (!_this.getListing(listingID).childPropertyName || (_this.getListing(listingID).childPropertyName && !_this.getListing(listingID).childPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName) {
                        _this.getListing(listingID).childPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName;
                    }
                }
            }
        };
        this.setupHierarchicalExpandable = function (listingID, collectionConfig) {
            //Setup Hierachy Expandable
            if (_this.getListing(listingID).parentPropertyName && _this.getListing(listingID).parentPropertyName.length && _this.getListing(listingID).expandable != false) {
                if (angular.isUndefined(_this.getListing(listingID).expandable)) {
                    _this.getListing(listingID).expandable = true;
                }
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-expandable', ' ');
                //add parent property root filter
                if (!_this.getListing(listingID).hasCollectionPromise) {
                    collectionConfig.addFilter(_this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), 'NULL', 'IS', undefined, true, false, false);
                }
                //this.collectionConfig.addDisplayProperty(this.exampleEntity.$$getIDName()+'Path',undefined,{isVisible:false});
                //add children column
                if (_this.getListing(listingID).childPropertyName && _this.getListing(listingID).childPropertyName.length) {
                    if (_this.getListing(listingID).getChildCount || !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addDisplayAggregate(_this.getListing(listingID).childPropertyName, 'COUNT', _this.getListing(listingID).childPropertyName + 'Count', { isVisible: false, isSearchable: false });
                    }
                }
                _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, _this.getListing(listingID).exampleEntity.$$getIDName() + 'Path');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-parentidproperty=' + _this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), ' ');
            }
        };
        this.updateColumnAndAdministrativeCount = function (listingID) {
            //Setup a variable for the number of columns so that the none can have a proper colspan
            _this.getListing(listingID).columnCount = (_this.getListing(listingID).columns) ? _this.getListing(listingID).columns.length : 0;
            if (_this.getListing(listingID).selectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).multiselectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).sortable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).administrativeCount) {
                _this.getListing(listingID).administrativeCount++;
            }
        };
        this.setupDefaultGetCollection = function (listingID) {
            if (_this.getListing(listingID).collectionConfigs.length == 0) {
                _this.getListing(listingID).collectionPromise = _this.getListing(listingID).collectionConfig.getEntity();
                return function () {
                    _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
                    _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                    if (_this.getListing(listingID).multiSlot) {
                        _this.getListing(listingID).collectionConfig.getEntity().then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                    else {
                        _this.getListing(listingID).collectionPromise.then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                };
            }
            else {
                return function () {
                    _this.getListing(listingID).collectionData = {};
                    _this.getListing(listingID).collectionData.pageRecords = [];
                    var allGetEntityPromises = [];
                    angular.forEach(_this.getListing(listingID).collectionConfigs, function (collectionConfig, key) {
                        allGetEntityPromises.push(collectionConfig.getEntity());
                    });
                    if (allGetEntityPromises.length) {
                        _this.$q.all(allGetEntityPromises).then(function (results) {
                            angular.forEach(results, function (result, key) {
                                _this.getListing(listingID).listingService.setupColumns(listingID, _this.getListing(listingID).collectionConfigs[key], _this.getListing(listingID).collectionObjects[key]);
                                _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords.concat(result.records);
                            });
                        }, function (reason) {
                            throw ("listing service had trouble getting collection data because: " + reason);
                        });
                    }
                };
            }
        };
        //End Setup Functions
        //Order By Functions
        //for multi order by
        this.columnOrderBy = function (listingID, column) {
            var isfound = false;
            if (_this.getListing(listingID).collectionConfigs != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByStates[column.propertyIdentifier] = orderBy.direction;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByStates[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByStates[column.propertyIdentifier];
        };
        //for multi order by
        this.columnOrderByIndex = function (listingID, column) {
            var isfound = false;
            if (column.sorting && column.sorting.active && column.sorting.sortOrder) {
                return column.sorting.sortOrder.toUpperCase();
            }
            if (_this.getListing(listingID).collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = index + 1;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByIndices[column.propertyIdentifier];
        };
        //for single column order by
        this.setSingleColumnOrderBy = function (listingID, propertyIdentifier, direction, notify) {
            if (notify === void 0) { notify = true; }
            if (direction.toUpperCase() === "ASC") {
                var oppositeDirection = "DESC";
            }
            else {
                var oppositeDirection = "ASC";
            }
            if (_this.getListing(listingID).collectionConfig != null) {
                var found = false;
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (propertyIdentifier == orderBy.propertyIdentifier) {
                        orderBy.direction = direction;
                        found = true;
                    }
                    else {
                        orderBy.direction = oppositeDirection;
                    }
                });
                if (!found) {
                    _this.getListing(listingID).collectionConfig.addOrderBy(propertyIdentifier + "|" + direction);
                }
                if (notify) {
                    _this.observerService.notify(_this.getListingOrderByChangedEventString(listingID));
                }
                _this.getCollection(listingID);
            }
        };
        //for manual sort
        this.setManualSort = function (listingID, toggle) {
            _this.getListing(listingID).sortable = toggle;
            if (toggle) {
                _this.setSingleColumnOrderBy(listingID, "sortOrder", "ASC");
            }
        };
        //for single column order by
        this.toggleOrderBy = function (listingID, column) {
            if (_this.getListing(listingID).hasSingleCollectionConfig()) {
                _this.getListing(listingID).collectionConfig.toggleOrderBy(column.propertyIdentifier, true);
            }
        };
        //End Order By Functions
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            if (angular.isDefined(colorFilter.comparisonProperty)) {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + pageRecord[colorFilter.comparisonProperty.replace('.', '_')];
            }
            else {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + colorFilter.comparisonValue;
            }
        };
        //Disable Row Functions
        this.getKeyOfMatchedDisableRule = function (listingID, pageRecord) {
            var disableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID).disableRules)) {
                angular.forEach(_this.getListing(listingID).disableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (rule.filterComparisonValue == "null") {
                            rule.filterComparisonValue = "";
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            disableRuleMatchedKey = key;
                        }
                        if (disableRuleMatchedKey != -1) {
                            return disableRuleMatchedKey;
                        }
                    }
                });
            }
            return disableRuleMatchedKey;
        };
        this.getPageRecordMatchesDisableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedDisableRule(listingID, pageRecord) != -1;
        };
        //End disable rule functions
        //Expandable Functions
        this.setExpandable = function (listingID, value) {
            if (angular.isDefined(_this.getListing(listingID))) {
                _this.getListing(listingID).expandable = value;
            }
        };
        this.getKeyOfMatchedExpandableRule = function (listingID, pageRecord) {
            var expandableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).expandableRules)) {
                angular.forEach(_this.getListing(listingID).expandableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            expandableRuleMatchedKey = key;
                        }
                        if (expandableRuleMatchedKey != -1) {
                            return expandableRuleMatchedKey;
                        }
                    }
                });
            }
            return expandableRuleMatchedKey;
        };
        this.getExampleEntityForExpandableRecord = function (listingID, pageRecord) {
            var childCollectionConfig = _this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord);
            if (angular.isDefined(childCollectionConfig)) {
                return _this.$hibachi.getEntityExample(_this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord).baseEntityName);
            }
            return _this.getListing(listingID).exampleEntity;
        };
        this.getPageRecordMatchesExpandableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedExpandableRule(listingID, pageRecord) != -1;
        };
        this.hasPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            return _this.getPageRecordRefreshChildrenEvent(listingID, pageRecord) != null;
        };
        this.getPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (keyOfExpandableRuleMet != -1) {
                return _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].refreshChildrenEvent;
            }
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (_this.getListing(listingID) != null &&
                angular.isFunction(_this.getListing(listingID).exampleEntity.$$getIDName) &&
                angular.isDefined(pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]) &&
                angular.isDefined(_this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]])) {
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
            if (keyOfExpandableRuleMet != -1) {
                var childCollectionConfig = _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].childrenCollectionConfig.clone();
                angular.forEach(childCollectionConfig.filterGroups[0], function (filterGroup, key) {
                    angular.forEach(filterGroup, function (filter, key) {
                        if (angular.isString(filter.value)
                            && filter.value.length
                            && filter.value.charAt(0) == '$') {
                            filter.value = _this.utilityService.replaceStringWithProperties(filter.value, pageRecord);
                        }
                    });
                });
                _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]] = childCollectionConfig;
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
        };
        //Setup a store so that controllers can listing for state changes and fire action requests.
        //To create a store, we instantiate it using the object that holds the state variables,
        //and the reducer. We can also add a middleware to the end if you need.
        this.listingDisplayStore = new Store.IStore(this.state, this.listingDisplayStateReducer);
    }
    return ListingService;
}());
exports.ListingService = ListingService;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayController($scope, $rootScope, $transclude, $timeout, $q, $hibachi, utilityService, collectionConfigService, listingService, paginationService, selectionService, observerService, rbkeyService, localStorageService) {
        var _this = this;
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.$transclude = $transclude;
        this.$timeout = $timeout;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.paginationService = paginationService;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.localStorageService = localStorageService;
        /* local state variables */
        this.actions = [];
        this.allpropertyidentifiers = "";
        this.allprocessobjectproperties = "false";
        this.aggregates = [];
        this.buttonGroup = [];
        this.childCollectionConfigs = {};
        this.collectionConfigs = [];
        this.collectionObjects = [];
        this.colorFilters = [];
        this.columns = [];
        this.disableRules = [];
        this.expandableRules = [];
        this.exampleEntity = "";
        this.filters = [];
        this.filterGroups = [];
        this.hideRules = [];
        this.multiselectable = false;
        this.orderBys = [];
        this.orderByStates = {};
        this.orderByIndices = {};
        this.pageRecordsWithManualSortOrder = {};
        this.searching = false;
        this.selectable = false;
        this.showSearchFilters = false;
        this.sortable = false;
        this.processCollection = function () {
            _this.initializeState();
            if (angular.isDefined(_this.collectionPromise)) {
                _this.hasCollectionPromise = true;
                _this.multipleCollectionDeffered.reject();
            }
            if (_this.collectionConfig != null) {
                _this.multipleCollectionDeffered.reject();
            }
            _this.listingService.setListingState(_this.tableID, _this);
            //this is performed after the listing state is set above to populate columns and multiple collectionConfigs if present
            _this.$transclude(_this.$scope, function () { });
            _this.hasCollectionPromise = angular.isDefined(_this.collectionPromise);
            if (_this.multiSlot) {
                _this.singleCollectionPromise.then(function () {
                    _this.multipleCollectionDeffered.reject();
                });
                _this.multipleCollectionPromise.then(function () {
                    //now do the intial setup
                    _this.listingService.setupInMultiCollectionConfigMode(_this.tableID);
                }).catch(function () {
                    //do the initial setup for single collection mode
                    _this.listingService.setupInSingleCollectionConfigMode(_this.tableID, _this.$scope);
                }).finally(function () {
                    if (angular.isUndefined(_this.getCollection)) {
                        _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
                    }
                    _this.paginator.getCollection = _this.getCollection;
                    _this.observerService.attach(_this.getCollectionObserver, 'getCollection', _this.tableID);
                });
            }
            else if (_this.multiSlot == false) {
                if (_this.columns && _this.columns.length) {
                    _this.collectionConfig.columns = _this.columns;
                }
                _this.setupCollectionPromise();
            }
            if (!_this.collectionObject && (_this.collectionConfig && _this.collectionConfig.baseEntityName)) {
                _this.collectionObject = _this.collectionConfig.baseEntityName;
            }
            if (_this.collectionObject) {
                _this.exampleEntity = _this.$hibachi.getEntityExample(_this.collectionObject);
            }
            _this.observerService.attach(_this.getCollectionByPagination, 'swPaginationAction', _this.tableID);
        };
        this.getCollectionByPagination = function (state) {
            if (state.type) {
                switch (state.type) {
                    case 'setCurrentPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'nextPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'prevPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'setPageShow':
                        _this.collectionConfig.currentPage = 1;
                        _this.collectionConfig.setPageShow(state.payload);
                        break;
                }
                _this.getCollection = _this.collectionConfig.getEntity().then(function (data) {
                    _this.collectionData = data;
                    _this.observerService.notifyById('swPaginationUpdate', _this.tableID, _this.collectionData);
                });
            }
        };
        this.setupCollectionPromise = function () {
            if (angular.isUndefined(_this.getCollection)) {
                _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
            }
            _this.paginator.getCollection = _this.getCollection;
            var getCollectionEventID = _this.tableID;
            //this.observerService.attach(this.getCollectionObserver,'getCollection',getCollectionEventID);
            _this.listingService.getCollection(_this.tableID);
        };
        this.getCollectionObserver = function (param) {
            _this.collectionConfig.loadJson(param.collectionConfig);
            _this.collectionData = undefined;
            _this.$timeout(function () {
                _this.getCollection();
            });
        };
        this.initializeState = function () {
            if (_this.name != null) {
                _this.tableID = _this.name;
            }
            else {
                _this.tableID = 'LD' + _this.utilityService.createID();
            }
            if (angular.isUndefined(_this.collectionConfig)) {
                //make it available to swCollectionConfig
                _this.collectionConfig = null;
            }
            if (angular.isUndefined(_this.multiSlot)) {
                _this.multiSlot = false;
            }
            if (angular.isDefined(_this.administrativeCount)) {
                _this.administrativeCount = parseInt(_this.administrativeCount);
            }
            else {
                _this.administrativeCount = 0;
            }
            if (_this.recordDetailAction && _this.recordDetailAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('detail');
            }
            if (_this.recordEditAction && _this.recordEditAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('edit');
            }
            if (_this.recordDeleteAction && _this.recordDeleteAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('delete');
            }
            if (_this.recordAddAction && _this.recordAddAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('add');
            }
            if (_this.collectionConfig != null &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionConfig)) {
                _this.collectionConfig = _this.collection.collectionConfig;
            }
            if (angular.isUndefined(_this.collectionObject) &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionObject)) {
                _this.collectionObject = _this.collection.collectionObject;
            }
            //set defaults if value is not specifies
            _this.processObjectProperties = _this.processObjectProperties || '';
            _this.recordProcessButtonDisplayFlag = _this.recordProcessButtonDisplayFlag || true;
            _this.norecordstext = _this.rbkeyService.getRBKey('entity.' + _this.collectionObject + '.norecords');
            if (angular.isUndefined(_this.defaultSelectEvent)) {
                _this.defaultSelectEvent = 'swSelectionToggleSelection' + _this.tableID;
            }
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = true;
            }
            if (angular.isUndefined(_this.customListingControls)) {
                _this.customListingControls = false;
            }
            if (angular.isUndefined(_this.hasSearch)) {
                _this.hasSearch = true;
                _this.showSearch = true;
            }
            if (angular.isUndefined(_this.showOrderBy)) {
                _this.showOrderBy = true;
            }
            if (angular.isUndefined(_this.showPrintOptions)) {
                _this.showPrintOptions = false;
            }
            if (angular.isUndefined(_this.showToggleDisplayOptions)) {
                _this.showToggleDisplayOptions = true;
            }
            if (angular.isUndefined(_this.expandable)) {
                _this.expandable = false;
            }
            //setup export action
            if (angular.isUndefined(_this.exportAction)) {
                _this.exportAction = _this.$hibachi.buildUrl('main.collectionExport') + '&collectionExportID=';
            }
            //setup print action
            if (angular.isDefined(_this.printAction)) {
                _this.printAction = _this.$hibachi.buildUrl('main.collectionPrint') + '&collectionExportID=';
            }
            //setup email action
            if (angular.isDefined(_this.emailAction)) {
                _this.emailAction = _this.$hibachi.buildUrl('main.collectionEmail') + '&collectionExportID=';
            }
            _this.paginator = _this.paginationService.createPagination(_this.tableID);
            _this.hasCollectionPromise = false;
            if (angular.isUndefined(_this.getChildCount)) {
                _this.getChildCount = false;
            }
            //Setup table class
            _this.tableclass = _this.tableclass || '';
            _this.tableclass = _this.utilityService.listPrepend(_this.tableclass, 'table table-bordered table-hover', ' ');
            if (_this.collectionConfig) {
                _this.collectionConfig.setEventID(_this.tableID);
            }
            if (angular.isDefined(_this.sortableFieldName)) {
                _this.sortableFieldName = "sorting" + _this.tableID;
            }
        };
        this.getListingPageRecordsUpdateEventString = function () {
            return _this.listingService.getListingPageRecordsUpdateEventString(_this.tableID);
        };
        this.getKeyOfMatchedHideRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesHideRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            return _this.listingService.getPageRecordValueByColumn(pageRecord, column);
        };
        this.getKeyOfMatchedDisableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesDisableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesDisableRule(_this.tableID, pageRecord);
        };
        this.getKeyOfMatchedExpandableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordChildCollectionConfigForExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordRefreshChildrenEvent = function (pageRecord) {
            if (_this.listingService.hasPageRecordRefreshChildrenEvent(_this.tableID, pageRecord)) {
                return _this.listingService.getPageRecordRefreshChildrenEvent(_this.tableID, pageRecord);
            }
            else {
                return "";
            }
        };
        this.getExampleEntityForExpandableRecord = function (pageRecord) {
            return _this.listingService.getExampleEntityForExpandableRecord(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordRow = function (pageRecord) {
            return _this.listingService.getNGClassObjectForPageRecordRow(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordCell = function (pageRecord, column) {
            var classObjectString = "{";
            return classObjectString + "}";
        };
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            return _this.listingService.getColorFilterConditionString(colorFilter, pageRecord);
        };
        this.hasSingleCollectionConfig = function () {
            return _this.collectionConfig && _this.collectionConfigs.length == 0;
        };
        this.toggleOrderBy = function (column) {
            _this.listingService.toggleOrderBy(_this.tableID, column);
        };
        this.showCalculation = function (show) {
            if (show === void 0) { show = "total"; }
            // Hide all other calculations
            $(".sw-" + (show == "total" ? "average" : "total")).hide();
            // Show all of the chosen calculations
            $(".sw-" + show).show();
        };
        this.hasNumerical = function () {
            // Iterate over columns, find out if we have any numericals and return
            return _this.columns.reduce(function (totalNumericalCols, col) {
                return totalNumericalCols + (col.ormtype && 'big_decimal,integer,float,double'.indexOf(col.ormtype) >= 0) ? 1 : 0;
            });
        };
        this.columnOrderByIndex = function (column) {
            return _this.listingService.columnOrderByIndex(_this.tableID, column);
        };
        this.updateMultiselectValues = function (res) {
            _this.multiselectValues = _this.selectionService.getSelections(_this.tableID);
            if (_this.selectionService.isAllSelected(_this.tableID)) {
                _this.multiselectCount = _this.collectionData.recordsCount - _this.selectionService.getSelectionCount(_this.tableID);
            }
            else {
                _this.multiselectCount = _this.selectionService.getSelectionCount(_this.tableID);
            }
            switch (res.action) {
                case 'uncheck':
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'selectAll':
                    _this.allSelected = true;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'clear':
                    _this.allSelected = false;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
            }
            //dispatch the update to the store.
            _this.listingService.listingDisplayStore.dispatch({
                type: "CURRENT_PAGE_RECORDS_SELECTED",
                payload: { listingID: _this.tableID, selectionCount: _this.multiselectCount, values: _this.multiselectValues }
            });
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            return _this.listingService.getPageRecordKey(propertyIdentifier);
        };
        this.getAdminAttributesByType = function (type) {
            var recordActionName = 'record' + type.toUpperCase() + 'Action';
            var recordActionPropertyName = recordActionName + 'Property';
            var recordActionQueryStringName = recordActionName + 'QueryString';
            var recordActionModalName = recordActionName + 'Modal';
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'action="' + _this[recordActionName] + '"', " ");
            if (_this[recordActionPropertyName] && _this[recordActionPropertyName].length) {
                _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'actionproperty="' + _this[recordActionPropertyName] + '"', " ");
            }
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'querystring="' + _this[recordActionQueryStringName] + '"', " ");
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'modal="' + _this[recordActionModalName] + '"', " ");
        };
        this.getExportAction = function () {
            return _this.exportAction + _this.collectionID;
        };
        this.getPrintAction = function () {
            return _this.printAction + _this.collectionID;
        };
        this.getEmailAction = function () {
            return _this.emailAction + _this.collectionID;
        };
        this.exportCurrentList = function (selection) {
            if (selection === void 0) { selection = false; }
            if (_this.collectionConfigs.length == 0) {
                var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
                if (selection && !angular.isUndefined(_this.selectionService.getSelections(_this.tableID))
                    && (_this.selectionService.getSelections(_this.tableID).length > 0)) {
                    exportCollectionConfig.filterGroups[0].filterGroup = [
                        {
                            "displayPropertyIdentifier": _this.rbkeyService.getRBKey("entity." + exportCollectionConfig.baseEntityName.toLowerCase() + "." + _this.exampleEntity.$$getIDName().toLowerCase()),
                            "propertyIdentifier": exportCollectionConfig.baseEntityAlias + "." + _this.exampleEntity.$$getIDName(),
                            "comparisonOperator": (_this.allSelected) ? "not in" : "in",
                            "value": _this.selectionService.getSelections(_this.tableID).join(),
                            "displayValue": _this.selectionService.getSelections(_this.tableID).join(),
                            "ormtype": "string",
                            "fieldtype": "id",
                            "conditionDisplay": "In List"
                        }
                    ];
                }
            }
            else {
                //multiCollectionConfig logic
            }
            $('body').append('<form action="/?' + _this.$hibachi.getConfigValue('action') + '=main.collectionConfigExport" method="post" id="formExport"></form>');
            $('#formExport')
                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />")
                .submit()
                .remove();
        };
        this.printCurrentList = function (printTemplateID) {
            var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
            $('body').append('<form action="?s=1" method="post" id="formPrint"></form>');
            $('#formPrint')
                .append("<input type='hidden' name='" + _this.$hibachi.getConfigValue('action') + "' value='entity.processPrint' />")
                .append("<input type='hidden' name='redirectAction' value='admin:entity.list" + _this.baseEntityName.toLowerCase() + "' />")
                .append("<input type='hidden' name='processContext' value='addToQueue' />")
                .append("<input type='hidden' name='printID' value='' />")
                .append("<input type='hidden' name='printTemplateID' value='" + printTemplateID + "' />")
                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />");
            $('#formPrint')
                .submit()
                .remove();
        };
        this.paginationPageChange = function (res) {
            _this.isCurrentPageRecordsSelected = false;
        };
        this.selectCurrentPageRecords = function () {
            _this.listingService.selectCurrentPageRecords(_this.tableID);
        };
        //these are no longer going to work
        this.clearSelection = function () {
            _this.selectionService.clearSelection(_this.tableID);
        };
        this.selectAll = function () {
            _this.selectionService.selectAll(_this.tableID);
        };
        //Invariant - We must have some way to instantiate. Everything can't be optional. --commented out due to breaking sku listing on product detail page
        // if (!(this.collectionConfig) && !this.collectionConfigs.length && !this.collection){
        //     return;
        // }
        if (angular.isUndefined(this.usingPersonalCollection)) {
            this.usingPersonalCollection = false;
        }
        if (angular.isUndefined(this.showExport)) {
            this.showExport = true;
        }
        //promises to determine which set of logic will run
        this.multipleCollectionDeffered = $q.defer();
        this.multipleCollectionPromise = this.multipleCollectionDeffered.promise;
        this.singleCollectionDeferred = $q.defer();
        this.singleCollectionPromise = this.singleCollectionDeferred.promise;
        if (angular.isDefined(this.collection) && angular.isString(this.collection)) {
            //not sure why we have two properties for this
            this.baseEntityName = this.collection;
            this.collectionObject = this.collection;
            this.collectionConfig = this.collectionConfigService.newCollectionConfig(this.collectionObject);
            this.$timeout(function () {
                _this.collection = _this.collectionConfig;
                _this.columns = _this.collectionConfig.columns;
            });
            this.multipleCollectionDeffered.reject();
        }
        if (this.usingPersonalCollection && this.localStorageService.hasItem('selectedPersonalCollection') && this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()] && (angular.isUndefined(this.personalCollectionIdentifier) || (angular.isDefined(this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()]['collectionDescription']) && this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()]['collectionDescription'] == this.personalCollectionIdentifier))) {
            var personalCollection = this.collectionConfigService.newCollectionConfig('Collection');
            personalCollection.setDisplayProperties('collectionConfig');
            personalCollection.addFilter('collectionID', this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()].collectionID);
            // personalCollection.addFilter('collectionDescription',this.personalCollectionIdentifier);
            var originalMultiSlotValue = angular.copy(this.multiSlot);
            this.multiSlot = false;
            personalCollection.getEntity().then(function (data) {
                if (data.pageRecords.length) {
                    _this.collectionConfig = _this.collectionConfigService.newCollectionConfig().loadJson(data.pageRecords[0].collectionConfig);
                    console.log('collectionConfig', _this.collectionConfig);
                    _this.collectionObject = _this.baseEntityName;
                    _this.$timeout(function () {
                        _this.collection = _this.collectionConfig;
                        _this.columns = _this.collectionConfig.columns;
                    });
                }
                else {
                    _this.multiSlot = originalMultiSlotValue;
                }
                _this.processCollection();
            });
        }
        else {
            $rootScope.hibachiScope.selectedPersonalCollection = undefined;
            this.processCollection();
        }
    }
    return SWListingDisplayController;
}());
var SWListingDisplay = /** @class */ (function () {
    //@ngInject
    function SWListingDisplay(listingPartialPath, hibachiPathBuilder) {
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = {
            addAction: "?swListingAddAction",
            detailAction: "?swListingDetailAction",
            deleteAction: "?swListingDeleteAction",
            editAction: "?swListingEditAction",
            saveAction: "?swListingSaveAction",
            columns: "?swListingColumns",
            collectionConfigs: "?swCollectionConfigs",
            disableRules: "?swDisabledRowRules",
            expandableRules: "?swExpandableRowRules",
            customListingControls: "?swCustomListingControls"
        };
        this.bindToController = {
            usingPersonalCollection: "<?",
            personalCollectionIdentifier: '@?',
            isRadio: "<?",
            angularLinks: "<?",
            isAngularRoute: "<?",
            name: "@?",
            /*required*/
            collection: "<?",
            collectionConfig: "<?",
            getCollection: "&?",
            collectionPromise: "<?",
            edit: "<?",
            /*Optional*/
            title: "<?",
            childPropertyName: "@?",
            baseEntity: "<?",
            baseEntityName: "@?",
            baseEntityId: "@?",
            /*Admin Actions*/
            actions: "<?",
            administrativeCount: "@?",
            recordEditAction: "@?",
            recordEditActionProperty: "@?",
            recordEditQueryString: "@?",
            recordEditModal: "<?",
            recordEditDisabled: "<?",
            recordDetailAction: "@?",
            recordDetailActionProperty: "@?",
            recordDetailActionIdProperty: "@?",
            recordDetailActionIdKey: "@?",
            recordDetailQueryString: "@?",
            recordDetailModal: "<?",
            recordDeleteAction: "@?",
            recordDeleteActionProperty: "@?",
            recordDeleteQueryString: "@?",
            recordAddAction: "@?",
            recordAddActionProperty: "@?",
            recordAddQueryString: "@?",
            recordAddModal: "<?",
            recordAddDisabled: "<?",
            recordProcessesConfig: "<?",
            /* record processes config is an array of actions. Example:
            [
            {
                recordProcessAction:"@",
                recordProcessActionProperty:"@",
                recordProcessQueryString:"@",
                recordProcessContext:"@",
                recordProcessEntity:"=",
                recordProcessEntityData:"=",
                recordProcessUpdateTableID:"=",
                recordProcessButtonDisplayFlag:"=",
            }
            ]
            */
            /*Hierachy Expandable*/
            parentPropertyName: "@?",
            //booleans
            expandable: "<?",
            expandableOpenRoot: "<?",
            /*Searching*/
            searchText: "<?",
            /*Sorting*/
            sortable: "<?",
            sortableFieldName: "@?",
            sortProperty: "@?",
            sortContextIDColumn: "@?",
            sortContextIDValue: "@?",
            /*Single Select*/
            selectFiledName: "@?",
            selectValue: "@?",
            selectTitle: "@?",
            /*Multiselect*/
            multiselectFieldName: "@?",
            multiselectPropertyIdentifier: "@?",
            multiselectIdPaths: "@?",
            multiselectValues: "@?",
            /*Helper / Additional / Custom*/
            tableattributes: "@?",
            tableclass: "@?",
            typeaheadDataKey: "@?",
            adminattributes: "@?",
            /* Settings */
            showheader: "<?",
            showExport: "<?",
            showOrderBy: "<?",
            showTopPagination: "<?",
            showToggleDisplayOptions: "<?",
            showSearch: "<?",
            showSearchFilters: "<?",
            showSimpleListingControls: "<?",
            showPrintOptions: "<?",
            /* Basic Action Caller Overrides*/
            createModal: "<?",
            createAction: "@?",
            createQueryString: "@?",
            exportAction: "@?",
            getChildCount: "<?",
            hasSearch: "<?",
            hasActionBar: "<?",
            multiSlot: "=?",
            customListingControls: "<?"
        };
        this.controller = SWListingDisplayController;
        this.controllerAs = "swListingDisplay";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs, transclude) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.listingPartialPath = listingPartialPath;
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingdisplay.html';
    }
    SWListingDisplay.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingDisplay(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = [
            'listingPartialPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWListingDisplay;
}());
exports.SWListingDisplay = SWListingDisplay;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayCellController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCellController(listingPartialPath, hibachiPathBuilder, listingService, utilityService, $scope) {
        var _this = this;
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.expandable = false;
        this.getDirectiveTemplate = function () {
            var templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycell.html';
            if (_this.expandable || (_this.swListingDisplay.expandable && _this.column.tdclass && _this.column.tdclass === 'primary')) {
                templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplayselectablecellexpandable.html';
            }
            if (!_this.swListingDisplay.expandable || !_this.column.tdclass || _this.column.tdclass !== 'primary') {
                if (_this.column.ormtype === 'timestamp') {
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycelldate.html';
                }
                else if (_this.column.type === 'currency') {
                    if (_this.column.aggregate) {
                        _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
                    }
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellcurrency.html';
                }
                else if (_this.column.aggregate) {
                    _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellaggregate.html';
                }
            }
            return templateUrl;
        };
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.$scope = $scope;
        if (!this.value && this.pageRecord && this.column) {
            this.value = this.listingService.getPageRecordValueByColumn(this.pageRecord, this.column);
        }
        this.popover = this.utilityService.replaceStringWithProperties(this.column.tooltip, this.pageRecord);
        this.hasActionCaller = false;
        if (this.column.action && this.column.queryString) {
            this.hasActionCaller = true;
            this.actionCaller = {
                action: this.column.action
            };
            if (this.column.queryString) {
                this.actionCaller.queryString = this.utilityService.replaceStringWithProperties(this.column.queryString, this.pageRecord);
            }
        }
        if (this.cellView) {
            console.log("Cellview?", this.cellView);
            var htmlCellView = this.utilityService.camelCaseToSnakeCase(this.cellView);
            this.template = htmlCellView;
            //convert the page records into attrs
            this.templateVariables = this.pageRecord;
            if (angular.isDefined(this.column.columnID)) {
                this.templateVariables["column"] = this.column.columnID;
            }
            if (angular.isDefined(this.swListingDisplay.baseEntityName) && angular.isDefined(this.swListingDisplay.baseEntityId)) {
                this.templateVariables["baseEntityId"] = this.swListingDisplay.baseEntityId;
                this.templateVariables["baseEntityName"] = this.swListingDisplay.baseEntityName;
            }
            if (angular.isDefined(this.column.propertyIdentifier)) {
                this.templateVariables["columnPropertyIdentifier"] = this.column.propertyIdentifier;
            }
            this.templateVariables["listingDisplayID"] = this.swListingDisplay.tableID;
        }
        else if (!this.hasActionCaller) {
            this.templateUrl = this.getDirectiveTemplate();
        }
    }
    return SWListingDisplayCellController;
}());
var SWListingDisplayCell = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCell() {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            swListingDisplay: "=?",
            column: "=?",
            pageRecord: "=?",
            value: "=?",
            cellView: "@?",
            expandableRules: "=?"
        };
        this.controller = SWListingDisplayCellController;
        this.controllerAs = "swListingDisplayCell";
        this.template = "\n        <div ng-if=\"swListingDisplayCell.template\" sw-directive data-variables=\"swListingDisplayCell.templateVariables\" data-directive-template=\"swListingDisplayCell.template\"></div>\n        <div ng-if=\"swListingDisplayCell.templateUrl\" ng-include src=\"swListingDisplayCell.templateUrl\"></div>\n        <sw-action-caller ng-if=\"swListingDisplayCell.hasActionCaller\"\n                    data-action=\"{{swListingDisplayCell.actionCaller.action}}\"\n                    data-query-string=\"{{swListingDisplayCell.actionCaller.queryString}}\"\n                    data-text=\"{{swListingDisplayCell.value}}\"\n                    data-tooltip-text=\"{{swListingDisplayCell.popover}}\"\n                    data-is-angular-route=\"false\"\n\n        >\n        </sw-action-caller>\n    ";
    }
    SWListingDisplayCell.Factory = function () {
        var directive = function () { return new SWListingDisplayCell(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingDisplayCell;
}());
exports.SWListingDisplayCell = SWListingDisplayCell;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingControlsController = /** @class */ (function () {
    //@ngInject
    function SWListingControlsController($hibachi, metadataService, collectionService, listingService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.collectionService = collectionService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.personalCollectionsClosed = true;
        this.columnIsControllableMap = {};
        this.filterActions = function (res) {
            if (res.action == 'add' || res.action == 'remove') {
                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
            }
            _this.filtersClosed = true;
        };
        this.getSelectedSearchColumnName = function () {
            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;
        };
        this.canDisplayColumn = function (column) {
            if (!_this.listingColumns || !_this.listingColumns.length) {
                return true;
            }
            if (angular.isDefined(_this.columnIsControllableMap[column.propertyIdentifier])) {
                return _this.columnIsControllableMap[column.propertyIdentifier];
            }
            for (var i = 0; i < _this.listingColumns.length; i++) {
                if (column.propertyIdentifier == _this.listingColumns[i].propertyIdentifier) {
                    _this.columnIsControllableMap[column.propertyIdentifier] = true;
                }
            }
            if (!_this.columnIsControllableMap[column.propertyIdentifier]) {
                _this.columnIsControllableMap[column.propertyIdentifier] = false;
            }
            return _this.columnIsControllableMap[column.propertyIdentifier];
        };
        this.addSearchFilter = function () {
            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)
                return;
            var keywords = _this.searchText.split(" ");
            for (var i = 0; i < keywords.length; i++) {
                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);
            }
            _this.searchText = '';
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
        };
        this.toggleDisplayOptions = function (closeButton) {
            if (closeButton === void 0) { closeButton = false; }
            if (closeButton) {
                _this.displayOptionsClosed = true;
            }
            else {
                _this.displayOptionsClosed = !_this.displayOptionsClosed;
            }
        };
        this.setItemInUse = function (booleanValue) {
            _this.itemInUse = booleanValue;
        };
        this.removeFilter = function (array, index, reloadCollection) {
            if (reloadCollection === void 0) { reloadCollection = true; }
            array.splice(index, 1);
            if (reloadCollection) {
                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
            }
        };
        this.toggleFilters = function () {
            if (_this.filtersClosed) {
                if (_this.simple) {
                    _this.newFilterPosition = _this.collectionService.newFilterItem(_this.collectionConfig.filterGroups[0].filterGroup, _this.setItemInUse);
                }
            }
            _this.filtersClosed = !_this.filtersClosed;
        };
        this.togglePersonalCollections = function () {
            _this.personalCollectionsClosed = !_this.personalCollectionsClosed;
        };
        this.selectFilterItem = function (filterItem) {
            _this.filtersClosed = false;
            _this.collectionService.selectFilterItem(filterItem);
        };
        this.saveCollection = function (collectionConfig) {
            if (collectionConfig) {
                _this.collectionConfig = collectionConfig;
            }
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
        };
        this.exportCollection = function () {
            _this.swListingDisplay.exportCurrentList();
        };
        this.printCollection = function (printTemplateID) {
            _this.swListingDisplay.printCurrentList(printTemplateID);
        };
        if (angular.isUndefined(this.showPrintOptions)) {
            this.showPrintOptions = false;
        }
        if (angular.isUndefined(this.showExport)) {
            this.showExport = true;
        }
        if (angular.isUndefined(this.showToggleSearch)) {
            this.showToggleSearch = true;
        }
        if (angular.isUndefined(this.showToggleFilters)) {
            this.showToggleFilters = true;
        }
        if (angular.isUndefined(this.showToggleDisplayOptions)) {
            this.showToggleDisplayOptions = true;
        }
        if (angular.isUndefined(this.showFilters)) {
            this.showFilters = false;
        }
        this.backupColumnsConfig = this.collectionConfig.getColumns();
        if (angular.isDefined(this.tableId)) {
            this.listingColumns = this.listingService.getListingColumns(this.tableId);
        }
        if (angular.isUndefined(this.simple)) {
            this.simple = true;
        }
        this.filterPropertiesList = {};
        $hibachi.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function (value) {
            metadataService.setPropertiesList(value, _this.collectionConfig.baseEntityAlias);
            _this.filterPropertiesList[_this.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias(_this.collectionConfig.baseEntityAlias);
            metadataService.formatPropertiesList(_this.filterPropertiesList[_this.collectionConfig.baseEntityAlias], _this.collectionConfig.baseEntityAlias);
        });
        this.observerService.attach(this.filterActions, 'filterItemAction');
    }
    return SWListingControlsController;
}());
var SWListingControls = /** @class */ (function () {
    function SWListingControls(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.bindToController = {
            collectionConfig: "=",
            tableId: "=?",
            getCollection: "&",
            showExport: "=?",
            showFilters: "=?",
            showPrintOptions: "=?",
            showToggleSearch: "=?",
            showToggleFilters: "=?",
            showToggleDisplayOptions: "=?",
            displayOptionsClosed: "=?",
            simple: "=?"
        };
        this.controller = SWListingControlsController;
        this.controllerAs = 'swListingControls';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingcontrols.html";
    }
    SWListingControls.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingControls(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWListingControls.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
    return SWListingControls;
}());
exports.SWListingControls = SWListingControls;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingAggregateController = /** @class */ (function () {
    function SWListingAggregateController() {
        var _this = this;
        this.init = function () {
            _this.editable = _this.editable || false;
        };
        this.init();
    }
    return SWListingAggregateController;
}());
var SWListingAggregate = /** @class */ (function () {
    function SWListingAggregate() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            aggregateFunction: "@",
            aggregateAlias: "@?"
        };
        this.controller = SWListingAggregateController;
        this.controllerAs = "swListingAggregate";
        this.link = function (scope, element, attrs) {
            var aggregate = {
                propertyIdentifier: scope.swListingAggregate.propertyIdentifier,
                aggregateFunction: scope.swListingAggregate.aggregateFunction,
                aggregateAlias: scope.swListingAggregate.aggregateAlias,
            };
            scope.$parent.swListingDisplay.aggregates.push(aggregate);
        };
    }
    SWListingAggregate.Factory = function () {
        var directive = function () { return new SWListingAggregate(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingAggregate;
}());
exports.SWListingAggregate = SWListingAggregate;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColorFilterController = /** @class */ (function () {
    function SWListingColorFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingColorFilterController;
}());
var SWListingColorFilter = /** @class */ (function () {
    function SWListingColorFilter(utilityService) {
        var _this = this;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyToCompare: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            comparisonProperty: "@",
            colorClass: "@",
            color: "@"
        };
        this.controller = SWListingColorFilterController;
        this.controllerAs = "swListingColorFilter";
        this.link = function (scope, element, attrs) {
            var colorFilter = {
                propertyToCompare: scope.swListingColorFilter.propertyToCompare,
                comparisonOperator: scope.swListingColorFilter.comparisonOperator,
                comparisonValue: scope.swListingColorFilter.comparisonValue,
                comparisonProperty: scope.swListingColorFilter.comparisonProperty,
                colorClass: scope.swListingColorFilter.colorClass,
                color: scope.swListingColorFilter.color
            };
            if (_this.utilityService.ArrayFindByPropertyValue(scope.$parent.swListingDisplay.colorFilters, 'propertyToCompare', colorFilter.propertyToCompare) === -1) {
                scope.$parent.swListingDisplay.colorFilters.push(colorFilter);
            }
        };
    }
    SWListingColorFilter.Factory = function () {
        var directive = function (utilityService) { return new SWListingColorFilter(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingColorFilter;
}());
exports.SWListingColorFilter = SWListingColorFilter;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColumnController = /** @class */ (function () {
    //@ngInject
    function SWListingColumnController($injector, utilityService, listingService, rbkeyService) {
        var _this = this;
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
        this.hasCellView = false;
        this.hasHeaderView = false;
        this.$onInit = function () {
            if (angular.isUndefined(_this.isVisible)) {
                _this.isVisible = true;
            }
            if (angular.isUndefined(_this.isExportable)) {
                _this.isExportable = true;
            }
            if (angular.isUndefined(_this.isDeletable)) {
                _this.isDeletable = true;
            }
            if (angular.isUndefined(_this.search)) {
                _this.search = true;
            }
            _this.editable = _this.editable || false;
            //did a cellView get suggested, if so does it exist
            if (_this.cellView) {
                if (_this.$injector.has(_this.cellView + 'Directive')) {
                    _this.hasCellView = true;
                }
                else {
                    throw (_this.cellView + ' is not an existing directive');
                }
            }
            if (_this.headerView) {
                if (_this.$injector.has(_this.headerView + 'Directive')) {
                    _this.hasHeaderView = true;
                }
                else {
                    throw (_this.headerView + ' is not an existing directive');
                }
            }
            _this.column = {
                columnID: "C" + _this.utilityService.createID(31),
                propertyIdentifier: _this.propertyIdentifier,
                fallbackPropertyIdentifiers: _this.fallbackPropertyIdentifiers,
                processObjectProperty: _this.processObjectProperty,
                title: _this.title,
                tdclass: _this.tdclass,
                search: _this.search,
                sort: _this.sort,
                filter: _this.filter,
                range: _this.range,
                editable: _this.editable,
                buttonGroup: _this.buttonGroup,
                hasCellView: _this.hasCellView,
                hasHeaderView: _this.hasHeaderView,
                isVisible: _this.isVisible,
                isDeletable: _this.isDeletable,
                isSearchable: _this.search,
                isExportable: _this.isExportable,
                action: _this.action,
                queryString: _this.queryString,
                persistent: _this.persistent
            };
            if (_this.hasCellView) {
                _this.column.cellView = _this.cellView;
            }
            if (_this.hasHeaderView) {
                _this.column.headerView = _this.utilityService.camelCaseToSnakeCase(_this.headerView);
            }
            //aggregate logic
            if (_this.aggregate) {
                _this.column.aggregate = _this.aggregate;
                _this.column.aggregate.propertyIdentifier = _this.propertyIdentifier;
            }
        };
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
    }
    return SWListingColumnController;
}());
var SWListingColumn = /** @class */ (function () {
    //@ngInject
    function SWListingColumn(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.restrict = 'EA';
        this.scope = true;
        this.require = { swListingDisplay: "?^swListingDisplay" };
        this.bindToController = {
            propertyIdentifier: "@",
            processObjectProperty: "@?",
            //defined as aggregate = {aggregateFunction:'COUNT',aggregateAlias:'aliasstring'}
            aggregate: "=?",
            title: "@?",
            tdclass: "@?",
            search: "=?",
            sort: "=?",
            filter: "=?",
            isVisible: "=?",
            isDeletable: "=?",
            isExportable: "=?",
            range: "=?",
            editable: "=?",
            buttonGroup: "=?",
            cellView: "@?",
            headerView: "@?",
            fallbackPropertyIdentifiers: "@?",
            action: "@?",
            queryString: "@?"
        };
        this.controller = SWListingColumnController;
        this.controllerAs = "swListingColumn";
        this.link = function (scope, elem, attr, listingService) {
            if (angular.isDefined(scope.swListingDisplay)
                && scope.swListingDisplay.tableID
                && scope.swListingDisplay.tableID.length) {
                var listingDisplayID = scope.swListingDisplay.tableID;
                if (scope.swListingDisplay.usePersonalCollection != true
                    && scope.swListingDisplay.columns) {
                    _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
                    _this.listingService.setupColumn(listingDisplayID, scope.swListingColumn.column);
                }
            }
            else if (angular.isDefined(scope.swListingColumn.swListingDisplay)
                && scope.swListingColumn.swListingDisplay.tableID
                && scope.swListingColumn.swListingDisplay.tableID.length
                && scope.swListingColumn.swListingDisplay.usePersonalCollection != true
                && scope.swListingColumn.swListingDisplay.columns) {
                var listingDisplayID = scope.swListingColumn.swListingDisplay.tableID;
                _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
            }
            else {
                throw ("listing display scope not available to sw-listing-column or there is no table id");
            }
        };
    }
    SWListingColumn.Factory = function () {
        var directive = function (listingService) { return new SWListingColumn(listingService); };
        directive.$inject = [
            'listingService'
        ];
        return directive;
    };
    return SWListingColumn;
}());
exports.SWListingColumn = SWListingColumn;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SwListingDisableRule
 * defines a filter, by which to determine what rows will be disabled
 */
var SWListingDisableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingDisableRuleController($q) {
        this.$q = $q;
    }
    return SWListingDisableRuleController;
}());
var SWListingDisableRule = /** @class */ (function () {
    function SWListingDisableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.template = "\n        \n    ";
        this.bindToController = {
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@"
        };
        this.controller = SWListingDisableRuleController;
        this.controllerAs = "swListingDisableRule";
        this.link = function (scope, element, attrs) {
            var rule = {
                filterPropertyIdentifier: scope.swListingDisableRule.filterPropertyIdentifier,
                filterComparisonOperator: scope.swListingDisableRule.filterComparisonOperator,
                filterComparisonValue: scope.swListingDisableRule.filterComparisonValue
            };
            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
            if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                listingDisplayScope = listingDisplayScope.swListingDisplay;
            }
            else {
                throw ("listing display scope not available to sw-listing-disable-rule");
            }
            listingDisplayScope.disableRules.push(rule);
        };
    }
    SWListingDisableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingDisableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingDisableRule;
}());
exports.SWListingDisableRule = SWListingDisableRule;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SWListingExpandableRule
 * defines a filter, by which to determine what will be expanded
 * supplies the collection config and any other necessary rules for what will be loaded and displayed
 */
var SWListingExpandableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingExpandableRuleController($q) {
        this.$q = $q;
        this.hasChildrenCollectionConfigDeferred = $q.defer();
        this.hasChildrenCollectionConfigPromise = this.hasChildrenCollectionConfigDeferred.promise;
        //why did I need this? 
        this.childrenCollectionConfig = null;
    }
    return SWListingExpandableRuleController;
}());
var SWListingExpandableRule = /** @class */ (function () {
    function SWListingExpandableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            collectionConfig: "?swConfig"
        };
        this.template = "\n        <div ng-transclude=\"collectionConfig\"></div> \n    ";
        this.bindToController = {
            childrenCollectionConfig: "=?",
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@",
            refreshChildrenEvent: "@?"
        };
        this.controller = SWListingExpandableRuleController;
        this.controllerAs = "swListingExpandableRule";
        this.link = function (scope, element, attrs) {
            scope.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function () {
                var rule = {
                    filterPropertyIdentifier: scope.swListingExpandableRule.filterPropertyIdentifier,
                    filterComparisonOperator: scope.swListingExpandableRule.filterComparisonOperator,
                    filterComparisonValue: scope.swListingExpandableRule.filterComparisonValue,
                    childrenCollectionConfig: scope.swListingExpandableRule.childrenCollectionConfig,
                    refreshChildrenEvent: scope.swListingExpandableRule.refreshChildrenEvent
                };
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
                if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                    listingDisplayScope = listingDisplayScope.swListingDisplay;
                }
                else {
                    throw ("listing display scope not available to sw-listing-expandable-rule");
                }
                listingDisplayScope.expandableRules.push(rule);
            });
        };
    }
    SWListingExpandableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingExpandableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingExpandableRule;
}());
exports.SWListingExpandableRule = SWListingExpandableRule;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterController = /** @class */ (function () {
    function SWListingFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingFilterController;
}());
var SWListingFilter = /** @class */ (function () {
    function SWListingFilter() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            logicalOperator: "@",
            hidden: "@?"
        };
        this.controller = SWListingFilterController;
        this.controllerAs = "swListingFilter";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.swListingFilter.propertyIdentifier,
                comparisonOperator: scope.swListingFilter.comparisonOperator,
                comparisonValue: scope.swListingFilter.comparisonValue,
                logicalOperator: scope.swListingFilter.logicalOperator,
                hidden: false
            };
            if (angular.isDefined(scope.swListingFilter.hidden)) {
                filter['hidden'] = scope.swListingFilter.hidden;
            }
            if (angular.isDefined(scope.$parent.swListingFilterGroup)) {
                scope.$parent.swListingFilterGroup.filters.push(filter);
            }
            else {
                scope.$parent.swListingDisplay.filters.push(filter);
            }
        };
    }
    SWListingFilter.Factory = function () {
        var directive = function () { return new SWListingFilter(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingFilter;
}());
exports.SWListingFilter = SWListingFilter;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterGroupController = /** @class */ (function () {
    function SWListingFilterGroupController($scope, $transclude) {
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.filters = [];
        $transclude($scope, function () { });
        $scope.$parent.swListingDisplay.filterGroups.push(this.filters);
    }
    return SWListingFilterGroupController;
}());
var SWListingFilterGroup = /** @class */ (function () {
    function SWListingFilterGroup() {
        this.restrict = 'EA';
        this.transclude = true;
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingFilterGroupController;
        this.controllerAs = "swListingFilterGroup";
    }
    SWListingFilterGroup.Factory = function () {
        var directive = function () { return new SWListingFilterGroup(); };
        directive.$inject = [];
        return directive;
    };
    SWListingFilterGroup.$inject = [];
    return SWListingFilterGroup;
}());
exports.SWListingFilterGroup = SWListingFilterGroup;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingOrderByController = /** @class */ (function () {
    //@ngInject
    function SWListingOrderByController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingOrderByController;
}());
var SWListingOrderBy = /** @class */ (function () {
    //@ngInject
    function SWListingOrderBy(utilityService) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@",
        };
        this.controller = SWListingOrderByController;
        this.controllerAs = "swListingOrderBy";
        this.link = function (scope, element, attrs) {
            var orderBy = {
                orderBy: scope.swListingOrderBy.orderBy,
            };
            scope.$parent.swListingDisplay.orderBys.push(orderBy);
        };
    }
    SWListingOrderBy.Factory = function () {
        var directive = function (utilityService) { return new SWListingOrderBy(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingOrderBy;
}());
exports.SWListingOrderBy = SWListingOrderBy;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingRowSaveController = /** @class */ (function () {
    //@ngInject
    function SWListingRowSaveController(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.save = function () {
            _this.listingService.markSaved(_this.listingID, _this.pageRecordIndex);
        };
    }
    return SWListingRowSaveController;
}());
var SWListingRowSave = /** @class */ (function () {
    function SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService) {
        var _this = this;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.utilityService = utilityService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingRowSaveController;
        this.controllerAs = "swListingRowSave";
        this.link = function ($scope, element, attrs) {
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                $scope.swListingRowSave.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                $scope.swListingRowSave.pageRecordIndex = currentScope["pageRecordKey"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
            if (angular.isDefined(currentScope["swListingDisplay"])) {
                $scope.swListingRowSave.listingID = currentScope["swListingDisplay"].tableID;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingrowsave.html';
    }
    SWListingRowSave.Factory = function () {
        var directive = function (hibachiPathBuilder, listingPartialPath, utilityService, scopeService) { return new SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService); };
        directive.$inject = [
            'hibachiPathBuilder',
            'listingPartialPath',
            'utilityService',
            'scopeService'
        ];
        return directive;
    };
    SWListingRowSave.$inject = ['utilityService'];
    return SWListingRowSave;
}());
exports.SWListingRowSave = SWListingRowSave;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingSearchController($rootScope, $hibachi, metadataService, listingService, collectionService, observerService, localStorageService) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.listingService = listingService;
        this.collectionService = collectionService;
        this.observerService = observerService;
        this.localStorageService = localStorageService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.hasPersonalCollections = false;
        this.collectionNameSaveIsOpen = false;
        this.$onInit = function () {
            if (angular.isDefined(_this.swListingDisplay.personalCollectionIdentifier)) {
                _this.personalCollectionIdentifier = _this.swListingDisplay.personalCollectionIdentifier;
            }
            //snapshot searchable options in the beginning
            _this.searchableOptions = angular.copy(_this.swListingDisplay.collectionConfig.columns);
            _this.selectedSearchColumn = { title: 'All' };
            _this.configureSearchableColumns(_this.selectedSearchColumn);
            if (_this.swListingControls.showPrintOptions) {
                //load the options
                //this will prevent icon from flashing on action bar
                _this.swListingControls.showPrintOptions = false;
                var printTemplateOptionsCollection = _this.collectionConfig.newCollectionConfig('PrintTemplate');
                printTemplateOptionsCollection.addFilter('printTemplateObject', _this.swListingDisplay.collectionConfig.baseEntityName);
                printTemplateOptionsCollection.setAllRecords(true);
                printTemplateOptionsCollection.getEntity().then(function (response) {
                    _this.printTemplateOptions = response.records;
                    if (_this.printTemplateOptions.length !== 0) {
                        _this.swListingControls.showPrintOptions = true;
                    }
                }, function (reason) {
                    throw ("swListingSearch couldn't load printTemplateOptions because: " + reason);
                });
            }
        };
        this.selectSearchColumn = function (column) {
            _this.selectedSearchColumn = column;
            _this.configureSearchableColumns(column);
            if (_this.searchText) {
                _this.search();
            }
        };
        this.selectPersonalCollection = function (personalCollection) {
            if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {
                _this.localStorageService.setItem('selectedPersonalCollection', '{}');
            }
            var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
            if (personalCollection) {
                selectedPersonalCollection[personalCollection.collectionObject.toLowerCase()] = personalCollection;
                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
            }
            else {
                delete selectedPersonalCollection[_this.swListingDisplay.baseEntityName.toLowerCase()];
                console.log(selectedPersonalCollection);
                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
            }
            window.location.reload();
        };
        this.savePersonalCollection = function (collectionName) {
            if (_this.localStorageService.hasItem('selectedPersonalCollection') && _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] && (angular.isUndefined(_this.personalCollectionIdentifier) || (angular.isDefined(_this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription']) && _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription'] == _this.personalCollectionIdentifier))) {
                var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
                if (selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]) {
                    _this.$hibachi.saveEntity('Collection', selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()].collectionID, {
                        'accountOwner.accountID': _this.$rootScope.slatwall.account.accountID,
                        'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString
                    }, 'save').then(function (data) {
                    });
                    return;
                }
            }
            else if (collectionName) {
                var serializedJSONData = {
                    'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString,
                    'collectionName': collectionName,
                    'collectionDescription': _this.personalCollectionIdentifier,
                    'collectionObject': _this.swListingDisplay.collectionConfig.baseEntityName,
                    'accountOwner': {
                        'accountID': _this.$rootScope.slatwall.account.accountID
                    }
                };
                _this.$hibachi.saveEntity('Collection', "", {
                    'serializedJSONData': angular.toJson(serializedJSONData),
                    'propertyIdentifiersList': 'collectionID,collectionName,collectionObject,collectionDescription'
                }, 'save').then(function (data) {
                    if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {
                        _this.localStorageService.setItem('selectedPersonalCollection', '{}');
                    }
                    var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
                    selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] = {
                        collectionID: data.data.collectionID,
                        collectionObject: data.data.collectionObject,
                        collectionName: data.data.collectionName,
                        collectionDescription: data.data.collectionDescription
                    };
                    _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
                    _this.$rootScope.slatwall.selectedPersonalCollection = selectedPersonalCollection;
                    _this.collectionNameSaveIsOpen = false;
                    _this.hasPersonalCollections = false;
                });
                return;
            }
            _this.collectionNameSaveIsOpen = true;
        };
        this.getPersonalCollections = function () {
            if (!_this.hasPersonalCollections) {
                var personalCollectionList = _this.collectionConfig.newCollectionConfig('Collection');
                personalCollectionList.setDisplayProperties('collectionID,collectionName,collectionObject,collectionDescription');
                personalCollectionList.addFilter('accountOwner.accountID', _this.$rootScope.slatwall.account.accountID);
                personalCollectionList.addFilter('collectionObject', _this.swListingDisplay.baseEntityName);
                if (angular.isDefined(_this.personalCollectionIdentifier)) {
                    personalCollectionList.addFilter('collectionDescription', _this.personalCollectionIdentifier);
                }
                personalCollectionList.setAllRecords(true);
                personalCollectionList.getEntity().then(function (data) {
                    _this.personalCollections = data.records;
                });
            }
            _this.hasPersonalCollections = true;
        };
        this.clearPersonalCollection = function () {
            _this.selectPersonalCollection();
        };
        this.search = function () {
            if (_this.searchText.length > 0) {
                _this.listingService.setExpandable(_this.listingId, false);
            }
            else {
                _this.listingService.setExpandable(_this.listingId, true);
            }
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notifyById('swPaginationAction', _this.listingId, { type: 'setCurrentPage', payload: 1 });
        };
        this.configureSearchableColumns = function (column) {
            var searchableColumn = "";
            if (column.propertyIdentifier) {
                searchableColumn = column.propertyIdentifier;
                //default to All columns
            }
            for (var i = 0; i < _this.swListingDisplay.collectionConfig.columns.length; i++) {
                if (searchableColumn.length) {
                    if (searchableColumn === _this.swListingDisplay.collectionConfig.columns[i].propertyIdentifier) {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                    }
                    else {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = false;
                    }
                }
                else {
                    _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                }
            }
        };
    }
    return SWListingSearchController;
}());
var SWListingSearch = /** @class */ (function () {
    //@ngInject
    function SWListingSearch(scopeService, collectionPartialsPath, hibachiPathBuilder) {
        this.scopeService = scopeService;
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.require = { swListingDisplay: "?^swListingDisplay", swListingControls: '?^swListingControls' };
        this.bindToController = {
            collectionConfig: "<?",
            paginator: "=?",
            listingId: "@?",
            showToggleSearch: "=?"
        };
        this.controller = SWListingSearchController;
        this.controllerAs = 'swListingSearch';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingsearch.html";
    }
    SWListingSearch.Factory = function () {
        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingSearch(scopeService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingSearch;
}());
exports.SWListingSearch = SWListingSearch;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingGlobalSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearchController($timeout) {
        var _this = this;
        this.$timeout = $timeout;
        this.init = function () {
            _this.searching = false;
        };
        this.search = function () {
            _this.searching = true;
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this._timeoutPromise = _this.$timeout(function () {
                _this.getCollection();
            }, 500);
        };
        this.init();
    }
    return SWListingGlobalSearchController;
}());
var SWListingGlobalSearch = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            searching: "=",
            searchText: "=",
            getCollection: "="
        };
        this.controller = SWListingGlobalSearchController;
        this.controllerAs = "swListingGlobalSearch";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(listingPartialPath) + "listingglobalsearch.html";
    }
    SWListingGlobalSearch.Factory = function () {
        var directive = function (utilityService, listingPartialPath, hibachiPathBuilder) { return new SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['utilityService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingGlobalSearch;
}());
exports.SWListingGlobalSearch = SWListingGlobalSearch;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var OtherWiseController = /** @class */ (function () {
    //@ngInject
    function OtherWiseController($scope) {
        $scope.$id = "otherwiseController";
    }
    return OtherWiseController;
}());
exports.OtherWiseController = OtherWiseController;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var RouterController = /** @class */ (function () {
    //@ngInject
    function RouterController($scope, $routeParams, $location, $log, utilityService) {
        $scope.$id = "routerController";
        $scope.partialRoute = '';
        $log.debug($routeParams);
        $log.debug($location);
        var path = $location.path();
        $scope.controllerType = path.split('/')[1];
        var type;
        if ($scope.controllerType === 'entity') {
            //remove all dashes
            $scope.entityName = utilityService.snakeToCapitalCase($routeParams.entityName);
            if (angular.isDefined($routeParams.entityID)) {
                $scope.entityID = $routeParams.entityID || '';
            }
        }
    }
    return RouterController;
}());
exports.RouterController = RouterController;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetailTabs = /** @class */ (function () {
    function SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + 'detailtabs.html',
            link: function (scope, element, attr) {
            }
        };
    }
    SWDetailTabs.Factory = function () {
        var directive = function (coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetailTabs;
}());
exports.SWDetailTabs = SWDetailTabs;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetail = /** @class */ (function () {
    function SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/detail.html',
            link: function (scope, element, attr) {
                scope.$id = "slatwallDetailController";
                $log.debug('slatwallDetailController');
                /*Sets the view dirty on save*/
                scope.setDirty = function (entity) {
                    angular.forEach(entity.forms, function (form) {
                        form.$setSubmitted();
                    });
                };
                var setupMetaData = function () {
                    scope[scope.entityName.toLowerCase()] = scope.entity;
                    scope.entity.metaData.$$getDetailTabs().then(function (value) {
                        scope.detailTabs = value.data;
                        $log.debug('detailtabs');
                        $log.debug(scope.detailTabs);
                    });
                };
                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);
                scope.tabPartialPath = hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath);
                scope.getEntity = function () {
                    if (scope.entityID === 'create') {
                        scope.createMode = true;
                        scope.entity = $hibachi['new' + propertyCasedEntityName]();
                        setupMetaData();
                    }
                    else {
                        scope.createMode = false;
                        var entityPromise = $hibachi['get' + propertyCasedEntityName]({ id: scope.entityID });
                        entityPromise.promise.then(function () {
                            scope.entity = entityPromise.value;
                            setupMetaData();
                        });
                    }
                };
                scope.getEntity();
                scope.deleteEntity = function () {
                    var deletePromise = scope.entity.$$delete();
                    deletePromise.then(function () {
                        $location.path('/entity/' + propertyCasedEntityName + '/');
                    });
                };
                scope.allTabsOpen = false;
            }
        };
    }
    SWDetail.Factory = function () {
        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$location',
            '$log',
            '$hibachi',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetail;
}());
exports.SWDetail = SWDetail;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWList = /** @class */ (function () {
    function SWList($log, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/list.html',
            link: function (scope, element, attr) {
                $log.debug('slatwallList init');
                //scope.getCollection = function(){
                //
                //	var pageShow = 50;
                //	if(scope.pageShow !== 'Auto'){
                //		pageShow = scope.pageShow;
                //	}
                //	scope.entityName = scope.entityName.charAt(0).toUpperCase()+scope.entityName.slice(1);
                //	var collectionListingPromise = $hibachi.getEntity(scope.entityName, {currentPage:scope.currentPage, pageShow:pageShow, keywords:scope.keywords});
                //	collectionListingPromise.then(function(value){
                //		scope.collection = value;
                //		scope.collectionConfig = angular.fromJson(scope.collection.collectionConfig);
                //	});
                //};
                //scope.getCollection();
            }
        };
    }
    SWList.Factory = function () {
        var directive = function ($log, coreEntityPartialsPath, hibachiPathBuilder) { return new SWList($log, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWList;
}());
exports.SWList = SWList;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../../../typings/hibachiTypescript.d.ts" />
/*collection service is used to maintain the state of the ui*/
var observerservice_1 = __webpack_require__(8);
var utilityservice_1 = __webpack_require__(9);
var core_1 = __webpack_require__(0);
var Pagination = /** @class */ (function () {
    function Pagination(observerService, uuid) {
        this.observerService = observerService;
        this.uuid = uuid;
        this.pageShow = 10;
        this.currentPage = 1;
        this.pageStart = 0;
        this.pageEnd = 0;
        this.recordsCount = 0;
        this.totalPages = 0;
        this.pageShowOptions = [
            { display: 10, value: 10 },
            { display: 20, value: 20 },
            { display: 50, value: 50 },
            { display: 250, value: 250 },
            { display: "Auto", value: "Auto" }
        ];
        this.autoScrollPage = 1;
        this.autoScrollDisabled = false;
        this.notifyById = true;
        this.uuid = uuid;
        this.selectedPageShowOption = this.pageShowOptions[0];
        this.observerService.attach(this.setPageRecordsInfo, 'swPaginationUpdate', this.uuid);
    }
    Pagination.prototype.getSelectedPageShowOption = function () {
        return this.selectedPageShowOption;
    };
    ;
    Pagination.prototype.pageShowOptionChanged = function (pageShowOption) {
        this.setPageShow(pageShowOption.value);
        this.currentPage = 1;
        this.notify('swPaginationAction', { type: 'setPageShow', payload: this.getPageShow() });
    };
    ;
    Pagination.prototype.getTotalPages = function () {
        return this.totalPages;
    };
    ;
    Pagination.prototype.setTotalPages = function (totalPages) {
        this.totalPages = totalPages;
    };
    ;
    Pagination.prototype.getPageStart = function () {
        return this.pageStart;
    };
    ;
    Pagination.prototype.setPageStart = function (pageStart) {
        this.pageStart = pageStart;
    };
    ;
    Pagination.prototype.getPageEnd = function () {
        return this.pageEnd;
    };
    ;
    Pagination.prototype.setPageEnd = function (pageEnd) {
        this.pageEnd = pageEnd;
    };
    ;
    Pagination.prototype.getRecordsCount = function () {
        return this.recordsCount;
    };
    ;
    Pagination.prototype.setRecordsCount = function (recordsCount) {
        this.recordsCount = recordsCount;
    };
    ;
    Pagination.prototype.getPageShowOptions = function () {
        return this.pageShowOptions;
    };
    ;
    Pagination.prototype.setPageShowOptions = function (pageShowOptions) {
        this.pageShowOptions = pageShowOptions;
    };
    ;
    Pagination.prototype.getPageShow = function () {
        return this.pageShow;
    };
    ;
    Pagination.prototype.setPageShow = function (pageShow) {
        this.pageShow = pageShow;
    };
    ;
    Pagination.prototype.getCurrentPage = function () {
        return this.currentPage;
    };
    ;
    Pagination.prototype.setCurrentPage = function (currentPage) {
        this.currentPage = currentPage;
        //this.observerService.notifyById('swPaginationAction', this.uuid,{action:'pageChange', currentPage});
        this.notify('swPaginationAction', { type: 'setCurrentPage', payload: this.getCurrentPage() });
    };
    ;
    Pagination.prototype.previousPage = function () {
        if (this.getCurrentPage() == 1)
            return;
        this.setCurrentPage(this.getCurrentPage() - 1);
    };
    ;
    Pagination.prototype.nextPage = function () {
        if (this.getCurrentPage() < this.getTotalPages()) {
            this.setCurrentPage(this.getCurrentPage() + 1);
            this.notify('swPaginationAction', { type: 'nextPage', payload: this.getCurrentPage() });
        }
    };
    ;
    Pagination.prototype.hasPrevious = function () {
        return (this.getPageStart() <= 1);
    };
    ;
    Pagination.prototype.hasNext = function () {
        return (this.getPageEnd() === this.getRecordsCount());
    };
    ;
    Pagination.prototype.showPreviousJump = function () {
        return (angular.isDefined(this.getCurrentPage()) && this.getCurrentPage() > 3);
    };
    ;
    Pagination.prototype.showNextJump = function () {
        return !!(this.getCurrentPage() < this.getTotalPages() - 3 && this.getTotalPages() > 6);
    };
    ;
    Pagination.prototype.previousJump = function () {
        this.setCurrentPage(this.currentPage - 3);
    };
    ;
    Pagination.prototype.nextJump = function () {
        this.setCurrentPage(this.getCurrentPage() + 3);
    };
    ;
    Pagination.prototype.showPageNumber = function (pageNumber) {
        if (this.getCurrentPage() >= this.getTotalPages() - 3) {
            if (pageNumber > this.getTotalPages() - 6) {
                return true;
            }
        }
        if (this.getCurrentPage() <= 3) {
            if (pageNumber < 6) {
                return true;
            }
        }
        else {
            var bottomRange = this.getCurrentPage() - 2;
            var topRange = this.getCurrentPage() + 2;
            if (pageNumber > bottomRange && pageNumber < topRange) {
                return true;
            }
        }
        return false;
    };
    ;
    Pagination.prototype.setPageRecordsInfo = function (collection) {
        this.setRecordsCount(collection.recordsCount);
        if (this.getRecordsCount() === 0) {
            this.setPageStart(0);
        }
        else {
            this.setPageStart(collection.pageRecordsStart);
        }
        this.setPageEnd(collection.pageRecordsEnd);
        this.setTotalPages(collection.totalPages);
        this.totalPagesArray = [];
        if (angular.isUndefined(this.getCurrentPage()) || this.getCurrentPage() < 5) {
            var start = 1;
            var end = (this.getTotalPages() <= 10) ? this.getTotalPages() + 1 : 10;
        }
        else {
            var start = (!this.showNextJump()) ? this.getTotalPages() - 4 : this.getCurrentPage() - 3;
            var end = (this.showNextJump()) ? this.getCurrentPage() + 5 : this.getTotalPages() + 1;
        }
        for (var i = start; i < end; i++) {
            this.totalPagesArray.push(i);
        }
    };
    ;
    Pagination.prototype.notify = function (event, parameters) {
        if (this.notifyById === true) {
            this.observerService.notifyById(event, this.uuid, parameters);
        }
        else {
            this.observerService.notify(event, parameters);
        }
    };
    return Pagination;
}());
exports.Pagination = Pagination;
var PaginationService = /** @class */ (function () {
    function PaginationService(utilityService, observerService) {
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.paginations = {};
    }
    PaginationService.prototype.createPagination = function (id) {
        var uuid = this.utilityService.createID(10);
        if (angular.isDefined(id)) {
            uuid = id;
        }
        this.paginations[uuid] = new Pagination(this.observerService, uuid);
        return this.paginations[uuid];
    };
    ;
    PaginationService.prototype.getPagination = function (uuid) {
        if (!uuid)
            return;
        return this.paginations[uuid];
    };
    ;
    PaginationService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [utilityservice_1.UtilityService,
            observerservice_1.ObserverService])
    ], PaginationService);
    return PaginationService;
}());
exports.PaginationService = PaginationService;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//import pagination = require('../services/paginationservice');
//var PaginationService = pagination.PaginationService;
//'use strict';
var SWPaginationBarController = /** @class */ (function () {
    //@ngInject
    function SWPaginationBarController(paginationService) {
        this.paginationService = paginationService;
        if (angular.isUndefined(this.paginator)) {
            this.paginator = paginationService.createPagination();
        }
    }
    return SWPaginationBarController;
}());
exports.SWPaginationBarController = SWPaginationBarController;
var SWPaginationBar = /** @class */ (function () {
    //@ngInject
    function SWPaginationBar(hibachiPathBuilder, partialsPath) {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            paginator: "=?"
        };
        this.controller = SWPaginationBarController;
        this.controllerAs = "swPaginationBar";
        this.link = function (scope, element, attrs) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(partialsPath) + 'paginationbar.html';
    }
    SWPaginationBar.Factory = function () {
        var directive = function (hibachiPathBuilder, partialsPath) { return new SWPaginationBar(hibachiPathBuilder, partialsPath); };
        directive.$inject = ['hibachiPathBuilder', 'partialsPath'];
        return directive;
    };
    return SWPaginationBar;
}());
exports.SWPaginationBar = SWPaginationBar;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var observerservice_1 = __webpack_require__(8);
var FileService = /** @class */ (function () {
    function FileService($q, observerService) {
        this.observerService = observerService;
        this.fileStates = {};
        this.$q = $q;
    }
    FileService.prototype.imageExists = function (src) {
        var deferred = this.$q.defer();
        var image = new Image();
        image.onerror = function () {
            deferred.reject();
        };
        image.onload = function () {
            deferred.resolve();
        };
        image.src = src;
        return deferred.promise;
    };
    FileService.prototype.uploadFile = function (file, object, property) {
        var deferred = this.$q.defer();
        var promise = deferred.promise;
        var fileReader = new FileReader();
        fileReader.readAsDataURL(file);
        fileReader.onload = function (result) {
            object.data[property] = fileReader.result;
            deferred.resolve(fileReader.result);
        };
        fileReader.onerror = function (result) {
            deferred.reject();
            throw ("fileservice couldn't read the file");
        };
        return promise;
    };
    FileService = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject('$q')),
        __metadata("design:paramtypes", [Object, observerservice_1.ObserverService])
    ], FileService);
    return FileService;
}());
exports.FileService = FileService;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWInputController = /** @class */ (function () {
    //@ngInject
    function SWInputController($scope, $log, $hibachi, $injector, listingService, utilityService, rbkeyService, observerService, metadataService) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.metadataService = metadataService;
        this.eventAnnouncers = "";
        this.onSuccess = function () {
            _this.utilityService.setPropertyValue(_this.swForm.object, _this.propertyIdentifier, _this.value);
            if (_this.swPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swPropertyDisplay.object, _this.propertyIdentifier, _this.value);
            }
            if (_this.swfPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swfPropertyDisplay.object, _this.propertyIdentifier, _this.value);
                _this.swfPropertyDisplay.edit = false;
            }
            _this.utilityService.setPropertyValue(_this.swFormField.object, _this.propertyIdentifier, _this.value);
        };
        this.getValidationDirectives = function () {
            var spaceDelimitedList = '';
            var name = _this.propertyIdentifier;
            var form = _this.form;
            _this.$log.debug("Name is:" + name + " and form is: " + form);
            if (_this.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(_this.object, _this.propertyIdentifier)) {
                _this.object.validations.properties[name] = [];
                if ((_this.object.metaData[_this.propertyIdentifier].requiredFlag && _this.object.metaData[_this.propertyIdentifier].requiredFlag == true) || typeof _this.object.metaData[_this.propertyIdentifier].requiredFlag === 'string' && _this.object.metaData[_this.propertyIdentifier].requiredFlag.trim().toLowerCase() == "yes") {
                    _this.object.validations.properties[name].push({
                        contexts: "save",
                        required: true
                    });
                }
                if (_this.object.metaData[_this.propertyIdentifier].validationRegex) {
                    _this.object.validations.properties[name].push({
                        contexts: "save", regex: _this.object.metaData[_this.propertyIdentifier].validationRegex
                    });
                }
            }
            if (angular.isUndefined(_this.object.validations)
                || angular.isUndefined(_this.object.validations.properties)
                || angular.isUndefined(_this.object.validations.properties[_this.propertyIdentifier])) {
                return '';
            }
            var validations = _this.object.validations.properties[_this.propertyIdentifier];
            _this.$log.debug("Validations: ", validations);
            _this.$log.debug(_this.form);
            var validationsForContext = [];
            //get the form context and the form name.
            var formContext = _this.swForm.context;
            var formName = _this.swForm.name;
            _this.$log.debug("Form context is: ");
            _this.$log.debug(formContext);
            _this.$log.debug("Form Name: ");
            _this.$log.debug(formName);
            //get the validations for the current element.
            var propertyValidations = _this.object.validations.properties[name];
            //check if the contexts match.
            if (angular.isObject(propertyValidations)) {
                //if this is a procesobject validation then the context is implied
                if (angular.isUndefined(propertyValidations[0].contexts) && _this.object.metaData.isProcessObject) {
                    propertyValidations[0].contexts = _this.object.metaData.className.split('_')[1];
                }
                if (propertyValidations[0].contexts.indexOf(formContext) > -1) {
                    _this.$log.debug("Matched");
                    for (var prop in propertyValidations[0]) {
                        if (prop != "contexts" && prop !== "conditions") {
                            spaceDelimitedList += (" swvalidation" + prop.toLowerCase() + "='" + propertyValidations[0][prop] + "'");
                        }
                    }
                }
                _this.$log.debug(spaceDelimitedList);
            }
            //loop over validations that are required and create the space delimited list
            _this.$log.debug(validations);
            //get all validations related to the form context;
            _this.$log.debug(form);
            angular.forEach(validations, function (validation, key) {
                if (validation.contexts && _this.utilityService.listFind(validation.contexts.toLowerCase(), _this.swForm.context.toLowerCase()) !== -1) {
                    _this.$log.debug("Validations for context");
                    _this.$log.debug(validation);
                    validationsForContext.push(validation);
                }
            });
            return spaceDelimitedList;
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.value = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.value = _this.revertToValue;
            _this.onEvent({}, "change");
        };
        this.onEvent = function (event, eventName) {
            var customEventName = _this.swForm.name + _this.name + eventName;
            var formEventName = _this.swForm.name + eventName;
            var data = {
                event: event,
                eventName: eventName,
                form: _this.form,
                swForm: _this.swForm,
                swInput: _this,
                inputElement: $('input').first()[0]
            };
            _this.observerService.notify(customEventName, data);
            _this.observerService.notify(formEventName, data);
            _this.observerService.notify(eventName, data);
        };
        this.getTemplate = function () {
            var template = '';
            var validations = '';
            var currencyTitle = '';
            var currencyFormatter = '';
            var style = "";
            if (!_this.class) {
                _this.class = "form-control";
            }
            if (!_this.noValidate) {
                validations = _this.getValidationDirectives();
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) != undefined && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) == "currency") {
                currencyFormatter = 'sw-currency-formatter ';
                if (angular.isDefined(_this.object.data.currencyCode)) {
                    currencyFormatter = currencyFormatter + 'data-currency-code="' + _this.object.data.currencyCode + '" ';
                    currencyTitle = '<span class="s-title">' + _this.object.data.currencyCode + '</span>';
                }
            }
            var appConfig = _this.$hibachi.getConfig();
            var placeholder = '';
            if (_this.object.metaData && _this.object.metaData[_this.propertyIdentifier] && _this.object.metaData[_this.propertyIdentifier].hb_nullrbkey) {
                placeholder = _this.rbkeyService.getRBKey(_this.object.metaData[_this.propertyIdentifier].hb_nullrbkey);
            }
            if (_this.fieldType.toLowerCase() === 'json') {
                style = style += 'display:none';
            }
            var acceptedFieldTypes = ['email', 'text', 'password', 'number', 'time', 'date', 'datetime', 'json', 'file'];
            if (acceptedFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                var inputType = _this.fieldType.toLowerCase();
                if (_this.fieldType === 'time' || _this.fieldType === 'number') {
                    inputType = "text";
                }
                template = currencyTitle + '<input type="' + inputType + '" class="' + _this.class + '" ' +
                    'ng-model="swInput.value" ' +
                    'ng-disabled="swInput.editable === false" ' +
                    'ng-show="swInput.edit" ' +
                    "ng-class=\"{'form-control':swInput.inListingDisplay, 'input-xs':swInput.inListingDisplay}\"" +
                    'name="' + _this.propertyIdentifier + '" ' +
                    'placeholder="' + placeholder + '" ' +
                    validations + currencyFormatter +
                    'id="swinput' + _this.swForm.name + _this.name + '" ' +
                    'style="' + style + '"' +
                    _this.inputAttributes +
                    _this.eventAnnouncerTemplate;
            }
            var dateFieldTypes = ['date', 'datetime', 'time'];
            if (dateFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                template = template + 'datetime-picker ';
            }
            if (_this.fieldType === 'time') {
                template = template + 'data-time-only="true" date-format="' + appConfig.timeFormat.replace('tt', 'a') + '" ng-blur="swInput.pushBindings()"';
            }
            if (_this.fieldType === 'date') {
                template = template + 'data-date-only="true" future-only date-format="' + appConfig.dateFormat + '" ';
            }
            if (template.length) {
                template = template + ' />';
            }
            var actionButtons = "\n\t\t\t<a class=\"s-remove-change\"\n\t\t\t\tdata-ng-click=\"swPropertyDisplay.clear()\"\n\t\t\t\tdata-ng-if=\"swInput.edited && swInput.edit\">\n\t\t\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t\t</a>\n\n\t\t\t<!-- Revert Button -->\n\t\t\t<button class=\"btn btn-xs btn-default s-revert-btn\"\n\t\t\t\t\tdata-ng-show=\"swInput.showRevert\"\n\t\t\t\t\tdata-ng-click=\"swInput.revert()\"\n\t\t\t\t\tdata-toggle=\"popover\"\n\t\t\t\t\tdata-trigger=\"hover\"\n\t\t\t\t\tdata-content=\"{{swInput.revertText}}\"\n\t\t\t\t\tdata-original-title=\"\"\n\t\t\t\t\ttitle=\"\">\n\t\t\t\t<i class=\"fa fa-refresh\"></i>\n\t\t\t</button>\n\t\t";
            return template + actionButtons;
        };
        this.pullBindings = function () {
            var bindToControllerProps = _this.$injector.get('swInputDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swFormField && _this.swFormField[i]) {
                        _this[i] = _this.swFormField[i];
                    }
                    else if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.edit = _this.edit || true;
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
            _this.inputAttributes = _this.utilityService.replaceAll(_this.inputAttributes, "'", '"');
            _this.value = _this.utilityService.getPropertyValue(_this.object, _this.propertyIdentifier);
        };
        this.pushBindings = function () {
            _this.observerService.notify('updateBindings').then(function () { });
        };
        this.$onInit = function () {
            _this.pullBindings();
            _this.eventAnnouncersArray = _this.eventAnnouncers.split(',');
            _this.eventAnnouncerTemplate = "";
            for (var i in _this.eventAnnouncersArray) {
                var eventName = _this.eventAnnouncersArray[i];
                if (eventName.length) {
                    _this.eventAnnouncerTemplate += " ng-" + eventName + "=\"swInput.onEvent($event,'" + eventName + "')\"";
                }
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                _this.eventNameForObjectSuccess = _this.object.metaData.className.split('_')[0] + _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            else {
                _this.eventNameForObjectSuccess = _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            var eventNameForObjectSuccessID = _this.eventNameForObjectSuccess + _this.propertyIdentifier;
            var eventNameForUpdateBindings = 'updateBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForUpdateBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'updateBindings';
            }
            else {
                var eventNameForUpdateBindingsID = _this.propertyIdentifier + 'updateBindings';
            }
            var eventNameForPullBindings = 'pullBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForPullBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'pullBindings';
            }
            else {
                var eventNameForPullBindingsID = _this.propertyIdentifier + 'pullBindings';
            }
            //attach a successObserver
            if (_this.object) {
                //update bindings on save success
                _this.observerService.attach(_this.onSuccess, _this.eventNameForObjectSuccess, eventNameForObjectSuccessID);
                //update bindings manually
                _this.observerService.attach(_this.onSuccess, eventNameForUpdateBindings, eventNameForUpdateBindingsID);
                //pull bindings from higher binding level manually
                _this.observerService.attach(_this.pullBindings, eventNameForPullBindings, eventNameForPullBindingsID);
            }
            _this.$scope.$on("$destroy", function () {
                _this.observerService.detachById(eventNameForUpdateBindings);
                _this.observerService.detachById(eventNameForUpdateBindingsID);
            });
        };
    }
    return SWInputController;
}());
var SWInput = /** @class */ (function () {
    //ngInject
    function SWInput($compile, $timeout, $parse, fileService) {
        var _this = this;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.$parse = $parse;
        this.fileService = fileService;
        this.restrict = "E";
        this.require = {
            swForm: "?^swForm",
            form: "?^form",
            swFormField: "?^swFormField",
            swPropertyDisplay: "?^swPropertyDisplay",
            swfPropertyDisplay: "?^swfPropertyDisplay"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            inListingDisplay: "=?",
            listingID: "=?",
            pageRecordIndex: "=?",
            propertyDisplayID: "=?",
            initialValue: "=?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            binaryFileTarget: "@?",
            rawFileTarget: "@?",
            reverted: "=?",
            revertToValue: "=?",
            showRevert: "=?",
            inputAttributes: "@?",
            type: "@?",
            eventAnnouncers: "@?",
            context: "@?"
        };
        this.controller = SWInputController;
        this.controllerAs = "swInput";
        this.link = function (scope, element, attr) {
            if (scope.swInput.type === 'file') {
                if (angular.isUndefined(scope.swInput.object.data[scope.swInput.rawFileTarget])) {
                    scope.swInput.object[scope.swInput.rawFileTarget] = "";
                    scope.swInput.object.data[scope.swInput.rawFileTarget] = "";
                }
                var model = _this.$parse("swInput.object.data[swInput.rawFileTarget]");
                var modelSetter = model.assign;
                element.bind("change", function (e) {
                    var fileToUpload = (e.srcElement || e.target).files[0];
                    scope.$apply(function () {
                        modelSetter(scope, fileToUpload);
                    }, function () {
                        throw ("swinput couldn't apply the file to scope");
                    });
                    _this.$timeout(function () {
                        _this.fileService.uploadFile(fileToUpload, scope.swInput.object, scope.swInput.binaryFileTarget)
                            .then(function (result) {
                            scope.swInput.object[scope.swInput.property] = fileToUpload;
                            scope.swInput.onEvent(e, "change");
                        }, function () {
                            //error	notify user
                        });
                    });
                });
            }
            //renders the template and compiles it
            element.html(scope.swInput.getTemplate());
            _this.$compile(element.contents())(scope);
        };
    }
    SWInput.Factory = function () {
        var directive = function ($compile, $timeout, $parse, fileService) { return new SWInput($compile, $timeout, $parse, fileService); };
        directive.$inject = [
            '$compile',
            '$timeout',
            '$parse',
            'fileService'
        ];
        return directive;
    };
    return SWInput;
}());
exports.SWInput = SWInput;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**********************************************************************************************
 **********************************************************************************************
 **********************************************************************************************
 **		___________________________________________
 ** 	Form Field - type have the following options (This is for the frontend so it can be modified):
 **
 **		checkbox			|	As a single checkbox this doesn't require any options, but it will create a hidden field for you so that the key gets submitted even when not checked.  The value of the checkbox will be 1
 **		checkboxgroup		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		file				|	No value can be passed in
 **		multiselect			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		password			|	No Value can be passed in
 **		radiogroup			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		select      		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		text				|	Simple Text Field
 **		textarea			|	Simple Textarea
 **		yesno				|	This is used by booleans and flags to create a radio group of Yes and No
 **		submit				|	submit button to post these properties back to the server.
 **		------------------------------------------------------------------------------------------------------
 **
 **		attr.valueObject" type="any" default="" />
 **		attr.valueObjectProperty" type="string" default="" />
 **
 **		General Settings that end up getting applied to the value object
 **		attr.type" type="string" default="text"
 **		attr.name" type="string" default=""
 **		attr.class" type="string" default=""
 **		attr.value" type="any" default=""
 **		attr.valueOptions" type="array" default="#arrayNew(1)#"		<!--- Used for select, checkbox group, multiselect --->
 **		attr.fieldAttributes" type="string" default=""
 **
 *********************************************************************************************
 *********************************************************************************************
 *********************************************************************************************
 */
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
    * Property Display Controller handles the logic for this directive.
    */
var SWFFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFFormFieldController($scope, $element, $compile, utilityService) {
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
        this.utilityService = utilityService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
    }
    /**
        * Handles the logic for the frontend version of the property display.
        */
    SWFFormFieldController.$inject = ['$scope', '$element', '$compile', 'utilityService'];
    return SWFFormFieldController;
}());
/**
    * This class handles configuring formFields for use in process forms on the front end.
    */
var SWFFormField = /** @class */ (function () {
    function SWFFormField(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "E";
        this.require = { swfPropertyDisplayCtrl: "^?swfPropertyDisplay", form: "^?form" };
        this.controller = SWFFormFieldController;
        this.controllerAs = "swfFormField";
        this.scope = {};
        this.bindToController = {
            propertyDisplay: "=?",
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            type: "@?"
        };
        this.link = function (scope, element, attrs, formController, transcludeFn) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'swfformfield.html';
    }
    /**
        * Handles injecting the partials path into this class
        */
    SWFFormField.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFFormField(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFFormField;
}());
exports.SWFFormField = SWFFormField;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Form Controller handles the logic for this directive.
*/
var SWFormController = /** @class */ (function () {
    /**
     * This controller handles most of the logic for the swFormDirective when more complicated self inspection is needed.
     */
    // @ngInject
    function SWFormController($scope, $element, $hibachi, $http, $timeout, observerService, $rootScope, entityService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$hibachi = $hibachi;
        this.$http = $http;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.entityService = entityService;
        this.utilityService = utilityService;
        this.eventsObj = [];
        this.formData = {};
        this.parseObjectErrors = true;
        this.completedActions = 0;
        this.$onInit = function () {
            if (_this.object && _this.parseObjectErrors) {
                _this.$timeout(function () {
                    _this.parseErrors(_this.object.errors);
                });
            }
        };
        this.isObject = function () {
            return (angular.isObject(_this.object));
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.name &&
                event.event.keyCode == 13) {
                _this.submit(event.swForm.action);
            }
        };
        /** create the generic submit function */
        this.submit = function (actions) {
            _this.actions = actions || _this.action;
            console.log('actions!', _this.actions);
            _this.clearErrors();
            _this.formData = _this.getFormData() || "";
            _this.doActions(_this.actions);
        };
        //array or comma delimited
        this.doActions = function (actions) {
            if (angular.isArray(actions)) {
                _this.completedActions = 0;
                for (var _i = 0, _a = actions; _i < _a.length; _i++) {
                    var action = _a[_i];
                    _this.doAction(action);
                }
            }
            else if (angular.isString(actions)) {
                _this.doAction(actions);
            }
            else {
                throw ("Unknown type of action exception");
            }
        };
        // /** iterates through the factory submitting data */
        this.doAction = function (action) {
            if (!action) {
                throw "Action not defined on form";
            }
            _this.formData = _this.formData || {};
            //
            var request = _this.$rootScope.hibachiScope.doAction(action, _this.formData)
                .then(function (result) {
                if (!result)
                    return;
                if (result.successfulActions.length) {
                    _this.completedActions++;
                }
                if ((angular.isArray(_this.actions) && _this.completedActions === _this.actions.length)
                    ||
                        (!angular.isArray(_this.actions)) && result.successfulActions.length) {
                    //if we have an array of actions and they're all complete, or if we have just one successful action
                    if (_this.sRedirectUrl) {
                        _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);
                    }
                }
                _this.object.forms[_this.name].$setSubmitted(true);
                if (result.errors) {
                    _this.parseErrors(result.errors);
                    if (_this.fRedirectUrl) {
                        _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);
                    }
                }
            });
        };
        /****
             * Handle parsing through the server errors and injecting the error text for that field
            * If the form only has a submit, then simply call that function and set errors.
            ***/
        this.parseErrors = function (errors) {
            if (angular.isDefined(errors) && errors) {
                angular.forEach(errors, function (val, key) {
                    var primaryElement = _this.$element.find("[error-for='" + key + "']");
                    _this.$timeout(function () {
                        /**
                        if an error class has been attached to this form
                        by its children propertydisplay or errorDisplay, use it.
                        Otherwise, just add a generic 'error' class
                        to the error message **/
                        var errorClass = _this.errorClass ? _this.errorClass : "error";
                        errors[key].forEach(function (error) {
                            primaryElement.append("<div class='" + errorClass + "' name='" + key + "Error'>" + error + "</div>");
                        });
                    }, 0);
                }, _this);
            }
        };
        /** find and clear all errors on form */
        this.clearErrors = function () {
            /** clear all form errors on submit. */
            _this.$timeout(function () {
                var errorElements = _this.$element.find("[error-for]");
                errorElements.empty();
            }, 0);
        };
        this.eventsHandler = function (params) {
            //this will call any form specific functions such as hide,show,refresh,update or whatever else you later add
            for (var e in params.events) {
                if (angular.isDefined(params.events[e].value) && params.events[e].value == _this.name.toLowerCase()) {
                    if (params.events[e].name && _this[params.events[e].name]) {
                        _this[params.events[e].name](params.events[e].value);
                    }
                }
            }
        };
        /** hides this directive on event */
        this.hide = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.hide();
            }
        };
        /** shows this directive on event */
        this.show = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.show();
            }
        };
        /** refreshes this directive on event */
        this.refresh = function (params) {
            //stub
        };
        /** updates this directive on event */
        this.update = function (params) {
            //stub
        };
        /** clears this directive on event */
        this.clear = function (params) {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$viewValue) {
                        _this.object.forms[_this.name][key].$setViewValue("");
                        _this.object.forms[_this.name][key].$render();
                    }
                }
                else {
                    val = "";
                }
            });
        };
        /** returns all the data from the form by iterating the form elements */
        this.getFormData = function () {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$modelValue != undefined) {
                        val = _this.object.forms[_this.name][key].$modelValue;
                    }
                    else if (_this.object.forms[_this.name][key].$viewValue != undefined) {
                        val = _this.object.forms[_this.name][key].$viewValue;
                    }
                    else if (_this.object.forms[_this.name][key].$dirty) {
                        val = "";
                    }
                    /** Check for form elements that have a name that doesn't start with $ */
                    if (angular.isString(val) || angular.isNumber(val) || typeof val == 'boolean') {
                        _this.formData[key] = val;
                    }
                    if (val.$modelValue != undefined) {
                        _this.formData[key] = val.$modelValue;
                    }
                    else if (val.$viewValue != undefined) {
                        _this.formData[key] = val.$viewValue;
                    }
                }
                else {
                }
            });
            return _this.formData || "";
        };
        /** only use if the developer has specified these features with isProcessForm */
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        if (angular.isUndefined(this.isDirty)) {
            this.isDirty = false;
        }
        //object can be either an instance or a string that will become an instance
        if (angular.isString(this.object)) {
            var objectNameArray = this.object.split('_');
            this.entityName = objectNameArray[0];
            //if the object name array has two parts then we can infer that it is a process object
            if (objectNameArray.length > 1) {
                this.context = this.context || objectNameArray[1];
                this.isProcessForm = true;
            }
            else {
                this.context = this.context || 'save';
                this.isProcessForm = false;
            }
            //convert the string to an object
            this.$timeout(function () {
                _this.object = _this.$hibachi['new' + _this.object]();
            });
        }
        else {
            if (this.object && this.object.metaData) {
                this.isProcessForm = this.object.metaData.isProcessObject;
                this.entityName = this.object.metaData.className.split('_')[0];
                if (this.isProcessForm) {
                    this.context = this.context || this.object.metaData.className.split('_')[1];
                }
                else {
                    this.context = this.context || 'save';
                }
            }
        }
        //
        this.context = this.context || this.name;
        if (this.isProcessForm) {
            /** Cart is an alias for an Order */
            if (this.entityName == "Order") {
                this.entityName = "Cart";
            }
            ;
        }
        if (this.submitOnEnter) {
            this.eventListeners = this.eventListeners || {};
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                this.observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWFormController;
}());
exports.SWFormController = SWFormController;
var SWForm = /** @class */ (function () {
    // @ngInject
    function SWForm(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.templateUrl = "";
        this.transclude = true;
        this.restrict = "E";
        this.controller = SWFormController;
        this.controllerAs = "swForm";
        this.scope = {};
        /**
         * Binds all of our variables to the controller so we can access using this
         */
        this.bindToController = {
            name: "@?",
            context: "@?",
            entityName: "@?",
            hiddenFields: "=?",
            action: "@?",
            actions: "@?",
            formClass: "@?",
            formData: "=?",
            errorClass: '@?',
            object: "=?",
            onSuccess: "@?",
            onError: "@?",
            hideUntil: "@?",
            isDirty: "=?",
            inputAttributes: "@?",
            eventListeners: "=?",
            eventAnnouncers: "@",
            submitOnEnter: "@",
            parseObjectErrors: "@?",
            sRedirectUrl: "@?",
            fRedirectUrl: "@?"
        };
        /**
            * Sets the context of this form
            */
        this.link = function (scope, element, attrs, controller) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "form.html";
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWForm;
}());
exports.SWForm = SWForm;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Form Controller handles the logic for this directive.
*/
var SWFFormController = /** @class */ (function () {
    // @ngInject
    function SWFFormController($rootScope, $scope, $timeout, $hibachi, $element, validationService, hibachiValidationService) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.$element = $element;
        this.validationService = validationService;
        this.hibachiValidationService = hibachiValidationService;
        this.$onInit = function () {
        };
        this.submitForm = function () {
            //example of entityName Account_Login
            if (_this.form.$valid) {
                _this.$rootScope.slatwall.doAction(_this.method, _this.ngModel.$modelValue).then(function (result) {
                    if (!result)
                        return;
                    if (result.successfulActions.length) {
                        //if we have an array of actions and they're all complete, or if we have just one successful action
                        if (_this.sRedirectUrl) {
                            _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);
                        }
                    }
                    if (result.errors) {
                        if (_this.fRedirectUrl) {
                            _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);
                        }
                    }
                });
            }
            else {
                _this.form.$setSubmitted(true);
            }
        };
    }
    return SWFFormController;
}());
exports.SWFFormController = SWFFormController;
var SWFForm = /** @class */ (function () {
    // @ngInject
    function SWFForm() {
        this.require = {
            form: '?^form',
            ngModel: '?^ngModel'
        };
        this.priority = 1000;
        this.restrict = "A";
        //needs to have false scope to not interfere with form controller
        this.scope = true;
        /**
         * Binds all of our variables to the controller so we can access using this
         */
        this.bindToController = {
            method: "@?",
            sRedirectUrl: "@?",
            fRedirectUrl: "@?",
        };
        this.controller = SWFFormController;
        this.controllerAs = "swfForm";
        /**
            * Sets the context of this form
            */
        this.link = function (scope, element, attrs, formController) {
        };
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWFForm.Factory = function () {
        var directive = function () { return new SWFForm(); };
        directive.$inject = [];
        return directive;
    };
    return SWFForm;
}());
exports.SWFForm = SWFForm;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldController($injector, $scope, $timeout, $log, $hibachi, observerService, utilityService) {
        var _this = this;
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.formFieldChanged = function (option) {
            if (_this.fieldType === 'yesno') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
            else if (_this.fieldType == 'checkbox') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
            }
            else if (_this.fieldType === 'select') {
                _this.$log.debug('formfieldchanged');
                _this.$log.debug(option);
                if (_this.selectType === 'object' && typeof _this.object.data[_this.propertyIdentifier].$$getIDName == "function") {
                    _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = option.value;
                    if (angular.isDefined(_this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()])) {
                        _this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()].$dirty = true;
                    }
                }
                else if (_this.selectType === 'string' && option && option.value != null) {
                    _this.object.data[_this.propertyIdentifier] = option.value;
                    _this.form[_this.propertyIdentifier].$dirty = true;
                }
                _this.observerService.notify(_this.object.metaData.className + _this.propertyIdentifier.charAt(0).toUpperCase() + _this.propertyIdentifier.slice(1) + 'OnChange', option);
            }
            else {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
        };
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormFieldDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            var tempObject = [];
            if (typeof (_this.optionValues) == "string") {
                var temp = _this.optionValues.split(',');
                for (var _i = 0, temp_1 = temp; _i < temp_1.length; _i++) {
                    var value = temp_1[_i];
                    tempObject.push({
                        "name": value,
                        "value": value
                    });
                }
                _this.optionValues = tempObject;
            }
            _this.edit = _this.edit || true;
            _this.fieldType = _this.fieldType || "text";
            if (_this.fieldType === 'yesno') {
                _this.yesnoStrategy();
            }
            if (_this.fieldType === 'select') {
                _this.selectStrategy();
            }
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.selectStrategy = function () {
            //this is specific to the admin because it implies loading of options via api
            if (angular.isDefined(_this.object.metaData) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier]) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier].fieldtype)) {
                _this.selectType = 'object';
                _this.$log.debug('selectType:object');
            }
            else {
                _this.selectType = 'string';
                _this.$log.debug('selectType:string');
            }
            _this.getOptions();
        };
        this.getOptions = function () {
            if (angular.isUndefined(_this.options)) {
                if (!_this.optionsArguments || !_this.optionsArguments.hasOwnProperty('propertyIdentifier')) {
                    _this.optionsArguments = {
                        'propertyIdentifier': _this.propertyIdentifier
                    };
                }
                var optionsPromise = _this.$hibachi.getPropertyDisplayOptions(_this.object.metaData.className, _this.optionsArguments);
                optionsPromise.then(function (value) {
                    _this.options = value.data;
                    if (_this.selectType === 'object') {
                        if (angular.isUndefined(_this.object.data[_this.propertyIdentifier])) {
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                        }
                        if (_this.object.data[_this.propertyIdentifier].$$getID() === '') {
                            _this.$log.debug('no ID');
                            _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                            _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[0].value;
                        }
                        else {
                            var found = false;
                            for (var i in _this.options) {
                                if (angular.isObject(_this.options[i].value)) {
                                    _this.$log.debug('isObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                else {
                                    _this.$log.debug('notisObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier].$$getID()) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                                }
                            }
                        }
                    }
                    else if (_this.selectType === 'string') {
                        if (_this.object.data[_this.propertyIdentifier] !== null) {
                            for (var i in _this.options) {
                                if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                    _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                }
                            }
                        }
                        else {
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
                        }
                    }
                });
            }
        };
        this.yesnoStrategy = function () {
            //format value
            _this.selectedRadioFormName = _this.utilityService.createID(26);
            _this.object.data[_this.propertyIdentifier] = (_this.object.data[_this.propertyIdentifier]
                && _this.object.data[_this.propertyIdentifier].length
                && _this.object.data[_this.propertyIdentifier].toLowerCase().trim() === 'yes') || _this.object.data[_this.propertyIdentifier] == 1 ? 1 : 0;
            _this.options = [
                {
                    name: 'Yes',
                    value: 1
                },
                {
                    name: 'No',
                    value: 0
                }
            ];
            if (angular.isDefined(_this.object.data[_this.propertyIdentifier])) {
                for (var i in _this.options) {
                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                        _this.selected = _this.options[i];
                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                    }
                }
            }
            else {
                _this.selected = _this.options[0];
                _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
            }
            _this.$timeout(function () {
                _this.form[_this.propertyIdentifier].$dirty = _this.isDirty;
            });
        };
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
    }
    return SWFormFieldController;
}());
exports.SWFormFieldController = SWFormFieldController;
var SWFormField = /** @class */ (function () {
    //@ngInject
    function SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "EA";
        this.require = {
            swfPropertyDisplay: "^?swfPropertyDisplay",
            swPropertyDisplay: "^?swPropertyDisplay",
            form: "^?form",
            swForm: '^?swForm'
        };
        this.controller = SWFormFieldController;
        this.controllerAs = "swFormField";
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?", property: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            fieldType: "@?", type: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            inListingDisplay: "=?",
            inputAttributes: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            isDirty: "=?",
            onChange: "=?",
            editable: "=?",
            eventListeners: "=?",
            context: "@?",
            eventAnnouncers: "@"
        };
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'formfield.html';
    }
    SWFormField.Factory = function () {
        var directive = function ($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$templateCache',
            '$window',
            '$hibachi',
            'formService',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormField;
}());
exports.SWFormField = SWFormField;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFormFieldFileController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldFileController(formService) {
        this.formService = formService;
        if (this.propertyDisplay.isDirty == undefined)
            this.propertyDisplay.isDirty = false;
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
        //this.formService.setPristinePropertyValue(this.propertyDisplay.property,this.propertyDisplay.object.data[this.propertyDisplay.property]);
    }
    return SWFormFieldFileController;
}());
var SWFormFieldFile = /** @class */ (function () {
    function SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.controller = SWFormFieldFileController;
        this.controllerAs = "swFormFieldFile";
        this.scope = true;
        this.bindToController = {
            propertyDisplay: "="
        };
        //@ngInject
        this.link = function (scope, element, attr, formController) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "file.html";
    }
    SWFormFieldFile.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldFile;
}());
exports.SWFormFieldFile = SWFormFieldFile;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldJsonController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldJsonController(formService) {
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
    }
    return SWFormFieldJsonController;
}());
var SWFormFieldJson = /** @class */ (function () {
    function SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.scope = true;
        this.controller = SWFormFieldJsonController;
        this.bindToController = {
            propertyDisplay: "=?"
        };
        this.controllerAs = "ctrl";
        this.templateUrl = "";
        this.link = function (scope, element, attrs, formController) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "json.html";
    }
    SWFormFieldJson.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldJson;
}());
exports.SWFormFieldJson = SWFormFieldJson;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldSearchSelect = /** @class */ (function () {
    function SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) {
        return {
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'search-select.html',
            require: "^form",
            restrict: 'E',
            scope: {
                propertyDisplay: "="
            },
            link: function (scope, element, attr, formController) {
                //set up selectionOptions
                scope.selectionOptions = {
                    value: [],
                    $$adding: false
                };
                //match in matches track by
                //function to set state of adding new item
                scope.setAdding = function (isAdding) {
                    scope.isAdding = isAdding;
                    scope.showAddBtn = false;
                };
                scope.selectedOption = {};
                scope.showAddBtn = false;
                var propertyMetaData = scope.propertyDisplay.object.$$getMetaData(scope.propertyDisplay.property);
                //create basic
                var object = $hibachi.newEntity(propertyMetaData.cfc);
                //				scope.propertyDisplay.template = '';
                //				//check for a template
                //				//rules are tiered: check if an override is specified at scope.template, check if the cfc name .html exists, use
                //				var templatePath = coreFormPartialsPath + 'formfields/searchselecttemplates/';
                //				if(angular.isUndefined(scope.propertyDisplay.template)){
                //					var templatePromise = $http.get(templatePath+propertyMetaData.cfcProperCase+'.html',function(){
                //						$log.debug('template');
                //						scope.propertyDisplay.template = templatePath+propertyMetaData.cfcProperCase+'.html';
                //					},function(){
                //						scope.propertyDisplay.template = templatePath+'index.html';
                //						$log.debug('template');
                //						$log.debug(scope.propertyDisplay.template);
                //					});
                //				}
                //set up query function for finding related object
                scope.cfcProperCase = propertyMetaData.cfcProperCase;
                scope.selectionOptions.getOptionsByKeyword = function (keyword) {
                    var filterGroupsConfig = '[' +
                        ' {  ' +
                        '"filterGroup":[  ' +
                        '{' +
                        ' "propertyIdentifier":"_' + scope.cfcProperCase.toLowerCase() + '.' + scope.cfcProperCase + 'Name",' +
                        ' "comparisonOperator":"like",' +
                        ' "ormtype":"string",' +
                        ' "value":"%' + keyword + '%"' +
                        '  }' +
                        ' ]' +
                        ' }' +
                        ']';
                    return $hibachi.getEntity(propertyMetaData.cfc, { filterGroupsConfig: filterGroupsConfig.trim() })
                        .then(function (value) {
                        $log.debug('typesByKeyword');
                        $log.debug(value);
                        scope.selectionOptions.value = value.pageRecords;
                        var myLength = keyword.length;
                        if (myLength > 0) {
                            scope.showAddBtn = true;
                        }
                        else {
                            scope.showAddBtn = false;
                        }
                        return scope.selectionOptions.value;
                    });
                };
                var propertyPromise = scope.propertyDisplay.object['$$get' + propertyMetaData.nameCapitalCase]();
                propertyPromise.then(function (data) {
                });
                //set up behavior when selecting an item
                scope.selectItem = function ($item, $model, $label) {
                    scope.$item = $item;
                    scope.$model = $model;
                    scope.$label = $label;
                    scope.showAddBtn = false; //turns off the add btn on select
                    //angular.extend(inflatedObject.data,$item);
                    object.$$init($item);
                    $log.debug('select item');
                    $log.debug(object);
                    scope.propertyDisplay.object['$$set' + propertyMetaData.nameCapitalCase](object);
                };
                //				if(angular.isUndefined(scope.propertyDipslay.object[scope.propertyDisplay.property])){
                //					$log.debug('getmeta');
                //					$log.debug(scope.propertyDisplay.object.metaData[scope.propertyDisplay.property]);
                //
                //					//scope.propertyDipslay.object['$$get'+]
                //				}
                //
                //				scope.propertyDisplay.object.data[scope.propertyDisplay.property].$dirty = true;
            }
        };
    }
    SWFormFieldSearchSelect.Factory = function () {
        var directive = function ($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldSearchSelect;
}());
exports.SWFormFieldSearchSelect = SWFormFieldSearchSelect;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormRegistrar = /** @class */ (function () {
    //@ngInject
    function SWFormRegistrar(formService) {
        return {
            restrict: 'E',
            require: ["^form", "^swForm"],
            scope: {
                object: "=?",
                context: "@?",
                name: "@?",
                isDirty: "=?"
            },
            link: function (scope, element, attrs, formController, transclude) {
                /*add form info at the form level*/
                scope.$watch(function () { return formController[0]; }, function () {
                    formController[1].formCtrl = formController[0];
                });
                formController[0].$$swFormInfo = {
                    object: scope.object,
                    context: scope.context || 'save',
                    name: scope.name
                };
                var makeRandomID = function makeid(count) {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i = 0; i < count; i++)
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    return text;
                };
                if (scope.isDirty) {
                    formController[0].autoDirty = true;
                }
                scope.form = formController[0];
                /*register form with service*/
                formController[0].name = scope.name;
                formController[0].$setDirty();
                formService.setForm(formController[0]);
                /*register form at object level*/
                if (!angular.isDefined(scope.object.forms)) {
                    scope.object.forms = {};
                }
                scope.object.forms[scope.name] = formController[0];
            }
        };
    }
    SWFormRegistrar.Factory = function () {
        var directive = function (formService) { return new SWFormRegistrar(formService); };
        directive.$inject = [
            'formService'
        ];
        return directive;
    };
    return SWFormRegistrar;
}());
exports.SWFormRegistrar = SWFormRegistrar;
// 	angular.module('slatwalladmin').directive('swFormRegistrar',[ 'formService', 'partialsPath', (formService, partialsPath) => new swFormRegistrar(formService, partialsPath)]);
// }


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWErrorDisplayController = /** @class */ (function () {
    //@ngInject
    function SWErrorDisplayController($injector) {
        this.$injector = $injector;
        this.$injector = $injector;
    }
    SWErrorDisplayController.prototype.$onInit = function () {
        /**
         if a css error class was passed to propertyDisplay, attach to form
         which will apply it to the dynamically generateddiv that contains
         the error message
        **/
        if (this.swfPropertyDisplay && this.swfPropertyDisplay.errorClass) {
            this.swForm.errorClass = this.swfPropertyDisplay.errorClass;
        }
        var bindToControllerProps = this.$injector.get('swErrorDisplayDirective')[0].bindToController;
        for (var i in bindToControllerProps) {
            if (!this[i] && i !== 'name') {
                if (!this[i] && this.swPropertyDisplay && this.swPropertyDisplay[i]) {
                    this[i] = this.swPropertyDisplay[i];
                }
                else if (!this[i] && this.swfPropertyDisplay && this.swfPropertyDisplay[i]) {
                    this[i] = this.swfPropertyDisplay[i];
                }
                else if (!this[i] && this.swForm && this.swForm[i]) {
                    this[i] = this.swForm[i];
                }
            }
        }
        this.property = this.property || this.propertyIdentifier;
        this.propertyIdentifier = this.propertyIdentifier || this.property;
        if (!this.name && this.property) {
            this.name = this.property;
        }
    };
    return SWErrorDisplayController;
}());
exports.SWErrorDisplayController = SWErrorDisplayController;
var SWErrorDisplay = /** @class */ (function () {
    // @ngInject
    function SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.require = {
            swForm: "^?swForm",
            form: "^?form",
            swPropertyDisplay: "^?swPropertyDisplay",
            swfPropertyDisplay: "^?swfPropertyDisplay"
        };
        this.restrict = "E";
        this.controller = SWErrorDisplayController;
        this.controllerAs = "swErrorDisplay";
        this.scope = {};
        this.bindToController = {
            form: "=?",
            name: "@?",
            property: "@?",
            propertyIdentifier: "@?",
            errorClass: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "errordisplay.html";
    }
    SWErrorDisplay.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWErrorDisplay;
}());
exports.SWErrorDisplay = SWErrorDisplay;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddressFormController = /** @class */ (function () {
    //@ngInject
    function SWAddressFormController($scope, $log, observerService, $rootScope) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.showAddressBookSelect = false;
        this.showCountrySelect = true;
        this.showSubmitButton = true;
        this.showCloseButton = true;
        this.param = "?slataction=";
        this.showAlerts = "true";
        this.getAction = function () {
            if (!angular.isDefined(_this.action)) {
                _this.action = "addAddress";
            }
            if (_this.action.indexOf(":") != -1 && _this.action.indexOf(_this.param) == -1) {
                _this.action = _this.param + _this.action;
            }
            return _this.action;
        };
        this.hasField = function (field) {
            if (_this.fieldList.indexOf(field) != -1) {
                return true;
            }
            return false;
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.addressName &&
                event.event.keyCode == 13) {
                event.swForm.submit(event.swForm.action);
            }
        };
        //if exists, just name it slatwall.
        if (angular.isDefined(this.slatwallScope)) {
            this.slatwall = this.slatwallScope;
        }
        if (this.fieldList == undefined) {
            this.fieldList = "countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode";
        }
        if (this.showAddressBookSelect == undefined) {
            this.showAddressBookSelect = false;
        }
        if (this.showCountrySelect == undefined) {
            this.showCountrySelect = true;
        }
        if (this.action == undefined) {
            this.showSubmitButton = false;
        }
        if ($rootScope.slatwall && !$scope.slatwall) {
            $scope.slatwall = $rootScope.slatwall;
        }
        var addressName = this.addressName;
        if (this.address) {
            this.address.getData = function () {
                var formData = _this.address || {};
                var form = _this.address.forms[addressName];
                for (var key_1 in form) {
                    var val = form[key_1];
                    if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                        if (val.$modelValue) {
                            val = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            val = val.$viewValue;
                        }
                        else {
                            val = "";
                        }
                        if (angular.isString(val)) {
                            formData[key_1] = val;
                        }
                        if (val.$modelValue) {
                            formData[key_1] = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            formData[key_1] = val.$viewValue;
                        }
                    }
                }
                return formData || "";
            };
        }
        if (!this.eventListeners) {
            this.eventListeners = {};
        }
        if (this.submitOnEnter) {
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWAddressFormController;
}());
exports.SWAddressFormController = SWAddressFormController;
var SWAddressForm = /** @class */ (function () {
    // @ngInject
    function SWAddressForm(coreFormPartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.transclude = true;
        this.controller = SWAddressFormController;
        this.controllerAs = 'SwAddressForm';
        this.bindToController = {
            action: '@',
            actionText: '@',
            context: '@',
            customPartial: '@',
            slatwallScope: '=',
            address: "=",
            id: "@?",
            fieldNamePrefix: "@",
            fieldList: "@",
            fieldClass: "@",
            fulfillmentIndex: "@",
            tabIndex: "@",
            addressName: "@",
            showAddressBookSelect: "@",
            showCountrySelect: "@",
            showSubmitButton: "@",
            showCloseButton: "@",
            showAlerts: "@",
            eventListeners: "=?",
            submitOnEnter: "@",
            stateOptions: "=?"
        };
        this.scope = {};
        this.templateUrl = function (elem, attrs) {
            if (attrs.customPartial) {
                if (attrs.customPartial === "true") {
                    return hibachiConfig.customPartialsPath + "addressform.html";
                }
                else {
                    return hibachiConfig.customPartialsPath + attrs.customPartial;
                }
            }
            else {
                return _this.hibachiPathBuilder.buildPartialsPath(_this.coreFormPartialsPath) + "addressform.html";
            }
        };
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWAddressForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWAddressForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWAddressForm;
}());
exports.SWAddressForm = SWAddressForm;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var swpropertydisplay_1 = __webpack_require__(53);
var SWFPropertyDisplayController = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplayController, _super);
    //@ngInject
    function SWFPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService) {
        var _this = _super.call(this, $filter, utilityService, $injector, metadataService, observerService) || this;
        _this.$filter = $filter;
        _this.utilityService = utilityService;
        _this.$injector = $injector;
        _this.metadataService = metadataService;
        _this.observerService = observerService;
        _this.edit = true;
        return _this;
    }
    return SWFPropertyDisplayController;
}(swpropertydisplay_1.SWPropertyDisplayController));
exports.SWFPropertyDisplayController = SWFPropertyDisplayController;
var SWFPropertyDisplay = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplay, _super);
    //@ngInject
    function SWFPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = _super.call(this, $compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) || this;
        _this.$compile = $compile;
        _this.scopeService = scopeService;
        _this.coreFormPartialsPath = coreFormPartialsPath;
        _this.hibachiPathBuilder = hibachiPathBuilder;
        _this.swpropertyPartialPath = swpropertyPartialPath;
        _this.controller = SWFPropertyDisplayController;
        _this.controllerAs = "swfPropertyDisplay";
        _this.scope = {};
        _this.link = function (scope, element, attrs) {
        };
        return _this;
    }
    return SWFPropertyDisplay;
}(swpropertydisplay_1.SWPropertyDisplay));
exports.SWFPropertyDisplay = SWFPropertyDisplay;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWFormSubscriberController = /** @class */ (function () {
    //@ngInject
    function SWFormSubscriberController($log, $compile, $hibachi, utilityService, rbkeyService, $injector) {
        var _this = this;
        this.$log = $log;
        this.$compile = $compile;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.$injector = $injector;
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormSubscriberDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.property = _this.property || _this.propertyIdentifier;
            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
            _this.type = _this.type || _this.fieldType;
            _this.fieldType = _this.fieldType || _this.type;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.editing = _this.editing || true;
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
        };
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.$injector = $injector;
    }
    return SWFormSubscriberController;
}());
var SWFormSubscriber = /** @class */ (function () {
    //ngInject
    function SWFormSubscriber() {
        this.restrict = "A";
        this.require = {
            swForm: "?^swForm",
            form: "?^form"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            inputAttributes: "@?",
            type: "@?",
            editing: "=?"
        };
        this.controller = SWFormSubscriberController;
        this.controllerAs = "SWFormSubscriber";
        this.link = function (scope, element, attr) {
        };
    }
    SWFormSubscriber.Factory = function () {
        var directive = function () { return new SWFormSubscriber(); };
        directive.$inject = [];
        return directive;
    };
    return SWFormSubscriber;
}());
exports.SWFormSubscriber = SWFormSubscriber;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * This validate directive will look at the current element, figure out the context (save, edit, delete) and
 * validate based on that context as defined in the validation properties object.
 */
// 'use strict';
// angular.module('slatwalladmin').directive('swValidate',
Object.defineProperty(exports, "__esModule", { value: true });
// [ '$log','$hibachi', function($log, $hibachi) {
var SWValidate = /** @class */ (function () {
    function SWValidate($log, $hibachi) {
        return {
            restrict: "A",
            require: '^ngModel',
            link: function (scope, elem, attr, ngModel) {
                //Define our contexts and validation property enums.
                var ContextsEnum = {
                    SAVE: { name: "save", value: 0 },
                    DELETE: { name: "delete", value: 1 },
                    EDIT: { name: "edit", value: 2 }
                };
                var ValidationPropertiesEnum = {
                    REGEX: { name: "regex", value: 0 },
                    MIN_VALUE: { name: "minValue", value: 1 },
                    MAX_VALUE: { name: "maxValue", value: 2 },
                    EQ: { name: "eq", value: 3 },
                    NEQ: { name: "neq", value: 4 },
                    UNIQUE: { name: "unique", value: 5 },
                    LTE: { name: "lte", value: 6 },
                    GTE: { name: "gte", value: 7 },
                    MIN_LENGTH: { name: "minLength", value: 8 },
                    MAX_LENGTH: { name: "maxLength", value: 9 },
                    DATA_TYPE: { name: "dataType", value: 10 },
                    REQUIRED: { name: "required", value: 11 }
                };
                scope.validationPropertiesEnum = ValidationPropertiesEnum;
                scope.contextsEnum = ContextsEnum;
                var myCurrentContext = scope.contextsEnum.SAVE; //We are only checking the save context right now.
                var contextNamesArray = getNamesFromObject(ContextsEnum); //Convert for higher order functions.
                var validationPropertiesArray = getNamesFromObject(ValidationPropertiesEnum); //Convert for higher order functions.
                var validationObject = scope.propertyDisplay.object.validations.properties; //Get the scope validation object.
                var errors = scope.propertyDisplay.errors;
                var errorMessages = [];
                var failFlag = 0;
                /**
                * Iterates over the validation object looking for the current elements validations, maps that to a validation function list
                * and calls those validate functions. When a validation fails, an error is set, the elements border turns red.
                */
                function validate(name, context, elementValue) {
                    var validationResults = {};
                    validationResults = { "name": "name", "context": "context", "required": "required", "error": "none", "errorkey": "none" };
                    for (var key in validationObject) {
                        // Look for the current attribute in the
                        // validation parameters.
                        if (key === name || key === name + "Flag") {
                            // Now that we have found the current
                            // validation parameters, iterate
                            // through them looking for
                            // the required parameters that match
                            // the current page context (save,
                            // delete, etc.)
                            for (var inner in validationObject[key]) {
                                var required = validationObject[key][inner].required || "false"; // Get
                                // the
                                // required
                                // value
                                var context = validationObject[key][inner].contexts || "none"; // Get
                                // the
                                // element
                                // context
                                //Setup the validation results object to pass back to caller.
                                validationResults = { "name": key, "context": context, "required": required, "error": "none", "errorkey": "none" };
                                var elementValidationArr = map(checkHasValidationType, validationPropertiesArray, validationObject[key][inner]);
                                //Iterate over the array and call the validate function if it has that property.
                                for (var i = 0; i < elementValidationArr.length; i++) {
                                    if (elementValidationArr[i] == true) {
                                        if (validationPropertiesArray[i] === "regex" && elementValue !== "") { //If element is zero, need to check required 
                                            //Get the regex string to match and send to validation function.
                                            var re = validationObject[key][inner].regex;
                                            var result = validate_RegExp(elementValue, re); //true if pattern match, fail otherwise.
                                            if (result != true) {
                                                errorMessages
                                                    .push("Invalid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Valid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minValue") {
                                            var validationMinValue = validationObject[key][inner].minValue;
                                            $log.debug(validationMinValue);
                                            var result = validate_MinValue(elementValue, validationMinValue);
                                            $log.debug("e>v" + result + " :" + elementValue, ":" + validationMinValue);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum value is: "
                                                    + validationMinValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxValue") {
                                            var validationMaxValue = validationObject[key][inner].maxValue;
                                            var result = validate_MaxValue(elementValue, validationMaxValue);
                                            $log.debug("Max Value result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum value is: "
                                                    + validationMaxValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minLength") {
                                            var validationMinLength = validationObject[key][inner].minLength;
                                            var result = validate_MinLength(elementValue, validationMinLength);
                                            $log.debug("Min Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum length must be: "
                                                    + validationMinLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxLength") {
                                            var validationMaxLength = validationObject[key][inner].maxLength;
                                            var result = validate_MaxLength(elementValue, validationMaxLength);
                                            $log.debug("Max Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum length is: "
                                                    + validationMaxLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "eq") {
                                            var validationEq = validationObject[key][inner].eq;
                                            var result = validate_Eq(elementValue, validationEq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must equal "
                                                    + validationEq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["EQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "neq") {
                                            var validationNeq = validationObject[key][inner].neq;
                                            var result = validate_Neq(elementValue, validationNeq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must not equal: "
                                                    + validationNeq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["NEQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "lte") {
                                            var validationLte = validationObject[key][inner].lte;
                                            var result = validate_Lte(elementValue, validationLte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be less than "
                                                    + validationLte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["LTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "gte") {
                                            var validationGte = validationObject[key][inner].gte;
                                            var result = validate_Gte(elementValue, validationGte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be greater than: "
                                                    + validationGte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["GTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "required") {
                                            var validationRequire = validationObject[key][inner].require;
                                            var result = validate_Required(elementValue, validationRequire);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                    }
                                }
                            }
                        }
                    } //<---end validate.			
                }
                /**
                * Function to map if we need a validation on this element.
                */
                function checkHasValidationType(validationProp, validationType) {
                    if (validationProp[validationType] != undefined) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                /**
                * Iterates over the properties object finding which types of validation are needed.
                */
                function map(func, array, obj) {
                    var result = [];
                    forEach(array, function (element) {
                        result.push(func(obj, element));
                    });
                    return result;
                }
                /**
                * Array iteration helper.
                */
                function forEach(array, action) {
                    for (var i = 0; i < array.length; i++)
                        action(array[i]);
                }
                /**
                * Helper function to read all the names in our enums into an array that the higher order functions can use.
                */
                function getNamesFromObject(obj) {
                    var result = [];
                    for (var i in obj) {
                        var name = obj[i].name || "stub";
                        result.push(name);
                    }
                    return result;
                }
                /**
                * Tests the value for a RegExp match given by the pattern string.
                * Validates true if pattern match, false otherwise.
                */
                function validate_RegExp(value, pattern) {
                    var regex = new RegExp(pattern);
                    if (regex.test(value)) {
                        return true;
                    }
                    return false;
                }
                /**
                * Validates true if userValue >= minValue (inclusive)
                */
                function validate_MinValue(userValue, minValue) {
                    return (userValue >= minValue);
                }
                /**
                * Validates true if userValue <= maxValue (inclusive)
                */
                function validate_MaxValue(userValue, maxValue) {
                    return (userValue <= maxValue) ? true : false;
                }
                /**
                * Validates true if length of the userValue >= minLength (inclusive)
                */
                function validate_MinLength(userValue, minLength) {
                    return (userValue.length >= minLength) ? true : false;
                }
                /**
                * Validates true if length of the userValue <= maxLength (inclusive)
                */
                function validate_MaxLength(userValue, maxLength) {
                    return (userValue.length <= maxLength) ? true : false;
                }
                /**
                * Validates true if the userValue == eqValue
                */
                function validate_Eq(userValue, eqValue) {
                    return (userValue == eqValue) ? true : false;
                }
                /**
                * Validates true if the userValue != neqValue
                */
                function validate_Neq(userValue, neqValue) {
                    return (userValue != neqValue) ? true : false;
                }
                /**
                * Validates true if the userValue < decisionValue (exclusive)
                */
                function validate_Lte(userValue, decisionValue) {
                    return (userValue < decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue > decisionValue (exclusive)
                */
                function validate_Gte(userValue, decisionValue) {
                    return (userValue > decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue === property
                */
                function validate_EqProperty(userValue, property) {
                    return (userValue === property) ? true : false;
                }
                /**
                * Validates true if the given value is !NaN (Negate, Not a Number).
                */
                function validate_IsNumeric(value) {
                    return !isNaN(value) ? true : false;
                }
                /**
                * Validates true if the given userValue is empty and the field is required.
                */
                function validate_Required(property, userValue) {
                    return (userValue == "" && property == true) ? true : false;
                }
                /**
                * Handles the 'eager' validation on every key press.
                */
                ngModel.$parsers.unshift(function (value) {
                    var name = elem.context.name; //Get the element name for the validate function.
                    var currentValue = elem.val(); //Get the current element value to check validations against.
                    var val = validate(name, myCurrentContext, currentValue) || {};
                    //Check if field is required.				
                    $log.debug(scope);
                    $log.debug(val);
                    ngModel.$setValidity(val.errorkey, !val.fail);
                    return true;
                }); //<---end $parsers
                /**
                * This handles 'lazy' validation on blur.
                */
                elem.bind('blur', function (e) {
                });
            }
        };
    }
    SWValidate.Factory = function () {
        var directive = function ($log, $hibachi) { return new SWValidate($log, $hibachi); };
        directive.$inject = ['$log', '$hibachi'];
        return directive;
    };
    return SWValidate;
}());
exports.SWValidate = SWValidate;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinLength = /** @class */ (function () {
    function SWValidationMinLength($log, validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMinLength(length || 0, attributes.swvalidationminlength);
                    };
            }
        };
    }
    SWValidationMinLength.Factory = function () {
        var directive = function ($log, validationService) { return new SWValidationMinLength($log, validationService); };
        directive.$inject = ['$log', 'validationService'];
        return directive;
    };
    return SWValidationMinLength;
}());
exports.SWValidationMinLength = SWValidationMinLength;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationDataType = /** @class */ (function () {
    //@ngInject
    function SWValidationDataType(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                var isValidFunction = function (modelValue) {
                    return validationService.validateDataType(modelValue, attributes.swvalidationdatatype);
                };
                ngModel.$validators.swvalidationdatatype = isValidFunction;
                ngModel.$validators['swvalidation' + attributes.swvalidationdatatype] = isValidFunction;
            }
        };
    }
    SWValidationDataType.Factory = function () {
        var directive = function (validationService) { return new SWValidationDataType(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationDataType;
}());
exports.SWValidationDataType = SWValidationDataType;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationEq = /** @class */ (function () {
    //@ngInject
    function SWValidationEq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationeq =
                    function (modelValue, viewValue) {
                        return validationService.validateEq(modelValue, attributes.swvalidationeq);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationEq.Factory = function () {
        var directive = function (validationService) { return new SWValidationEq(validationService); };
        directive.$inject = [
            'validationService'
        ];
        return directive;
    };
    return SWValidationEq;
}());
exports.SWValidationEq = SWValidationEq;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationGte = /** @class */ (function () {
    function SWValidationGte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationGte =
                    function (modelValue, viewValue) {
                        return validationService.validateGte(modelValue, attributes.swvalidationGte);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationGte.Factory = function () {
        var directive = function (validationService) { return new SWValidationGte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationGte;
}());
exports.SWValidationGte = SWValidationGte;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationLte = /** @class */ (function () {
    function SWValidationLte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationlte =
                    function (modelValue, viewValue) {
                        return validationService.validateLte(modelValue, attributes.swvalidationlte);
                    };
            }
        };
    }
    SWValidationLte.Factory = function () {
        var directive = function (validationService) { return new SWValidationLte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationLte;
}());
exports.SWValidationLte = SWValidationLte;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxLength = /** @class */ (function () {
    function SWValidationMaxLength(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMaxLength(length || 0, attributes.swvalidationmaxlength);
                    };
            }
        };
    }
    SWValidationMaxLength.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxLength(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxLength;
}());
exports.SWValidationMaxLength = SWValidationMaxLength;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxValue = /** @class */ (function () {
    function SWValidationMaxValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        validationService.validateMaxValue(viewValue, attributes.swvalidationmaxvalue);
                    };
            }
        };
    }
    SWValidationMaxValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxValue;
}());
exports.SWValidationMaxValue = SWValidationMaxValue;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinValue = /** @class */ (function () {
    function SWValidationMinValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        return validationService.validateMinValue(viewValue, attributes.swvalidationminvalue);
                    };
            }
        };
    }
    SWValidationMinValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMinValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMinValue;
}());
exports.SWValidationMinValue = SWValidationMinValue;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNeq = /** @class */ (function () {
    function SWValidationNeq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationneq =
                    function (modelValue) {
                        return validationService.validateNeq(modelValue, attributes.swvalidationneq);
                    };
            }
        };
    }
    SWValidationNeq.Factory = function () {
        var directive = function (validationService) { return new SWValidationNeq(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNeq;
}());
exports.SWValidationNeq = SWValidationNeq;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNumeric = /** @class */ (function () {
    function SWValidationNumeric(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationnumeric =
                    function (modelValue, viewValue) {
                        return validationService.validateNumeric(viewValue);
                    };
            }
        };
    }
    SWValidationNumeric.Factory = function () {
        var directive = function (validationService) { return new SWValidationNumeric(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNumeric;
}());
exports.SWValidationNumeric = SWValidationNumeric;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRegex = /** @class */ (function () {
    function SWValidationRegex(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationregex =
                    function (modelValue) {
                        //Returns true if this user value (model value) does match the pattern
                        return validationService.validateRegex(modelValue, attributes.swvalidationregex);
                    };
            }
        };
    }
    SWValidationRegex.Factory = function () {
        var directive = function (validationService) { return new SWValidationRegex(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRegex;
}());
exports.SWValidationRegex = SWValidationRegex;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRequired = /** @class */ (function () {
    //@ngInject
    function SWValidationRequired(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationrequired =
                    function (modelValue, viewValue) {
                        var value = modelValue || viewValue;
                        if (attributes.swvalidationrequired === "true") {
                            return validationService.validateRequired(value);
                        }
                        else {
                            return true;
                        }
                    };
            }
        };
    }
    SWValidationRequired.Factory = function () {
        var directive = function (validationService) { return new SWValidationRequired(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRequired;
}());
exports.SWValidationRequired = SWValidationRequired;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUnique = /** @class */ (function () {
    //@ngInject
    function SWValidationUnique($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: ["ngModel", "^?swFormField"],
            link: function (scope, element, attributes, controllers) {
                var ngModel = controllers[0];
                ngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    var property = controllers[1].property;
                    return validationService.validateUnique(currentValue, controllers[1].object, property);
                };
            }
        };
    }
    SWValidationUnique.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUnique($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUnique;
}());
exports.SWValidationUnique = SWValidationUnique;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUniqueOrNull = /** @class */ (function () {
    //@ngInject
    function SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: "ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    if (scope && scope.propertyDisplay && scope.propertyDisplay.property) {
                        var property = scope.propertyDisplay.property;
                        return validationService.validateUniqueOrNull(currentValue, scope.propertyDisplay.object, property);
                    }
                    else {
                        return $q.resolve(); //nothing to validate yet.
                    }
                };
            }
        };
    }
    SWValidationUniqueOrNull.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUniqueOrNull;
}());
exports.SWValidationUniqueOrNull = SWValidationUniqueOrNull;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationService = /** @class */ (function () {
    //@ngInject
    function ValidationService($hibachi, $q) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$q = $q;
        this.MY_EMAIL_REGEXP = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        this.validateUnique = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateUniqueOrNull = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueOrNullValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateEmail = function (value) {
            return _this.validateDataType(value, 'email');
        };
        this.validateDataType = function (value, type) {
            if (value == null) {
                return true;
            } //let required validate this
            if (angular.isString(value) && type === "string") {
                return true;
            }
            if (angular.isNumber(parseInt(value)) && type === "numeric") {
                return true;
            }
            if (angular.isArray(value) && type === "array") {
                return true;
            }
            if (angular.isDate(value) && type === "date") {
                return true;
            }
            if (angular.isObject(value) && type === "object") {
                return true;
            }
            if (type === 'email') {
                return _this.MY_EMAIL_REGEXP.test(value);
            }
            if (angular.isUndefined(value && type === "undefined")) {
                return true;
            }
            return false;
        };
        this.validateEq = function (value, expectedValue) {
            return (value === expectedValue);
        };
        this.validateNeq = function (value, expectedValue) {
            return (value !== expectedValue);
        };
        this.validateGte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value >= comparisonValue);
        };
        this.validateLte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value <= comparisonValue);
        };
        this.validateMaxLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMaxValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMinLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateMinValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateNumeric = function (value) {
            return !isNaN(value);
        };
        this.validateRegex = function (value, pattern) {
            var regex = new RegExp(pattern);
            return regex.test(value);
        };
        this.validateRequired = function (value) {
            if (value) {
                return true;
            }
            else {
                return false;
            }
        };
        this.$hibachi = $hibachi;
        this.$q = $q;
    }
    return ValidationService;
}());
exports.ValidationService = ValidationService;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var WorkflowCondition = /** @class */ (function () {
    function WorkflowCondition() {
        this.propertyIdentifer = "";
        this.comparisonOperator = "";
        this.value = "";
        this.displayPropertyIdentifier = "";
        this.$$disabled = false;
        this.$$isClosed = true;
        this.$$isNew = true;
    }
    return WorkflowCondition;
}());
exports.WorkflowCondition = WorkflowCondition;
var WorkflowConditionGroupItem = /** @class */ (function () {
    function WorkflowConditionGroupItem() {
        this.workflowConditionGroup = [];
    }
    return WorkflowConditionGroupItem;
}());
exports.WorkflowConditionGroupItem = WorkflowConditionGroupItem;
var WorkflowConditionService = /** @class */ (function () {
    function WorkflowConditionService($log, $hibachi, alertService) {
        var _this = this;
        this.$log = $log;
        this.newWorkflowCondition = function () {
            return new WorkflowCondition;
        };
        this.addWorkflowCondition = function (groupItem, condition) {
            _this.$log.debug('addWorkflowCondition');
            _this.$log.debug(groupItem);
            _this.$log.debug(condition);
            if (groupItem.length >= 1) {
                condition.logicalOperator = 'AND';
            }
            groupItem.push(condition);
        };
        this.newWorkflowConditionGroupItem = function () {
            return new WorkflowConditionGroupItem;
        };
        this.addWorkflowConditionGroupItem = function (group, groupItem) {
            group.push(groupItem);
        };
    }
    WorkflowConditionService.$inject = ["$log", "$hibachi", "alertService"];
    return WorkflowConditionService;
}());
exports.WorkflowConditionService = WorkflowConditionService;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(6);
var ScheduleService = /** @class */ (function (_super) {
    __extends(ScheduleService, _super);
    //@ngInject
    function ScheduleService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Schedule') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.schedulePreview = {};
        _this.clearSchedulePreview = function () {
            _this.schedulePreview = {};
        };
        _this.addSchedulePreviewItem = function (cdate, longMonthName) {
            if (longMonthName === void 0) { longMonthName = true; }
            var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
            var currentDate = (cdate.getMonth() + 1) + '-' + cdate.getDate() + '-' + cdate.getFullYear();
            if (_this.schedulePreview[currentDate] === undefined) {
                _this.schedulePreview[currentDate] = {
                    day: cdate.getDate(),
                    month: (longMonthName) ? month[cdate.getMonth()] : monthShort[cdate.getMonth()],
                    year: cdate.getFullYear(),
                    weekday: weekday[cdate.getDay()],
                    times: []
                };
            }
            _this.schedulePreview[currentDate].times.push(cdate.toLocaleTimeString());
        };
        _this.buildSchedulePreview = function (scheduleObject, totalOfPreviews) {
            if (totalOfPreviews === void 0) { totalOfPreviews = 10; }
            _this.clearSchedulePreview();
            var startTime = new Date(Date.parse(scheduleObject.frequencyStartTime));
            var endTime = (scheduleObject.frequencyEndTime.trim()) ? new Date(Date.parse(scheduleObject.frequencyEndTime)) : false;
            var now = new Date();
            var startPoint = new Date();
            startPoint.setHours(startTime.getHours());
            startPoint.setMinutes(startTime.getMinutes());
            startPoint.setSeconds(startTime.getSeconds());
            var daysToRun = [];
            if (scheduleObject.recuringType == 'weekly') {
                daysToRun = scheduleObject.daysOfWeekToRun.toString().split(',');
                if (!daysToRun.length || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            if (scheduleObject.recuringType == 'monthly') {
                daysToRun = scheduleObject.daysOfMonthToRun.toString().split(',');
                if (!daysToRun.length || !scheduleObject.daysOfWeekToRun || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            var datesAdded = 0;
            for (var i = 0;; i++) {
                if (datesAdded >= totalOfPreviews || i >= 500)
                    break;
                var timeToadd = (scheduleObject.frequencyInterval && scheduleObject.frequencyInterval.toString().trim()) ? (scheduleObject.frequencyInterval * i) * 60000 : i * 24 * 60 * 60 * 1000;
                var currentDatetime = new Date(startPoint.getTime() + timeToadd);
                if (currentDatetime < now)
                    continue;
                if (scheduleObject.recuringType == 'weekly') {
                    if (daysToRun.indexOf((currentDatetime.getDay() + 1).toString()) == -1)
                        continue;
                }
                else if (scheduleObject.recuringType == 'monthly') {
                    if (daysToRun.indexOf(currentDatetime.getDate().toString()) == -1)
                        continue;
                }
                if (!endTime) {
                    _this.addSchedulePreviewItem(currentDatetime);
                    datesAdded++;
                }
                else {
                    if (_this.utilityService.minutesOfDay(startTime) <= _this.utilityService.minutesOfDay(currentDatetime)
                        && _this.utilityService.minutesOfDay(endTime) >= _this.utilityService.minutesOfDay(currentDatetime)) {
                        _this.addSchedulePreviewItem(currentDatetime);
                        datesAdded++;
                    }
                }
            }
            return _this.schedulePreview;
        };
        return _this;
    }
    return ScheduleService;
}(baseentityservice_1.BaseEntityService));
exports.ScheduleService = ScheduleService;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAdminCreateSuperUser = /** @class */ (function () {
    function SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "admincreatesuperuser.html",
            link: function (scope, element, attrs) {
                scope.Account_SetupInitialAdmin = $hibachi.newAccount_SetupInitialAdmin();
            }
        };
    }
    SWAdminCreateSuperUser.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, hibachiPathBuilder) { return new SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAdminCreateSuperUser;
}());
exports.SWAdminCreateSuperUser = SWAdminCreateSuperUser;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowBasic = /** @class */ (function () {
    function SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowbasic.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowBasic.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowBasic;
}());
exports.SWWorkflowBasic = SWWorkflowBasic;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowCondition = /** @class */ (function () {
    function SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowCondition: "=",
                workflowConditionIndex: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowcondition.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowCondition init');
                $log.debug(scope);
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                if (angular.isUndefined(scope.workflowCondition.breadCrumbs)) {
                    scope.workflowCondition.breadCrumbs = [];
                    if (scope.workflowCondition.propertyIdentifier === "") {
                        scope.workflowCondition.breadCrumbs = [
                            {
                                entityAlias: scope.workflow.data.workflowObject,
                                cfc: scope.workflow.data.workflowObject,
                                propertyIdentifier: scope.workflow.data.workflowObject
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.workflowCondition.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.workflowCondition.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc, true);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
            }
        };
    }
    SWWorkflowCondition.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowCondition;
}());
exports.SWWorkflowCondition = SWWorkflowCondition;


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroupItem = /** @class */ (function () {
    function SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroupitem.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowConditionGroupItem.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroupItem;
}());
exports.SWWorkflowConditionGroupItem = SWWorkflowConditionGroupItem;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroups = /** @class */ (function () {
    function SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowConditionGroupItem: "=",
                workflowConditionGroup: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroups.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowconditiongroups init');
                scope.addWorkflowCondition = function () {
                    $log.debug('addWorkflowCondition');
                    var workflowCondition = workflowConditionService.newWorkflowCondition();
                    workflowConditionService.addWorkflowCondition(scope.workflowConditionGroupItem, workflowCondition);
                };
                scope.addWorkflowGroupItem = function () {
                    $log.debug('addWorkflowGrouptItem');
                    var workflowConditionGroupItem = workflowConditionService.newWorkflowConditionGroupItem();
                    workflowConditionService.addWorkflowConditionGroupItem(scope.workflowConditionItem, workflowConditionGroupItem);
                };
            }
        };
    }
    SWWorkflowConditionGroups.Factory = function () {
        var directive = function ($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'workflowConditionService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroups;
}());
exports.SWWorkflowConditionGroups = SWWorkflowConditionGroups;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTask = /** @class */ (function () {
    function SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowTask: "=",
                workflowTasks: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtask.html",
            link: function (scope, element, attrs) {
                scope.removeWorkflowTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.workflowTasks.splice(workflowTask.$$index, 1);
                        for (var i in scope.workflowTasks) {
                            scope.workflowTasks[i].$$index = i;
                        }
                    });
                };
            }
        };
    }
    SWWorkflowTask.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTask;
}());
exports.SWWorkflowTask = SWWorkflowTask;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWWorkflowTaskActionsController = /** @class */ (function () {
    //@ngInject
    function SWWorkflowTaskActionsController($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder, collectionConfigService, observerService) {
        var _this = this;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.$log.debug('Workflow Task Actions Init');
        this.$log.debug(this.workflowTask);
        this.openActions = false;
        this.observerService.attach(function (item) {
            if (angular.isDefined(_this.emailTemplateCollectionConfig)) {
                _this.emailTemplateCollectionConfig.clearFilters();
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", item.value);
            }
            if (angular.isDefined(_this.printTemplateCollectionConfig)) {
                _this.printTemplateCollectionConfig.clearFilters();
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", item.value);
            }
        }, 'WorkflowWorkflowObjectOnChange');
        /**
         * Returns the correct object based on the selected object type.
         */
        var getObjectByActionType = function (workflowTaskAction) {
            if (workflowTaskAction.data.actionType === 'email') {
                workflowTaskAction.$$getEmailTemplate();
            }
            else if (workflowTaskAction.data.actionType === 'print') {
                workflowTaskAction.$$getPrintTemplate();
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Returns workflow task action, and saves them to the scope variable workflowtaskactions
         * --------------------------------------------------------------------------------------------------------
         */
        this.getWorkflowTaskActions = function () {
            /***
             Note:
             This conditional is checking whether or not we need to be retrieving to
             items all over again. If we already have them, we won't make another
             trip to the database.

             ***/
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                var workflowTaskPromise = _this.workflowTask.$$getWorkflowTaskActions();
                workflowTaskPromise.then(function () {
                    _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
                    angular.forEach(_this.workflowTaskActions, function (workflowTaskAction) {
                        getObjectByActionType(workflowTaskAction);
                    });
                    _this.$log.debug(_this.workflowTaskActions);
                });
            }
            else {
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                _this.workflowTask.data.workflowTaskActions = [];
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
        };
        this.getWorkflowTaskActions(); //Call get
        /**
         * --------------------------------------------------------------------------------------------------------
         * Saves the workflow task actions by calling the objects $$save method.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.saveWorkflowTaskAction = function (taskAction, context) {
            _this.$log.debug("Context: " + context);
            _this.$log.debug("saving task action and parent task");
            _this.$log.debug(taskAction);
            var savePromise = _this.workflowTaskActions.selectedTaskAction.$$save();
            savePromise.then(function () {
                var taSavePromise = taskAction.$$save;
                //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                if (context == 'add') {
                    _this.$log.debug("Save and New");
                    _this.addWorkflowTaskAction(taskAction);
                    _this.finished = false;
                }
                else if (context == "finish") {
                    _this.finished = true;
                }
                //Auto save the workflow now that the task action is saved.
                _this.workflowTask.data.workflow.$$save();
            }, function (err) {
                angular.element('a[href="/##j-basic-2"]').click();
                console.warn(err);
            });
        }; //<--end save
        /**
         * Sets the editing state to show/hide the edit screen.
         */
        this.setHidden = function (task) {
            if (!angular.isObject(task)) {
                task = {};
            }
            if (angular.isUndefined(task.hidden)) {
                task.hidden = false;
            }
            else {
                _this.$log.debug("setHidden()", "Setting Hide Value To " + !task.hidden);
                task.hidden = !task.hidden;
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method
         * and sets the result to scope.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.addWorkflowTaskAction = function (taskAction) {
            var workflowTaskAction = _this.workflowTask.$$addWorkflowTaskAction();
            _this.selectWorkflowTaskAction(workflowTaskAction);
            _this.$log.debug(_this.workflow);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Selects a new task action and populates the task action properties.
         * --------------------------------------------------------------------------------------------------------
         */
        this.selectWorkflowTaskAction = function (workflowTaskAction) {
            _this.$log.debug("Selecting new task action for editing: ");
            _this.$log.debug(workflowTaskAction);
            _this.finished = false;
            _this.workflowTaskActions.selectedTaskAction = undefined;
            var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(_this.workflowTask.data.workflow.data.workflowObject, true);
            filterPropertiesPromise.then(function (value) {
                _this.filterPropertiesList = {
                    baseEntityName: _this.workflowTask.data.workflow.data.workflowObject,
                    baseEntityAlias: "_" + _this.workflowTask.data.workflow.data.workflowObject
                };
                _this.metadataService.setPropertiesList(value, _this.workflowTask.data.workflow.data.workflowObject);
                _this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject] = _this.metadataService.getPropertiesListByBaseEntityAlias(_this.workflowTask.data.workflow.data.workflowObject);
                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject], _this.workflowTask.data.workflow.data.workflowObject);
                _this.workflowTaskActions.selectedTaskAction = workflowTaskAction;
                _this.emailTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.emailTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName : '';
                _this.emailTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
                _this.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName");
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
                _this.printTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.printTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName : '';
                _this.printTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("PrintTemplate");
                _this.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName");
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
            });
        };
        /**
         * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.
         */
        this.deleteEntity = function (entity) {
            _this.removeWorkflowTaskAction(entity);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Removes a workflow task action by calling the selected tasks $$delete method
         * and reindexes the list.
         * --------------------------------------------------------------------------------------------------------
         */
        this.removeWorkflowTaskAction = function (workflowTaskAction) {
            var deletePromise = workflowTaskAction.$$delete();
            deletePromise.then(function () {
                if (workflowTaskAction === _this.workflowTaskActions.selectedTaskAction) {
                    delete _this.workflowTaskActions.selectedTaskAction;
                }
                _this.$log.debug("removeWorkflowTaskAction");
                _this.$log.debug(workflowTaskAction);
                _this.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);
                for (var i in _this.workflowTaskActions) {
                    _this.workflowTaskActions[i].$$actionIndex = i;
                }
            });
        };
        this.searchProcess = {
            name: ''
        };
        /**
         * Watches for changes in the proccess
         */
        this.showProcessOptions = false;
        this.processOptions = [];
        //this.$scope.$watch('swWorkflowTaskActions.searchProcess.name', (newValue, oldValue)=>{
        //    if(newValue !== oldValue){
        //        this.getProcessOptions(this.workflowTask.data.workflow.data.workflowObject);
        //    }
        //});
        /**
         * Retrieves the proccess options for a workflow trigger action.
         */
        this.getProcessOptions = function (objectName) {
            if (!_this.processOptions.length) {
                var proccessOptionsPromise = _this.$hibachi.getProcessOptions(objectName);
                proccessOptionsPromise.then(function (value) {
                    _this.processOptions = value.data;
                });
            }
            _this.showProcessOptions = true;
        };
        /**
         * Changes the selected process option value.
         */
        this.selectProcess = function (processOption) {
            _this.workflowTaskActions.selectedTaskAction.data.processMethod = processOption.value;
            _this.searchProcess.name = processOption.value;
            _this.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty();
            //this.searchProcess = processOption.name;
            _this.showProcessOptions = false;
        };
        this.selectEmailTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.emailTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID = item.emailTemplateID;
            }
            else {
                var templateEmail = _this.$hibachi.newEmailTemplate();
                templateEmail.data.emailTemplateID = item.emailTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(templateEmail);
            }
        };
        this.selectPrintTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.printTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID = item.printTemplateID;
            }
            else {
                var templatePrint = _this.$hibachi.newPrintTemplate();
                templatePrint.data.printTemplateID = item.printTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(templatePrint);
            }
        };
    }
    return SWWorkflowTaskActionsController;
}());
var SWWorkflowTaskActions = /** @class */ (function () {
    function SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            workflowTask: "="
        };
        this.controller = SWWorkflowTaskActionsController;
        this.controllerAs = "swWorkflowTaskActions";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "workflowtaskactions.html";
    }
    SWWorkflowTaskActions.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWWorkflowTaskActions.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWWorkflowTaskActions;
}());
exports.SWWorkflowTaskActions = SWWorkflowTaskActions;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Handles adding, editing, and deleting Workflows Tasks.
 */
var SWWorkflowTasks = /** @class */ (function () {
    function SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtasks.html",
            link: function (scope, element, attrs) {
                scope.workflowPartialsPath = hibachiPathBuilder.buildPartialsPath(workflowPartialsPath);
                scope.propertiesList = {};
                function logger(context, message) {
                    $log.debug("SwWorkflowTasks :" + context + " : " + message);
                }
                /**
                 * Sets workflowTasks on the scope by populating with $$getWorkflowTasks()
                 */
                scope.getWorkflowTasks = function () {
                    logger("getWorkflowTasks", "Retrieving items");
                    logger("getWorkflowTasks", "Workflow Tasks");
                    $log.debug(scope.workflowTasks);
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                        return;
                    }
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                     ***/
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        var workflowTasksPromise = scope.workflow.$$getWorkflowTasks();
                        workflowTasksPromise.then(function () {
                            scope.workflowTasks = scope.workflow.data.workflowTasks;
                        });
                    }
                    else {
                        logger("getWorkflowTasks", "Retrieving cached Items");
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        //Reset the workflowTasks.
                        logger("getWorkflowTasks", "workflowTasks is undefined.");
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                };
                scope.getWorkflowTasks(); //call tasks
                /**
                 * Sets the editing state to show/hide the edit screen.
                 */
                scope.setHidden = function (task) {
                    if (!angular.isObject(task) || angular.isUndefined(task.hidden)) {
                        task.hidden = false;
                    }
                    else {
                        logger("setHidden()", "Setting Hide Value To " + !task.hidden);
                        task.hidden = !task.hidden;
                    }
                };
                /**
                 * Add a workflow task and logs the result.
                 */
                scope.addWorkflowTask = function () {
                    var newWorkflowTask = scope.workflow.$$addWorkflowTask();
                    logger("var newWorkflowTask", newWorkflowTask);
                    scope.selectWorkflowTask(newWorkflowTask);
                };
                /**
                  * Watches the select for changes.
                  */
                scope.$watch('workflowTasks.selectedTask.data.workflow.data.workflowObject', function (newValue, oldValue) {
                    logger("scope.$watch", "Change Detected " + newValue + " from " + oldValue);
                    if ((newValue !== oldValue && angular.isDefined(scope.workflowTasks.selectedTask))) {
                        logger("scope.$watch", "Change to " + newValue);
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias = '_' + newValue.charAt(0).toLowerCase() + newValue.slice(1);
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName = newValue;
                    }
                });
                /**
                   * --------------------------------------------------------------------------------------------------------
                   * Saves the workflow task by calling the objects $$save method. In addition to calling save here,
                   * we also refresh the data by calling getWorkflowTasks followed by calling the global entity.$$save.
                   * @param task
                   * --------------------------------------------------------------------------------------------------------
                   */
                scope.saveWorkflowTask = function (task, context) {
                    //scope.workflowTasks.selectedTask.$$setWorkflow(scope.workflow);
                    scope.workflowTasks.selectedTask.$$save().then(function (res) {
                        scope.done = true;
                        delete scope.workflowTasks.selectedTask;
                        if (context === 'add') {
                            scope.addWorkflowTask();
                            scope.finished = true;
                        }
                        else if (context == "finish") {
                            scope.finished = false;
                        }
                        //refresh the task information.
                        delete scope.workflow.data.workflowTasks;
                        scope.getWorkflowTasks();
                        //Save the workflow entity automatically.
                        scope.workflow.$$save();
                    }, function (err) {
                    });
                }; //<--end save*/
                /**
                 * Select a workflow task.
                 */
                scope.selectWorkflowTask = function (workflowTask) {
                    scope.done = false;
                    $log.debug(workflowTask);
                    scope.finished = false;
                    scope.workflowTasks.selectedTask = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflow.data.workflowObject], scope.workflow.data.workflowObject);
                        scope.workflowTasks.selectedTask = workflowTask;
                    });
                };
                /* Does a delete of the property using delete */
                scope.softRemoveTask = function (workflowTask) {
                    if (workflowTask === scope.workflowTasks.selectedTask) {
                        delete scope.workflowTasks.selectedTask;
                    }
                    scope.removeIndexFromTasks(workflowTask.$$index);
                    scope.reindexTaskList();
                };
                /* Does an API call delete using $$delete */
                scope.hardRemoveTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.removeIndexFromTasks(workflowTask.$$index);
                        scope.reindexTaskList();
                    });
                };
                /*Override the delete entity in the confirmation controller*/
                scope.deleteEntity = function (entity) {
                    scope.hardRemoveTask(entity);
                };
                /* Re-indexes the task list */
                scope.reindexTaskList = function () {
                    for (var i in scope.workflowTasks) {
                        logger("ReIndexing the list", i);
                        scope.workflowTasks[i].$$index = i;
                    }
                };
                /* Removes the tasks index from the tasks array */
                scope.removeIndexFromTasks = function (index) {
                    logger("RemoveIndexFromTasks", index);
                    scope.workflowTasks.splice(index, 1);
                };
            }
        };
    }
    SWWorkflowTasks.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTasks;
}());
exports.SWWorkflowTasks = SWWorkflowTasks;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTrigger = /** @class */ (function () {
    function SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) {
        return {
            restrict: 'A',
            replace: true,
            scope: {
                workflowTrigger: "=",
                workflowTriggers: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtrigger.html",
            link: function (scope, element, attrs) {
                /**
                 * Selects the current workflow trigger.
                 */
                scope.selectWorkflowTrigger = function (workflowTrigger) {
                    scope.done = false;
                    scope.finished = false;
                    scope.workflowTriggers.selectedTrigger = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflowTrigger.data.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflowTrigger.data.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflowTrigger.data.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTrigger.data.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject], scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.workflowTriggers.selectedTrigger = workflowTrigger;
                    });
                };
                scope.executingTrigger = false;
                scope.executeWorkflowTrigger = function (workflowTrigger) {
                    if (scope.executingTrigger)
                        return;
                    if (!workflowTrigger.data.workflow.data.workflowTasks || !workflowTrigger.data.workflow.data.workflowTasks.length) {
                        var alert = alertService.newAlert();
                        alert.msg = "You don't have any Task yet!";
                        alert.type = "error";
                        alert.fade = true;
                        alertService.addAlert(alert);
                        return;
                    }
                    scope.executingTrigger = true;
                    var appConfig = $hibachi.getConfig();
                    var urlString = appConfig.baseURL + '/index.cfm/?' + appConfig.action + '=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID=' + workflowTrigger.data.workflowTriggerID + '&x=' + utilityService.createID();
                    $http.get(urlString).finally(function () {
                        scope.executingTrigger = false;
                        var alert = alertService.newAlert();
                        alert.msg = "Task Triggered Successfully. Check History for Status";
                        alert.type = "success";
                        alert.fade = true;
                        alertService.addAlert(alert);
                    });
                };
                /**
                 * Overrides the delete function for the confirmation modal. Delegates to the normal delete method.
                 */
                scope.deleteEntity = function (entity, index) {
                    scope.deleteTrigger(entity, index);
                };
                /**
                 * Hard deletes a workflow trigger
                 */
                scope.deleteTrigger = function (workflowTrigger, index) {
                    var deleteTriggerPromise = $hibachi.saveEntity('WorkflowTrigger', workflowTrigger.data.workflowTriggerID, {}, 'Delete');
                    deleteTriggerPromise.then(function (value) {
                        scope.workflowTriggers.splice(index, 1);
                    });
                };
            }
        };
    }
    SWWorkflowTrigger.Factory = function () {
        var directive = function ($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) { return new SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'alertService',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder',
            'utilityService'
        ];
        return directive;
    };
    return SWWorkflowTrigger;
}());
exports.SWWorkflowTrigger = SWWorkflowTrigger;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggers = /** @class */ (function () {
    function SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) {
        return {
            restrict: 'E',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggers.html",
            link: function (scope, element, attrs, formController) {
                scope.schedule = {};
                scope.$watch('workflowTriggers.selectedTrigger', function (newValue, oldValue) {
                    if (newValue !== undefined && newValue !== oldValue) {
                        if (newValue.data.triggerType == 'Schedule') {
                            if (angular.isDefined(newValue.data.schedule)) {
                                scope.schedule.selectedName = newValue.data.schedule.data.scheduleName;
                                scope.selectSchedule(newValue.data.schedule.data);
                            }
                            if (angular.isDefined(newValue.data.scheduleCollection)) {
                                scope.selectedCollection = newValue.data.scheduleCollection.data.collectionName;
                            }
                        }
                        else {
                            scope.searchEvent.name = scope.workflowTriggers.selectedTrigger.triggerEventTitle;
                        }
                    }
                });
                scope.collectionCollectionConfig = collectionConfigService.newCollectionConfig("Collection");
                scope.collectionCollectionConfig.setDisplayProperties("collectionID,collectionName");
                scope.collectionCollectionConfig.addFilter("collectionObject", scope.workflow.data.workflowObject);
                observerService.attach(function (item) {
                    scope.collectionCollectionConfig.clearFilters();
                    scope.collectionCollectionConfig.addFilter("collectionObject", item.value);
                    scope.eventOptions = [];
                }, 'WorkflowWorkflowObjectOnChange');
                scope.scheduleCollectionConfig = collectionConfigService.newCollectionConfig("Schedule");
                scope.scheduleCollectionConfig.setDisplayProperties("scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval");
                scope.daysOfweek = [];
                scope.daysOfMonth = [];
                scope.$id = 'swWorkflowTriggers';
                /**
                 * Retrieves the workflow triggers.
                 */
                scope.getWorkflowTriggers = function () {
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                    ***/
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTriggers = [];
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                        return;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                        var workflowTriggersPromise = scope.workflow.$$getWorkflowTriggers();
                        workflowTriggersPromise.then(function () {
                            scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            /* resets the workflow trigger */
                            if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                                scope.workflow.data.workflowTriggers = [];
                                scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            }
                            angular.forEach(scope.workflowTriggers, function (workflowTrigger, key) {
                                if (workflowTrigger.data.triggerType === 'Schedule') {
                                    workflowTrigger.$$getSchedule();
                                    workflowTrigger.$$getScheduleCollection();
                                } //<---end if
                            }); //<---end forEach
                        }); //<---end workflow triggers promise
                    }
                    else {
                        //Use the cached versions.
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                    } //<---end else
                };
                scope.getWorkflowTriggers(); //call triggers
                scope.showCollections = false;
                scope.collections = [];
                scope.searchEvent = {
                    name: ''
                };
                /**
                 * Watches for changes in the event
                 */
                scope.showEventOptions = false;
                scope.eventOptions = [];
                /**
                 * Retrieves the event options for a workflow trigger item.
                 */
                scope.getEventOptions = function (objectName) {
                    if (!scope.eventOptions.length) {
                        var eventOptionsPromise = $hibachi.getEventOptions(objectName);
                        eventOptionsPromise.then(function (value) {
                            scope.eventOptions = value.data;
                        });
                    }
                    scope.showEventOptions = !scope.showEventOptions;
                };
                /**
                 * Saves the workflow triggers then cascade a save to the workflow object as well.
                 */
                scope.saveWorkflowTrigger = function (context) {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow(scope.workflow);
                    }
                    var saveWorkflowTriggerPromise = scope.workflowTriggers.selectedTrigger.$$save();
                    saveWorkflowTriggerPromise.then(function () {
                        scope.showEventOptions = true;
                        scope.searchEvent = {
                            name: ''
                        };
                        scope.schedule.selectedName = '';
                        scope.schedulePreview = {};
                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                        if (context == 'add') {
                            scope.addWorkflowTrigger();
                        }
                        else if (context == "finish") {
                            scope.workflowTriggers.selectedTrigger = undefined;
                        }
                        //auto saves the workflow as well.
                        scope.workflow.$$save();
                    });
                };
                scope.closeTrigger = function () {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow();
                    }
                    scope.workflowTriggers.selectedTrigger = undefined;
                };
                /**
                 * Changes the selected trigger value.
                 */
                scope.selectEvent = function (eventOption) {
                    //Needs to clear old and set new.
                    scope.workflowTriggers.selectedTrigger.data.triggerEventTitle = eventOption.name;
                    scope.workflowTriggers.selectedTrigger.data.triggerEvent = eventOption.value;
                    if (eventOption.entityName == scope.workflow.data.workflowObject) {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = '';
                    }
                    else {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = eventOption.entityName;
                    }
                    scope.searchEvent.name = eventOption.name;
                    scope.showEventOptions = false;
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventpullBindings').then(function () {
                    });
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventTitlepullBindings').then(function () {
                    });
                };
                /**
                 * Selects a new collection.
                 */
                scope.selectCollection = function (collection) {
                    scope.workflowTriggers.selectedTrigger.data.scheduleCollection = collection;
                    scope.showCollections = false;
                };
                /**
                 * Removes a workflow trigger
                 */
                scope.removeWorkflowTrigger = function (workflowTrigger) {
                    if (workflowTrigger === scope.workflowTriggers.selectedTrigger) {
                        delete scope.workflowTriggers.selectedTrigger;
                    }
                    scope.workflowTriggers.splice(workflowTrigger.$$index, 1);
                };
                scope.setAsEvent = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 0;
                    }
                    //add event,  clear schedule
                };
                scope.setAsSchedule = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 1;
                    }
                };
                /**
                 * Adds a workflow trigger.
                 */
                scope.addWorkflowTrigger = function () {
                    var newWorkflowTrigger = $hibachi.newWorkflowTrigger();
                    scope.workflowTriggers.selectedTrigger = newWorkflowTrigger;
                };
                scope.addNewSchedule = function () {
                    scope.createSchedule = true;
                    scope.scheduleEntity = $hibachi.newSchedule();
                };
                scope.saveSchedule = function () {
                    if (scope.scheduleEntity.data.recuringType == 'weekly') {
                        scope.scheduleEntity.data.daysOfWeekToRun = scope.daysOfweek.filter(Number).join();
                    }
                    else if (scope.scheduleEntity.data.recuringType == 'monthly') {
                        scope.scheduleEntity.data.daysOfMonthToRun = scope.daysOfMonth.filter(Number).join();
                    }
                    scope.scheduleEntity.$$save().then(function (res) {
                        scope.schedule.selectedName = angular.copy(scope.scheduleEntity.data.scheduleName);
                        scope.selectSchedule(angular.copy(scope.scheduleEntity.data));
                        formService.resetForm(scope.scheduleEntity.forms['scheduleForm']);
                        scope.createSchedule = false;
                    }, function () {
                    });
                };
                scope.selectCollection = function (item) {
                    if (item === undefined) {
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection();
                        return;
                    }
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID = item.collectionID;
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName = item.collectionName;
                    }
                    else {
                        var _collection = $hibachi.newCollection();
                        _collection.data.collectionID = item.collectionID;
                        _collection.data.collectionName = item.collectionName;
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection(_collection);
                    }
                };
                scope.viewCollection = function () {
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                            entityName: 'Collection',
                            entityId: scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,
                            readOnly: true
                        });
                    }
                };
                scope.selectSchedule = function (item) {
                    if (item === undefined) {
                        scope.schedulePreview = {};
                        scope.workflowTriggers.selectedTrigger.$$setSchedule();
                        return;
                    }
                    scope.schedulePreview = scheduleService.buildSchedulePreview(item, 6);
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.schedule)) {
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID = item.scheduleID;
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName = item.scheduleName;
                    }
                    else {
                        var _schedule = $hibachi.newSchedule();
                        _schedule.data.scheduleID = item.scheduleID;
                        _schedule.data.scheduleName = item.scheduleName;
                        scope.workflowTriggers.selectedTrigger.$$setSchedule(_schedule);
                    }
                };
            }
        };
    }
    SWWorkflowTriggers.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) { return new SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'formService',
            'observerService',
            'hibachiPathBuilder',
            'collectionConfigService',
            'scheduleService',
            'dialogService'
        ];
        return directive;
    };
    return SWWorkflowTriggers;
}());
exports.SWWorkflowTriggers = SWWorkflowTriggers;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggerHistory = /** @class */ (function () {
    function SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggerhistory.html",
            link: function (scope, element, attrs) {
                $rootScope.workflowID = scope.workflow.data.workflowID;
                //Build the history collection.
                scope.workflowTriggerHistoryCollection = collectionConfigService.newCollectionConfig("WorkflowTriggerHistory");
                scope.workflowTriggerHistoryCollection.addFilter("workflowTrigger.workflow.workflowID", $rootScope.workflowID, "=");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("workflowTrigger.triggerType");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("response");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("endTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("startTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("successFlag");
            }
        };
    }
    SWWorkflowTriggerHistory.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) { return new SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder',
            '$rootScope',
            'collectionConfigService'
        ];
        return directive;
    };
    return SWWorkflowTriggerHistory;
}());
exports.SWWorkflowTriggerHistory = SWWorkflowTriggerHistory;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSchedulePreviewController = /** @class */ (function () {
    function SWSchedulePreviewController() {
    }
    return SWSchedulePreviewController;
}());
var SWSchedulePreview = /** @class */ (function () {
    function SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            schedule: "="
        };
        this.controller = SWSchedulePreviewController;
        this.controllerAs = "swSchedulePreview";
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "schedulepreview.html";
    }
    SWSchedulePreview.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSchedulePreview.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWSchedulePreview;
}());
exports.SWSchedulePreview = SWSchedulePreview;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSaveAndFinishController = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinishController($hibachi, dialogService, alertService, rbkeyService, $log) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.alertService = alertService;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.saving = false;
        this.initialSetup = function () {
            if (!angular.isDefined(_this.finish)) {
                _this.openNewDialog = false;
            }
            else {
                _this.openNewDialog = (_this.finish.toLowerCase() == 'true') ? false : true;
            }
            if (_this.openNewDialog) {
                _this.rbKey = 'admin.define.saveandnew';
            }
            else {
                _this.rbKey = 'admin.define.saveandfinish';
            }
        };
        this.save = function () {
            _this.saving = true;
            var savePromise = _this.entity.$$save();
            savePromise.then(function (data) {
                _this.dialogService.removeCurrentDialog();
                if (_this.openNewDialog && angular.isDefined(_this.partial)) {
                    _this.dialogService.addPageDialog(_this.partial);
                }
                else {
                    if (angular.isDefined(_this.redirectUrl)) {
                        window.location.href = _this.redirectUrl;
                    }
                    else if (angular.isDefined(_this.redirectAction)) {
                        if (angular.isUndefined(_this.redirectQueryString)) {
                            _this.redirectQueryString = "";
                        }
                        window.location.href = _this.$hibachi.buildUrl(_this.redirectAction, _this.redirectQueryString);
                    }
                    else {
                        _this.$log.debug("You did not specify a redirect for swSaveAndFinish");
                    }
                }
            }).catch(function (data) {
                if (angular.isDefined(_this.customErrorRbkey)) {
                    data = _this.rbkeyService.getRBKey(_this.customErrorRbkey);
                }
                if (angular.isString(data)) {
                    var alert = _this.alertService.newAlert();
                    alert.msg = data;
                    alert.type = "error";
                    alert.fade = true;
                    _this.alertService.addAlert(alert);
                }
                else {
                    _this.alertService.addAlerts(data);
                }
            }).finally(function () {
                _this.saving = false;
            });
        };
        if (!angular.isFunction(this.entity.$$save)) {
            throw ("Your entity does not have the $$save function.");
        }
        this.initialSetup();
    }
    return SWSaveAndFinishController;
}());
exports.SWSaveAndFinishController = SWSaveAndFinishController;
var SWSaveAndFinish = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder) {
        this.hibachiPartialsPath = hibachiPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.controller = SWSaveAndFinishController;
        this.controllerAs = "swSaveAndFinish";
        this.bindToController = {
            entity: "=",
            redirectUrl: "@?",
            redirectAction: "@?",
            redirectQueryString: "@?",
            finish: "@?",
            partial: "@?",
            customErrorRbkey: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(hibachiPartialsPath) + "saveandfinish.html";
    }
    SWSaveAndFinish.Factory = function () {
        var directive = function (hibachiPartialsPath, hibachiPathBuilder) { return new SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder); };
        directive.$inject = ["hibachiPartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWSaveAndFinish;
}());
exports.SWSaveAndFinish = SWSaveAndFinish;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var alert_module_1 = __webpack_require__(10);
var alert_module_2 = __webpack_require__(10);
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(2);
var static_1 = __webpack_require__(4);
var LoggerModule = /** @class */ (function () {
    function LoggerModule() {
    }
    LoggerModule = __decorate([
        core_1.NgModule({
            declarations: [],
            providers: [],
            imports: [
                alert_module_2.AlertModule,
                common_1.CommonModule,
                static_1.UpgradeModule
            ]
        }),
        __metadata("design:paramtypes", [])
    ], LoggerModule);
    return LoggerModule;
}());
exports.LoggerModule = LoggerModule;
var loggermodule = angular.module('logger', [alert_module_1.alertmodule.name])
    .run([function () {
    }]);
exports.loggermodule = loggermodule;


/***/ })
],[56]);
//# sourceMappingURL=vendor.bundle.js.map
//# sourceMappingURL=bundle.js.map